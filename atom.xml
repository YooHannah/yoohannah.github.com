<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Little World</title>
  <subtitle>learn and share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoohannah.github.io/"/>
  <updated>2017-08-12T15:54:43.520Z</updated>
  <id>http://yoohannah.github.io/</id>
  
  <author>
    <name>YooHannah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>断言语句assert</title>
    <link href="http://yoohannah.github.io/post/knowledge/assert.html"/>
    <id>http://yoohannah.github.io/post/knowledge/assert.html</id>
    <published>2017-08-12T15:54:02.000Z</published>
    <updated>2017-08-12T15:54:43.520Z</updated>
    
    <content type="html"><![CDATA[<p>测试用例里面的一种判断语句</p>
<p>在mocha中需要require<br>var assert = require(‘assert’)</p>
<p>参数一般有三个<br>value 待判断的值<br>expected 要和value进行比较的值，看二者是否相等或者不相等,如果没有expected，则是在判断value的值是否为真<br>message 判断结果为错误时,抛出来的错误提醒语句，如果 message 参数为 undefined，则赋予默认的错误信息。</p>
<p>assert(value[, message]) 同assert.ok()<br>assert.ok(value[, message]) value如果不为真值,抛出一个带有 message 属性的 AssertionError</p>
<p>assert.fail(message) 抛出错误信息message</p>
<p>assert.fail(actual, expected, message, operator) 根据参数抛出相应错误信息<br>如果 message 不存在，则错误信息会被设为 actual 的值加分隔符 operator 再加 expected 的值。 否则，错误信息为 message 的值,operator没有的话，默认为!=</p>
<p>assert.ifError(value) 如果 value 为真，则抛出 value,如果为假，则测试通过</p>
<p>assert.equal(actual, expected[, message])      使用相等运算符（==）测试 actual 参数与 expected 参数是否相等。<br>assert.deepEqual(actual, expected[, message])  测试 actual 参数与 expected 参数是否深度相等。 原始值使用 相等运算符（==）比较，只比较可枚举的自身属性。<br>深度相等意味着子对象的可枚举的自身属性也会被比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const obj1 = &#123;</div><div class="line">  a: &#123;</div><div class="line">    b: 1</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">const obj3 = &#123;</div><div class="line">  a: &#123;</div><div class="line">    b: 1</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">const obj4 = Object.create(obj1);</div><div class="line">assert.deepEqual(obj1, obj4);</div><div class="line">// 抛出 AssertionError: &#123; a: &#123; b: 1 &#125; &#125; deepEqual &#123;&#125;</div><div class="line">// 原型会被忽略</div><div class="line">assert.deepEqual(obj1, obj3);</div><div class="line">// 通过，两个对象相等</div></pre></td></tr></table></figure></p>
<p>assert.deepStrictEqual(actual, expected[, message])<br>大多数情况下与 assert.deepEqual() 一样，但有三个例外：</p>
<p>原始值使用 全等运算符（===）比较。使用SameValueZero比较法来比较设置的值及映射的键（也就意味不用考虑caveats）。<br>对象的 原型 也使用 全等运算符 比较。<br>对象的类型标签应该相同。</p>
<p>assert.notEqual(actual, expected[, message])              使用 不等运算符（!=）测试是否不相等。<br>assert.notDeepEqual(actual, expected[, message])          测试是否不深度相等。 与 assert.deepEqual() 相反。<br>assert.notStrictEqual(actual, expected[, message])        使用 不全等运算符（!==）测试是否不全等。<br>assert.notDeepStrictEqual(actual, expected[, message])    测试是否不深度全等。 与 assert.deepStrictEqual() 相反。</p>
<p>assert.throws(block[, error][, message])   期望 block 函数抛出错误error，如果block(function)抛出error的错误，则测试通过<br>error 可以是构造函数、正则表达式、或自定义的验证函数。</p>
<p>assert.doesNotThrow(block[, error][, message])  断言 block 函数不会抛出错误<br>当 assert.doesNotThrow() 被调用时，它会立即调用 block 函数。<br>如果抛出错误且错误类型与 error 参数指定的相同，则抛出 AssertionError。 如果错误类型不相同，或 error 参数是 undefined，则错误会被抛回给调用者。<br>如果block不抛出错误，则测试通过</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试用例里面的一种判断语句&lt;/p&gt;
&lt;p&gt;在mocha中需要require&lt;br&gt;var assert = require(‘assert’)&lt;/p&gt;
&lt;p&gt;参数一般有三个&lt;br&gt;value 待判断的值&lt;br&gt;expected 要和value进行比较的值，看二者是否相等或者
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Karma test</title>
    <link href="http://yoohannah.github.io/post/knowledge/Karma.html"/>
    <id>http://yoohannah.github.io/post/knowledge/Karma.html</id>
    <published>2017-08-12T15:54:02.000Z</published>
    <updated>2017-08-13T02:02:38.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Karma-test"><a href="#Karma-test" class="headerlink" title="Karma test"></a>Karma test</h1><p>Karma是由Google团队开发的一套前端测试运行框架。它不同于测试框架（例如jasmine，mocha等），运行在这些测试框架之上。主要完成以下工作：<br>Karma启动一个web服务器，生成包含js源代码和js测试脚本的页面；<br>运行浏览器加载页面，并显示测试的结果；<br>如果开启检测，则当文件有修改时，执行继续执行以上过程。</p>
<h1 id="搭建测试环境"><a href="#搭建测试环境" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h1><p>npm install -g karma-cli //让全局都可以运行karma的命令行,命令行工具<br>npm i karma –save-dev //只在当前项目中使用karma<br>npm install //安装项目的依赖 package.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;karma&quot;: &quot;^1.7.0&quot;,</div><div class="line">    &quot;karma-chrome-launcher&quot;: &quot;^2.2.0&quot;,</div><div class="line">    &quot;karma-mocha&quot;: &quot;^1.3.0&quot;,</div><div class="line">    &quot;mocha&quot;: &quot;^3.5.0&quot;,</div><div class="line">    &quot;should&quot;: &quot;^11.2.1&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>karma init //在cmd中运行该命令,构建karma.conf.js文件,运行后会询问相关问题然后生成karma.conf.js文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">Which testing framework do you want to use ?</div><div class="line">Press tab to list possible options. Enter to move to the next question.</div><div class="line">&gt; mocha //选择要使用的框架,不能直接输入,是选择题,点击键盘箭头可更改选项</div><div class="line"></div><div class="line">Do you want to use Require.js ?</div><div class="line">This will add Require.js plugin.</div><div class="line">Press tab to list possible options. Enter to move to the next question.</div><div class="line">&gt; no  //是否add Require.js plugin</div><div class="line"></div><div class="line">Do you want to capture any browsers automatically ?</div><div class="line">Press tab to list possible options. Enter empty string to move to the next quest</div><div class="line">ion.</div><div class="line">&gt; Chrome //选择用哪个浏览器打开测试页，也是选择题，不能输入</div><div class="line">&gt;</div><div class="line"></div><div class="line">What is the location of your source and test files ?</div><div class="line">You can use glob patterns, eg. "js/*.js" or "test/**/*Spec.js".</div><div class="line">Enter empty string to move to the next question.</div><div class="line">&gt; src/*.js  //添加要测试的代码的路径，不是测试用例代码的路径，同时，代码中用到的其他文件也在这里同时添加，</div><div class="line">11 08 2017 15:03:13.822:WARN [init]: There is no file matching this pattern.</div><div class="line"></div><div class="line">&gt; //	回车可以切换下一行继续添加，连续回车进入下一个问题</div><div class="line"></div><div class="line">Should any of the files included by the previous patterns be excluded ?</div><div class="line">You can use glob patterns, eg. "**/*.swp".</div><div class="line">Enter empty string to move to the next question.</div><div class="line">&gt;</div><div class="line"></div><div class="line">Do you want Karma to watch all the files and run the tests on change ?</div><div class="line">Press tab to list possible options.</div><div class="line">&gt; yes //是否跟所有文件自动开启测试</div><div class="line"></div><div class="line"></div><div class="line">Config file generated at "G:\css\homework1\karma.conf.js".</div></pre></td></tr></table></figure></p>
<p>karma.conf.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">module.exports = function(config) &#123;</div><div class="line">  config.set(&#123;</div><div class="line"></div><div class="line">    // base path that will be used to resolve all patterns (eg. files, exclude)</div><div class="line">    basePath: &apos;&apos;,//根路径，后面配置的基本所有相对路径都会根据这个路径来构造。</div><div class="line"></div><div class="line"></div><div class="line">    // frameworks to use 使用到的框架</div><div class="line">    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter</div><div class="line">    frameworks: [&apos;mocha&apos;],</div><div class="line"></div><div class="line"></div><div class="line">    // list of files / patterns to load in the browser  将会在浏览器里面执行的代码</div><div class="line">    files: [</div><div class="line">      &apos;node_modules/should/should.js&apos;,</div><div class="line">      &apos;js/*.js&apos;,</div><div class="line">      &apos;quz/*.js&apos;,</div><div class="line">      &apos;test/*.js&apos;</div><div class="line">    ],</div><div class="line"></div><div class="line"></div><div class="line">    // list of files to exclude 需要从 files 中排除掉的文件</div><div class="line">    exclude: [</div><div class="line">    ],</div><div class="line"></div><div class="line"></div><div class="line">    // preprocess matching files before serving them to the browser需要做预处理的文件，以及这些文件对应的预处理器。</div><div class="line">    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</div><div class="line">    preprocessors: &#123;////此处就可以将 coffee 、 ES6 等代码转换一下。</div><div class="line">        &apos;js/*.js&apos;: [&apos;coverage&apos;],//测试覆盖率</div><div class="line">        &apos;quz/*.js&apos;: [&apos;coverage&apos;]//测试覆盖率</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"></div><div class="line">    // test results reporter to use 测试结果报告器</div><div class="line">    // possible values: &apos;dots&apos;, &apos;progress&apos;</div><div class="line">    // available reporters: https://npmjs.org/browse/keyword/karma-reporter</div><div class="line">    reporters: [&apos;progress&apos;, &apos;coverage&apos;],</div><div class="line"></div><div class="line">     // 覆盖率报告器配置</div><div class="line">    coverageReporter: &#123;</div><div class="line">      type : &apos;lcov&apos;, //html格式会生成html文件，lcov格式可以和coveralls结合生成coveralls徽章</div><div class="line">      dir : &apos;coverage/&apos;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // web server port 服务器端口号</div><div class="line">    port: 9876,</div><div class="line"></div><div class="line"></div><div class="line">    // enable / disable colors in the output (reporters and logs)</div><div class="line">    colors: true,</div><div class="line"></div><div class="line"></div><div class="line">    // level of logging 日志级别</div><div class="line">    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</div><div class="line">    logLevel: config.LOG_INFO,</div><div class="line"></div><div class="line"></div><div class="line">    // enable / disable watching file and executing tests whenever any file changes 启用/禁用监视文件变化重新执行测试的功能</div><div class="line">    autoWatch: true,</div><div class="line"></div><div class="line"></div><div class="line">    // start these browsers 使用的浏览器</div><div class="line">    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</div><div class="line">    browsers: [&apos;Chrome&apos;],</div><div class="line"></div><div class="line"></div><div class="line">    // Continuous Integration mode true测试一次就结束,false测试完一直处于测试状态</div><div class="line">    // if true, Karma captures browsers, runs the tests and exits</div><div class="line">    singleRun: true,</div><div class="line"></div><div class="line">    // Concurrency level</div><div class="line">    // how many browser should be started simultaneous</div><div class="line">    concurrency: Infinity</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="集成测试Travis-CI"><a href="#集成测试Travis-CI" class="headerlink" title="集成测试Travis CI"></a>集成测试Travis CI</h1><p><a href="/post/knowledge/TravishCI.html">Travish CI使用</a><br>通过Travis CI测试我们可以获得一个测试通过的标志<a href="https://travis-ci.org/YooHannah/homework1" target="_blank" rel="external"><img src="https://travis-ci.org/YooHannah/homework1.svg?branch=develop" alt="Build Status"></a>，可以将它放在github仓库readme.md文件里面<br><img src="/image/coverage1.png" alt="coverage1"><br>更改链接中branch的值可以获得对应分支的测试结果</p>
<h1 id="测试代码覆盖率-Coverage"><a href="#测试代码覆盖率-Coverage" class="headerlink" title="测试代码覆盖率 Coverage"></a>测试代码覆盖率 Coverage</h1><p>衡量测试脚本的质量–代码覆盖率:测试中运行到的代码占所有代码的比率</p>
<p>安装测试覆盖率工具<br>npm i –save-dev karma-coverage</p>
<p>修改配置文件karma.conf.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// modified</div><div class="line">preprocessors: &#123;</div><div class="line">    &apos;src/**/*.js&apos;: [&apos;coverage&apos;], //要测试的功能代码路径：[&apos;coverage&apos;]   多个文件夹就逗号隔开，按格式写下去</div><div class="line">    &apos;js/*.js&apos;: [&apos;coverage&apos;],</div><div class="line">    &apos;quz/*.js&apos;: [&apos;coverage&apos;]</div><div class="line">&#125;,</div><div class="line"></div><div class="line">//modified</div><div class="line">reporters: [&apos;progress&apos;, &apos;coverage&apos;],</div><div class="line"></div><div class="line">// add</div><div class="line">coverageReporter: &#123;</div><div class="line">  type : &apos;html&apos;,</div><div class="line">  dir : &apos;coverage/&apos;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>运行karma start,会新增coverage文件夹,里面只有一个浏览器名的文件夹，里面是根据preprocessors添加的路径生成对应的文件夹和其他文件，<br>其他文件里面有index.html文件，是整个测试的测试报告，文件夹里是每个文件的覆盖测试结果和代码具体的覆盖情况</p>
<p>注意：如果不想将测试结果上传github,记得更改.gitignore文件，将coverage文件夹忽略掉</p>
<h1 id="获取覆盖率标志"><a href="#获取覆盖率标志" class="headerlink" title="获取覆盖率标志"></a>获取覆盖率标志</h1><p>github 仓库经常会看到这个标志<br><img src="/image/coverage2.png" alt="coverage2"><br>就是说项目的测试覆盖率是91%，要获取这个标志我们需要将测试覆盖率放到<a href="https://coveralls.io" target="_blank" rel="external">Coveralls</a>上</p>
<p>安装 coveralls方便我们在Travis CI上测试完之后将结果上传<br>npm i coveralls –save-dev</p>
<p>更改karma.conf.js<br>coverageReporter: {<br>  type : ‘lcov’, //将html改为lcov<br>  dir : ‘coverage/‘<br>},<br>接下来操作步骤可以有两种<br>方法一：<br>仅更改 package.json文件,不保留测试命令karma start<br>更改package.json的scripts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;./node_modules/karma/bin/karma start --browsers Firefox --single-run &amp;&amp; find coverage -name lcov.info -print0 | xargs -0 cat | ./node_modules/coveralls/bin/coveralls.js &amp;&amp; rm -rf ./coverage&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>方法二：<br>更改package.json文件,保留测试命令karma start<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">		&quot;test&quot;: &quot;karma start&quot;,</div><div class="line">    &quot;report&quot;: &quot;find coverage -name lcov.info -print0 | xargs -0 cat | ./node_modules/coveralls/bin/coveralls.js &amp;&amp; rm -rf ./coverage&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也要更改.travis.yml文件，添加以下语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">after_success:</div><div class="line">  - &quot;npm run report&quot;</div></pre></td></tr></table></figure></p>
<p>然后push代码，等Travi CI 完成测试后，我们可以在<a href="https://coveralls.io" target="_blank" rel="external">Coveralls</a>上获取标志,<br>在总的测试结果那个页面不是具体某次提交的页面获取<br><img src="/image/coverage3.png" alt="coverage3"><br>点击EMBED可以获取不同格式的标志代码，<br>复制粘贴MARKDOWN 格式可以放在readme.md文件中直接使用</p>
<p>相关链接：<br><a href="https://csbun.github.io/blog/2015/11/karma/" target="_blank" rel="external">使用 Karma 在真实浏览器上测试</a><br><a href="https://segmentfault.com/a/1190000006895064" target="_blank" rel="external">前端单元测试之Karma环境搭建</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Karma-test&quot;&gt;&lt;a href=&quot;#Karma-test&quot; class=&quot;headerlink&quot; title=&quot;Karma test&quot;&gt;&lt;/a&gt;Karma test&lt;/h1&gt;&lt;p&gt;Karma是由Google团队开发的一套前端测试运行框架。它不同于测试框架（
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>变量提升</title>
    <link href="http://yoohannah.github.io/post/knowledge/var.html"/>
    <id>http://yoohannah.github.io/post/knowledge/var.html</id>
    <published>2017-08-09T14:02:37.000Z</published>
    <updated>2017-08-09T14:16:06.895Z</updated>
    
    <content type="html"><![CDATA[<p>一个变量的生成需要经历 创建、初始化、赋值三个阶段<br>let 的「创建」过程被提升了，但是初始化没有提升。<br>var 的「创建」和「初始化」都被提升了。<br>function 的「创建」「初始化」和「赋值」都被提升了。<br>const，其实 const 和 let 只有一个区别，那就是 const 只有「创建」和「初始化」，没有「赋值」过程。<br><a href="https://zhuanlan.zhihu.com/p/28140450" target="_blank" rel="external">let</a><br>1、<br>假设有如下代码：</p>
<p>function fn(){<br>  var x = 1<br>  var y = 2<br>}<br>fn()</p>
<p>在执行 fn 时，会有以下过程（不完全）：</p>
<p>进入 fn，为 fn 创建一个环境。<br>找到 fn 中所有用 var 声明的变量，在这个环境中「创建」这些变量（即 x 和 y）。<br>将这些变量「初始化」为 undefined。<br>开始执行代码<br>x = 1 将 x 变量「赋值」为 1<br>y = 2 将 y 变量「赋值」为 2<br>也就是说 var 声明会在代码执行之前就将「创建变量，并将其初始化为 undefined」。</p>
<p>这就解释了为什么在 var x = 1 之前 console.log(x) 会得到 undefined。</p>
<p>2、<br>fn2()</p>
<p>function fn2(){<br>  console.log(2)<br>}<br>JS 引擎会有一下过程：</p>
<p>找到所有用 function 声明的变量，在环境中「创建」这些变量。<br>将这些变量「初始化」并「赋值」为 function(){ console.log(2) }。<br>开始执行代码 fn2()<br>也就是说 function 声明会在代码执行之前就「创建、初始化并赋值」<br>3、<br>{<br>  let x = 1<br>  x = 2<br>}<br>只看 {} 里面的过程：</p>
<p>找到所有用 let 声明的变量，在环境中「创建」这些变量<br>开始执行代码（注意现在还没有初始化）<br>执行 x = 1，将 x 「初始化」为 1（这并不是一次赋值，如果代码是 let x，就将 x 初始化为 undefined）<br>执行 x = 2，对 x 进行「赋值」<br>这就解释了为什么在 let x 之前使用 x 会报错：</p>
<p>let x = ‘global’<br>{<br>  console.log(x) // Uncaught ReferenceError: x is not defined<br>  let x = 1<br>}<br>原因有两个</p>
<p>console.log(x) 中的 x 指的是下面的 x，而不是全局的 x<br>执行 log 时 x 还没「初始化」，所以不能使用（也就是所谓的暂时死区）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个变量的生成需要经历 创建、初始化、赋值三个阶段&lt;br&gt;let 的「创建」过程被提升了，但是初始化没有提升。&lt;br&gt;var 的「创建」和「初始化」都被提升了。&lt;br&gt;function 的「创建」「初始化」和「赋值」都被提升了。&lt;br&gt;const，其实 const 和 le
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于this</title>
    <link href="http://yoohannah.github.io/post/knowledge/aboutthis.html"/>
    <id>http://yoohannah.github.io/post/knowledge/aboutthis.html</id>
    <published>2017-08-09T14:00:37.000Z</published>
    <updated>2017-08-09T14:00:53.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="普通函数中的this"><a href="#普通函数中的this" class="headerlink" title="普通函数中的this"></a>普通函数中的this</h1><ol>
<li>this总是代表它的直接调用者, 例如 obj.func ,那么func中的this就是obj<br>2.在默认情况(非严格模式下,未使用 ‘use strict’),没找到直接调用者,则this指的是 window<br>3.在严格模式下,没有直接调用者的函数中的this是 undefined<br>4.使用call,apply,bind绑定的,this指的是 绑定的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//window</span></div><div class="line">&#125;</div><div class="line">test();</div><div class="line"></div><div class="line"><span class="number">2</span>、</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//undefined</span></div><div class="line">&#125;</div><div class="line">test();</div><div class="line"></div><div class="line"><span class="number">3</span>、</div><div class="line"><span class="built_in">window</span>.val = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">val</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.val *= <span class="number">2</span>;    <span class="comment">//普通函数，this指向调用者</span></div><div class="line">      val *= <span class="number">2</span>;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.val);</div><div class="line">      <span class="built_in">console</span>.log(val);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  obj.fn();<span class="comment">// 4 2</span></div><div class="line">  <span class="keyword">var</span> func = obj.fn;</div><div class="line">  func(); <span class="comment">//8 8</span></div><div class="line"><span class="comment">//obj.fn()执行时,val 没有在fn的作用域里面定义，则去obj.fn()的作用域里面找,obj.fn()位于window,window.val是1;this指向obj,this.val是2</span></div><div class="line"><span class="comment">//func()执行时，window.val由于执行obj.fn(),现在是2;func()在window作用域下执行,this就是window,所以this.val和val都是window.val</span></div><div class="line"></div><div class="line"><span class="number">4</span>、</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> test = <span class="string">'in the f!'</span>;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//是函数就会建立作用域</span></div><div class="line"> 	 <span class="built_in">console</span>(<span class="string">'inner '</span>+ test) <span class="comment">// inner in the f!</span></div><div class="line">  &#125;, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//以上代码等于</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> test = <span class="string">'in the f!'</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ff</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">'inner '</span> + test) <span class="comment">//test在ff里面没定义，但在f里面进行了定义</span></div><div class="line">    &#125; <span class="comment">// 能访问到f中的test局部变量</span></div><div class="line"></div><div class="line">    setTimeout(ff, <span class="number">0</span>); <span class="comment">// inner in the f!</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">f();</div><div class="line"><span class="number">5</span>、</div><div class="line"><span class="keyword">var</span> lzh = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'lzh'</span>,</div><div class="line">    <span class="attr">say</span>: <span class="function"><span class="keyword">function</span>(<span class="params">something</span>)</span>&#123;</div><div class="line">        alert(something + <span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> iny = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'iny'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">lzh.say.apply(iny, [<span class="string">'hi, I am '</span>]); <span class="comment">// 输出 hi I am iny</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h1><p>默认指向在定义它时,它所处的对象,而不是执行时的对象, 定义它的时候,可能环境是window</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">foo()()()() <span class="comment">//window</span></div><div class="line"><span class="keyword">var</span> f = foo.call(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;);</div><div class="line">f()()() <span class="comment">//&#123;id:1&#125;</span></div><div class="line"><span class="keyword">var</span> t1 = f.call(&#123;<span class="attr">id</span>: <span class="number">2</span>&#125;)()();<span class="comment">//&#123;id:1&#125;</span></div><div class="line"><span class="keyword">var</span> t2 = f().call(&#123;<span class="attr">id</span>: <span class="number">3</span>&#125;)();<span class="comment">//&#123;id:1&#125;</span></div><div class="line"><span class="keyword">var</span> t3 = f()().call(&#123;<span class="attr">id</span>: <span class="number">4</span>&#125;);<span class="comment">//&#123;id:1&#125;</span></div></pre></td></tr></table></figure>
<h1 id="setTimeout中的this"><a href="#setTimeout中的this" class="headerlink" title="setTimeout中的this"></a>setTimeout中的this</h1><p> 普通函数指向window<br> 箭头函数指向定义的对象<br> 引用函数,指向调用对象</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"> 0、</div><div class="line"> var obj = &#123;</div><div class="line">    fn1 : function () &#123;</div><div class="line">        console.log(this);          //obj</div><div class="line">    &#125;,</div><div class="line">    fn2 :　function () &#123;</div><div class="line">        setTimeout(function () &#123;</div><div class="line">            console.log(this);     //window 匿名函数执行在window环境，找不到宿主对象，所以指向window</div><div class="line">        &#125;,0);</div><div class="line">    &#125;,</div><div class="line">    fn3: function () &#123;</div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        console.log(this);         //obj 箭头函数创建在obj上</div><div class="line">      &#125;,100);</div><div class="line">    &#125;</div><div class="line">    fn4: function () &#123;</div><div class="line">      var that = this;</div><div class="line">      setTimeout(function () &#123;</div><div class="line">        console.log(that)          //obj 在setTimeout里面引用obj</div><div class="line">        console.log(this)          //window</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    fn5: function () &#123;</div><div class="line">      var f1 = () =&gt; &#123;</div><div class="line">        console.log(this);         // obj f1定义处在obj里面</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">          console.log(this);       // obj 箭头函数定义处在obj里面</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      f1();</div><div class="line">    &#125;</div><div class="line">    fn6: function () &#123;</div><div class="line">      var f2 = function () &#123;</div><div class="line">        console.log(this);         // window, f2调用时,没有宿主对象,默认是window</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">          console.log(this);      // window 箭头函数定义在f2确定的window里面</div><div class="line">        &#125;)</div><div class="line">      &#125;;</div><div class="line">      f2();</div><div class="line">    &#125;</div><div class="line">    fn7: function () &#123;</div><div class="line">      &apos;use strict&apos;;</div><div class="line">      var f3 = function () &#123;</div><div class="line">        console.log(this); // undefined</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">          console.log(this); // undefined</div><div class="line">        &#125;)</div><div class="line">      &#125;;</div><div class="line">      f3();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.fn1();</div><div class="line">obj.fn2();</div><div class="line">obj.fn3();</div><div class="line">obj.fn4();</div><div class="line">···</div><div class="line"></div><div class="line">1、</div><div class="line">function foo()&#123;</div><div class="line">	setTimeout(function()&#123;</div><div class="line">    console.log(this) //window 匿名函数，找不到宿主对象</div><div class="line">  &#125;, 100);</div><div class="line">  setTimeout(() =&gt; &#123;</div><div class="line">    console.log(this) //window foo挂载在window对象上</div><div class="line">  &#125;, 100);</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line">foo.call(&#123;id:42&#125;); //window &#123;id:42&#125; foo运行时所在的对象，恰好是箭头函数定义时所在的对象</div><div class="line">//call([thisObj[,arg1[, arg2,....]) 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</div><div class="line"></div><div class="line">2、</div><div class="line">function method() &#123;</div><div class="line">  alert(this.value);  // 输出 42  第二个this</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Foo() &#123;</div><div class="line">    this.value = 42;</div><div class="line">    setTimeout(this.method, 500);  // 这里this指向window   第一个this</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo();</div><div class="line">//Foo挂载在window上，当执行Foo时，this指向window,Foo里面的value被挂到window，method本来就挂在window上，所以执行this.method就是调用window.method</div><div class="line">//method执行，它的this指向window,这时window已经挂上value值42</div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/libin-1/p/5814792.html" target="_blank" rel="external">应用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;普通函数中的this&quot;&gt;&lt;a href=&quot;#普通函数中的this&quot; class=&quot;headerlink&quot; title=&quot;普通函数中的this&quot;&gt;&lt;/a&gt;普通函数中的this&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;this总是代表它的直接调用者, 例如 obj.func ,那么
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Travish CI使用</title>
    <link href="http://yoohannah.github.io/post/knowledge/TravishCI.html"/>
    <id>http://yoohannah.github.io/post/knowledge/TravishCI.html</id>
    <published>2017-08-07T21:59:37.000Z</published>
    <updated>2017-08-07T22:00:13.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Travish-CI使用"><a href="#Travish-CI使用" class="headerlink" title="Travish CI使用"></a>Travish CI使用</h1><p>1、使用github 账号登陆<a href="https://www.travis-ci.org/" target="_blank" rel="external">https://www.travis-ci.org/</a><br>2、点击右上角自己的账户名，选择accounts,弹出在github上所有的仓库<br><img src="/image/ci1.png" alt="ci1.png"><br>点击这个按钮重新从github上获取所有仓库<br><img src="/image/ci2.png" alt="ci2.png"><br>3、点击对应仓库按钮，变为对勾，则开启对应仓库的集成化测试,每次提交代码到远程仓库都进行一次测试<br>4、点击仓库名,可进入到测试界面，<br><img src="/image/ci3.png" alt="ci3.png"><br>5、为项目添加.travis.yml文件<br>.travis.yml 文件编写的相关语法可参考<a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/" target="_blank" rel="external">https://docs.travis-ci.com/user/languages/javascript-with-nodejs/</a></p>
<p>.travis.yml 文件可以在<a href="https://lint.travis-ci.org/" target="_blank" rel="external">https://lint.travis-ci.org/</a>页面进行检查，是否编写正确</p>
<p>6、push代码,在Travish CI等待测试结果<br>页面图标因为有缓存所以可能出现不能及时更换状态的情况,这个注意看结果就好</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Travish-CI使用&quot;&gt;&lt;a href=&quot;#Travish-CI使用&quot; class=&quot;headerlink&quot; title=&quot;Travish CI使用&quot;&gt;&lt;/a&gt;Travish CI使用&lt;/h1&gt;&lt;p&gt;1、使用github 账号登陆&lt;a href=&quot;https:
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>fork仓库</title>
    <link href="http://yoohannah.github.io/post/knowledge/fork.html"/>
    <id>http://yoohannah.github.io/post/knowledge/fork.html</id>
    <published>2017-08-07T21:58:37.000Z</published>
    <updated>2017-08-07T21:59:40.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h1><p>在页面点击Fork,将被人的仓库复制到自己的远程仓库<br>使用git clone 将远程仓库克隆到本地<br>切换分支到develop git checkout -b develop<br>修改完代码后<br>git add . &amp;&amp; git commit -m ‘test new pull request’<br>git push origin develop<br>然后在github页面找到刚刚fork的仓库,切换branch到develop,<br>点击New pull request进行merge</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;fork&quot;&gt;&lt;a href=&quot;#fork&quot; class=&quot;headerlink&quot; title=&quot;fork&quot;&gt;&lt;/a&gt;fork&lt;/h1&gt;&lt;p&gt;在页面点击Fork,将被人的仓库复制到自己的远程仓库&lt;br&gt;使用git clone 将远程仓库克隆到本地&lt;br&gt;切换分支到d
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>事件冒泡和事件捕获</title>
    <link href="http://yoohannah.github.io/post/knowledge/eventPopCatch.html"/>
    <id>http://yoohannah.github.io/post/knowledge/eventPopCatch.html</id>
    <published>2017-08-06T08:10:02.000Z</published>
    <updated>2017-08-06T08:32:33.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="addEventListener-attachEvent-element-onclick"><a href="#addEventListener-attachEvent-element-onclick" class="headerlink" title="addEventListener/attachEvent/element.onclick"></a>addEventListener/attachEvent/element.onclick</h1><p>辨别区分addEventListener、attachEvent和element.onclick</p>
<h2 id="attachEvent事件"><a href="#attachEvent事件" class="headerlink" title="attachEvent事件"></a>attachEvent事件</h2><p>attachEvent是ie添加事件处理程序,接收两个参数,其中事件类型名称要加”on”,<br>可以添加多个事件处理程序,按照添加顺序相反的顺序触发</p>
<h2 id="addEventListener事件"><a href="#addEventListener事件" class="headerlink" title="addEventListener事件"></a>addEventListener事件</h2><p>addEventListener是给非ie添加事件处理程序,接收三个参数,第一个是事件名,不需要加“on”,<br>第二个是绑定的函数，第三个参数是一个布尔值,如果是false,就使用传统的冒泡方式,<br>如果为true,就在捕获阶段调用事件处理程序<br>可以添加多个事件处理程序，按照添加顺序触发</p>
<h2 id="onclick"><a href="#onclick" class="headerlink" title="onclick"></a>onclick</h2><p>el.onclick相当于在标签上写onclick</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>1.上下文<br>attachEvent会在全局作用域中运行，this等于window对象<br>addEventLinstener在其依附的元素的作用域中运行,this等于绑定元素对象<br>使this关键字都指向元素处理方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function bind(el, fn, type)&#123;</div><div class="line">        var _fn = function()&#123;</div><div class="line">                fn.apply(el, arguments);</div><div class="line">        &#125;;</div><div class="line">        window.addEventListener ? el.addEventListener(type, _fn, false) : el.attachEvent(&quot;on&quot; + type, _fn);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.绑定<br>el.onclick通过标签的onclick属性输入到文档,然后由文档解析成事件<br>attachEvent和addEventLinstener要在文档解析完成以后,通过文档的dom接口去绑定的事件<br><a href="http://blog.csdn.net/u011700203/article/details/47656857" target="_blank" rel="external">资源加载和页面事件</a></p>
<p>3.取消绑定<br>el.onclick：el.onclick=null;<br>addEventListener：removeEventListener()；<br>attachEvent()：detachEvent()</p>
<p>4.获取event事件<br>非IE:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">el.onclick=function(event)&#123;</div><div class="line">　　alert(event.type);           //&quot;click&quot;</div><div class="line">&#125;;</div><div class="line">el.addEventListener(&quot;click&quot;,function(event)&#123;</div><div class="line">　　alert(event.type);               //&quot;click&quot;</div><div class="line">&#125;,false);</div></pre></td></tr></table></figure></p>
<p>IE:<br>通过el.onclick绑定的事件处理程序中，event对象作为window对象的一个属性存在。<br>el.onclick=function(){<br>　　var event=window.event;<br>　　alert(event.type);              //“click”<br>}<br>如果通过attachEvent()添加事件处理程序时，event对象作为参数被传入事件处理程序，<br>el.attachEvent(“onclick”,function(event){<br>　　alert(event.type);                 //“click”<br>});</p>
<p>标签时一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;Click me&quot; onclick=&quot;alert(event.type)&quot;/&gt;   //&quot;click&quot;</div></pre></td></tr></table></figure></p>
<h1 id="事件捕获、事件冒泡"><a href="#事件捕获、事件冒泡" class="headerlink" title="事件捕获、事件冒泡"></a>事件捕获、事件冒泡</h1><p>二者是指当事件在某一DOM元素被触发时,该DOM元素的父级元素也绑定了触发事件,则触发事件的执行顺序</p>
<h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>事件自下而上依次执行,先执行子元素触发事件，再执行父元素触发事件，<br>addEventListener第三个参数设置为false,参数不设置默认是冒泡执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;parent&quot;&gt;</div><div class="line">　　&lt;div id=&quot;child&quot; class=&quot;child&quot;&gt;您好&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        document.getElementById(&quot;parent&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">            alert(&quot;parent事件被触发，&quot;+this.id);</div><div class="line">        &#125;)</div><div class="line">        document.getElementById(&quot;child&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">            alert(&quot;child事件被触发，&quot;+this.id)</div><div class="line">        &#125;)</div><div class="line">        document.getElementById(&quot;parent&quot;).onclick=function(e)&#123;</div><div class="line">            alert(&quot;parentonclik事件被触发，&quot;+this.id);</div><div class="line">        &#125;</div><div class="line">        document.getElementById(&quot;child&quot;).onclick=function(e)&#123;</div><div class="line">            alert(&quot;childonclik事件被触发，&quot;+this.id);</div><div class="line">        &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">//点击&apos;您好&apos;,弹出顺序:child事件被触发-&gt;childonclik事件被触发-&gt;parent事件被触发-&gt;parentonclik事件被触发</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        document.getElementById(&quot;parent&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">             alert(&quot;parent事件被触发，&quot;+this.id);</div><div class="line">        &#125;,false)</div><div class="line">        document.getElementById(&quot;child&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">            alert(&quot;child事件被触发，&quot;+this.id)</div><div class="line">        &#125;,true)</div><div class="line">&lt;/script&gt;</div><div class="line">//点击&apos;您好&apos;,先弹出child事件被触发,再弹出parent事件被触发</div></pre></td></tr></table></figure></p>
<h2 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h2><p>事件从上到下一次执行,先执行父元素触发事件，再执行子元素触发事件,<br>addEventListener第三个参数设置为true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;parent&quot;&gt;</div><div class="line">　　&lt;div id=&quot;child&quot; class=&quot;child&quot;&gt;您好&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">document.getElementById(&quot;parent&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">    alert(&quot;parent事件被触发，&quot;+this.id);</div><div class="line">&#125;,true)</div><div class="line">document.getElementById(&quot;child&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">    alert(&quot;child事件被触发，&quot;+this.id)</div><div class="line">&#125;,true)</div><div class="line">document.getElementById(&quot;parent&quot;).onclick=function(e)&#123;</div><div class="line">    alert(&quot;parentonclik事件被触发，&quot;+this.id);</div><div class="line">&#125;</div><div class="line">document.getElementById(&quot;child&quot;).onclick=function(e)&#123;</div><div class="line">    alert(&quot;childonclik事件被触发，&quot;+this.id);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">//点击&apos;您好&apos;,弹出顺序:parent事件被触发-&gt;child事件被触发-&gt;childonclik事件被触发-&gt;parentonclik事件被触发</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">document.getElementById(&quot;parent&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">                alert(&quot;parent事件被触发，&quot;+this.id);</div><div class="line">            &#125;,true)</div><div class="line">            document.getElementById(&quot;child&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">                alert(&quot;child事件被触发，&quot;+this.id)</div><div class="line">            &#125;,false)</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">//点击&apos;您好&apos;,先弹出parent事件被触发,再弹出child事件被触发</div></pre></td></tr></table></figure></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//要求：鼠标放到li上对应的li背景变灰</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;item1&lt;/li&gt;</div><div class="line">    &lt;li&gt;item2&lt;/li&gt;</div><div class="line">    &lt;li&gt;item3&lt;/li&gt;</div><div class="line">    &lt;li&gt;item4&lt;/li&gt;</div><div class="line">    &lt;li&gt;item5&lt;/li&gt;</div><div class="line">    &lt;li&gt;item6&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">//实现一：利用事件冒泡实现,不用遍历所有li节点</div><div class="line">$(&quot;ul&quot;).on(&quot;mouseover&quot;,function(e)&#123;</div><div class="line">    $(e.target).css(&quot;background-color&quot;,&quot;#ddd&quot;).siblings().css(&quot;background-color&quot;,&quot;white&quot;);</div><div class="line">&#125;)</div><div class="line">//实现二：给每个li绑定事件，缺点，动态的加载了一些元素,新增li后，还要再绑定一次事件</div><div class="line">$(&quot;li&quot;).on(&quot;mouseover&quot;,function()&#123;</div><div class="line">    $(this).css(&quot;background-color&quot;,&quot;#ddd&quot;).siblings().css(&quot;background-color&quot;,&quot;white&quot;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="禁止冒泡"><a href="#禁止冒泡" class="headerlink" title="禁止冒泡"></a>禁止冒泡</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function doSomething(e) &#123;</div><div class="line">  if (!e) &#123;//微软模型</div><div class="line">    var e = window.event;</div><div class="line">    e.cancelBubble = true;</div><div class="line">  &#125;</div><div class="line">  if (e.stopPropagation) &#123;//w3c事件模型</div><div class="line">    e.stopPropagation();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;addEventListener-attachEvent-element-onclick&quot;&gt;&lt;a href=&quot;#addEventListener-attachEvent-element-onclick&quot; class=&quot;headerlink&quot; title=&quot;addE
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于Performance API</title>
    <link href="http://yoohannah.github.io/post/knowledge/Performance.html"/>
    <id>http://yoohannah.github.io/post/knowledge/Performance.html</id>
    <published>2017-08-02T22:38:02.000Z</published>
    <updated>2017-08-06T09:17:15.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="load-unload事件"><a href="#load-unload事件" class="headerlink" title="load/unload事件"></a>load/unload事件</h1><h2 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h2><p>当页面完全加载后（包括所有图像、JavaScript文件、CSS文件等外部资源），就会触发window上面的load事件<br>使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//方法一</div><div class="line">var EventUtil = &#123;</div><div class="line">addHandler: function(element, type, handler)&#123;</div><div class="line">	if (element.addEventListener) &#123;</div><div class="line">            element.addEventListener(type, handler, false);</div><div class="line">        &#125; else if (element.attachEvent) &#123;</div><div class="line">            element.attachEvent(&quot;on&quot; + type, handler);</div><div class="line">        &#125; else &#123;</div><div class="line">            element[&quot;on&quot; + type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">EventUtil.addHandler(window,&quot;load&quot;,function(event)&#123;</div><div class="line"> alert(&quot;loaded!&quot;);</div><div class="line"> &#125;);</div><div class="line">//方法二</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;load Event Example&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body onload = &quot;alert(&quot;Loaded!&quot;)&quot;&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>document.ready 监控dom是否加载完毕，dom加载完毕时及资源加载之前触发<br>DOMContentLoaded 当页面的DOM树解析好并且需要等待js执行完才触发</p>
<h2 id="unload事件"><a href="#unload事件" class="headerlink" title="unload事件"></a>unload事件</h2><p>在文档被完全卸载后触发,只要用户切换到另一个页面，就会发生unload事件。<br>利用这个事件最多的情况是清除引用，以避免内存泄漏<br>使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//方法一</div><div class="line">var EventUtil = &#123;</div><div class="line">    getEvent: function (event) &#123;</div><div class="line">        return event ? event : window.event;</div><div class="line">    &#125;,</div><div class="line">    addHandler: function (element, type, handler) &#123;</div><div class="line">        if (element.addEventListener) &#123;</div><div class="line">            element.addEventListener(type, handler, false);</div><div class="line">        &#125; else if (element.attachEvent) &#123;</div><div class="line">            element.attachEvent(&quot;on&quot; + type, handler);</div><div class="line">        &#125; else &#123;</div><div class="line">            element[&quot;on&quot; + type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">EventUtil.addHandler(window, &quot;unload&quot;, function (event) &#123;</div><div class="line">    alert(&quot;Unloaded&quot;);</div><div class="line">&#125;)</div><div class="line">//方法二</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;tilte&gt;卸载（unload）事件&lt;/tile&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body onunload=&quot;alert(&apos;Unload&apos;)&quot;&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h1 id="Performance-API"><a href="#Performance-API" class="headerlink" title="Performance API"></a>Performance API</h1><p>Performance 接口会给出某个页面的与时间相关的性能信息<br>使用方法为 window.performance.属性/方法</p>
<p>Performance API用于精确度量、控制、增强浏览器的性能表现。这个API为测量网站性能，提供以前没有办法做到的精度<br>目前，所有主要浏览器都已经支持performance对象，包括Chrome 20+、Firefox 15+、IE 10+、Opera 15+。</p>
<h2 id="performance-timing"><a href="#performance-timing" class="headerlink" title="performance.timing"></a>performance.timing</h2><p>包含各种与浏览器性能有关的时间数据，提供浏览器处理网页各个阶段的耗时</p>
<ul>
<li>navigationStart：当前浏览器窗口的前一个网页关闭，发生unload事件时的Unix毫秒时间戳。如果没有前一个网页，则等于fetchStart属性。即浏览器处理当前网页的启动时间</li>
<li>unloadEventStart：如果前一个网页与当前网页属于同一个域名，则返回前一个网页的unload事件发生时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。</li>
<li>unloadEventEnd：如果前一个网页与当前网页属于同一个域名，则返回前一个网页unload事件的回调函数结束时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。</li>
<li>redirectStart：返回第一个HTTP跳转开始时的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。</li>
<li>redirectEnd：返回最后一个HTTP跳转结束时（即跳转回应的最后一个字节接受完成时）的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。</li>
<li>fetchStart：返回浏览器准备使用HTTP请求读取文档时的Unix毫秒时间戳。该事件在网页查询本地缓存之前发生。</li>
<li>domainLookupStart：返回域名查询开始时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。</li>
<li>domainLookupEnd：返回域名查询结束时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。</li>
<li>connectStart：返回HTTP请求开始向服务器发送时的Unix毫秒时间戳。如果使用持久连接（persistent connection），则返回值等同于fetchStart属性的值。</li>
<li>connectEnd：返回浏览器与服务器之间的连接建立时的Unix毫秒时间戳。如果建立的是持久连接，则返回值等同于fetchStart属性的值。连接建立指的是所有握手和认证过程全部结束。</li>
<li>secureConnectionStart：返回浏览器与服务器开始安全链接的握手时的Unix毫秒时间戳。如果当前网页不要求安全连接，则返回0。</li>
<li>requestStart：返回浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的Unix毫秒时间戳。</li>
<li>responseStart：返回浏览器从服务器收到（或从本地缓存读取）第一个字节时的Unix毫秒时间戳。</li>
<li>responseEnd：返回浏览器从服务器收到（或从本地缓存读取）最后一个字节时（如果在此之前HTTP连接已经关闭，则返回关闭时）的Unix毫秒时间戳。</li>
<li>domLoading：返回当前网页DOM结构开始解析时（即Document.readyState属性变为“loading”、相应的readystatechange事件触发时）的Unix毫秒时间戳。</li>
<li>domInteractive：返回当前网页DOM结构结束解析、开始加载内嵌资源时（即Document.readyState属性变为“interactive”、相应的readystatechange事件触发时）的Unix毫秒时间戳。</li>
<li>domContentLoadedEventStart：返回当前网页DOMContentLoaded事件发生时（即DOM结构解析完毕、所有脚本开始运行时）的Unix毫秒时间戳。</li>
<li>domContentLoadedEventEnd：返回当前网页所有需要执行的脚本执行完成时的Unix毫秒时间戳。</li>
<li>domComplete：返回当前网页DOM结构生成时（即Document.readyState属性变为“complete”，以及相应的readystatechange事件发生时）的Unix毫秒时间戳。</li>
<li>loadEventStart：返回当前网页load事件的回调函数开始时的Unix毫秒时间戳。如果该事件还没有发生，返回0。</li>
<li>loadEventEnd：返回当前网页load事件的回调函数运行结束时的Unix毫秒时间戳。如果该事件还没有发生，返回0。</li>
</ul>
<p>unloadEventStart 不等于navigationStart，navigationStart比unloadEventStart早<br>domComplete 等于 loadEventStart</p>
<h2 id="performance-now"><a href="#performance-now" class="headerlink" title="performance.now()"></a>performance.now()</h2><p>performance.now方法返回当前网页自从performance.timing.navigationStart到当前时间之间的微秒数（毫秒的千分之一）。</p>
<h2 id="performance-mark"><a href="#performance-mark" class="headerlink" title="performance.mark()"></a>performance.mark()</h2><p>mark方法用于为相应的视点做标记。<br>window.performance.mark(‘mark_fully_loaded’);<br>clearMarks方法用于清除标记，如果不加参数，就表示清除所有标记。<br>window.peformance.clearMarks(‘mark_fully_loaded’);<br>window.performance.clearMarks();</p>
<h2 id="performance-getEntries"><a href="#performance-getEntries" class="headerlink" title="performance.getEntries()"></a>performance.getEntries()</h2><p>浏览器获取网页时，会对网页中每一个对象（脚本文件、样式表、图片文件等等）发出一个HTTP请求。performance.getEntries方法以数组形式，返回这些请求的时间统计信息，有多少个请求，返回数组就会有多少个成员.<br>由于该方法与浏览器处理网页的过程相关，所以只能在浏览器中使用。<br>window.performance.getEntries()[0] //获取第一个HTTP请求（即网页的HTML源码）的时间统计信息</p>
<h2 id="performance-navigation对象"><a href="#performance-navigation对象" class="headerlink" title="performance.navigation对象"></a>performance.navigation对象</h2><p>1、performance.navigation.type<br>该属性返回一个整数值，表示网页的加载来源，可能有以下4种情况：</p>
<ul>
<li>0：网页通过点击链接、地址栏输入、表单提交、脚本操作等方式加载，相当于常数performance.navigation.TYPE_NAVIGATENEXT。</li>
<li>1：网页通过“重新加载”按钮或者location.reload()方法加载，相当于常数performance.navigation.TYPE_RELOAD。</li>
<li>2：网页通过“前进”或“后退”按钮加载，相当于常数performance.navigation.TYPE_BACK_FORWARD。</li>
<li>255：任何其他来源的加载，相当于常数performance.navigation.TYPE_UNDEFINED。</li>
</ul>
<p>2、performance.navigation.redirectCount<br>该属性表示当前网页经过了多少次重定向跳转.<br><a href="https://www.kancloud.cn/kancloud/javascript-standards-reference/46507" target="_blank" rel="external">参考资料</a></p>
<h1 id="页面请求加载过程"><a href="#页面请求加载过程" class="headerlink" title="页面请求加载过程"></a>页面请求加载过程</h1><p>var t = performance.timing;</p>
<p>1、首先，在浏览器地址栏中输入url</p>
<p>2、浏览器先查看浏览器缓存-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三步操作。</p>
<p>3、在发送http请求前，需要域名解析(DNS解析)，解析获取相应的IP地址。<br>     var dns = t.domainLookupEnd - t.domainLookupStart; //域名解析时间<br>4、浏览器向服务器发起tcp连接，与浏览器建立tcp三次握手。<br>     var tcp = t.connectEnd - t.connectStart;//浏览器与服务器之间的连接建立时间<br>5、握手成功后，浏览器向服务器发送http请求，请求数据包。<br>     t.requestStart 浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的时间<br>6、服务器处理收到的请求，将数据返回至浏览器</p>
<p>7、浏览器收到HTTP响应<br>     var ttfb = t.responseStart - t.navigationStart;//读取页面第一个字节之前的耗时<br>8、读取页面内容，浏览器渲染，解析html源码<br>     var getdata = t.responseEnd-t.responseStart;//接收数据时间<br>9、生成Dom树、解析css样式、js交互<br>   var dom = t.domInteractive-t.domLoading; //从构建DOM到页面与用户可以开始交互的时间<br>   var script= t.domContentLoadedEventEnd-t.domContentLoadedEventStart;//脚本运行时间<br>   var load = t.loadEventEnd-t.loadEventStart;//load事件处理时间</p>
<p>10、客户端和服务器交互</p>
<p>11、ajax查询</p>
<p>步骤二详细步骤</p>
<ul>
<li>浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；</li>
<li>操作系统缓存：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统，获取操作系统的记录(保存最近的DNS查询缓存)；</li>
<li>路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；</li>
<li>ISP缓存：若上述均失败，继续向ISP搜索。</li>
</ul>
<p>浏览器渲染步骤</p>
<ul>
<li>解析html以构建dom树 分词器器、解析器</li>
<li>构建render树</li>
<li>布局render树</li>
<li>绘制render树</li>
</ul>
<p>渲染引擎开始解析html，并将标签转化为内容树中的dom节点。接着，它解析外部CSS文件及style标签中的样式信息。这些样式信息以及html中的可见性指令将被用来构建另一棵树——render树。</p>
<p>Render树由一些包含有颜色和大小等属性的矩形组成，它们将被按照正确的顺序显示到屏幕上。</p>
<p>Render树构建好了之后，将会执行布局过程，它将确定每个节点在屏幕上的确切坐标。再下一步就是绘制，即遍历render树，并使用UI后端层绘制每个节点</p>
<p><a href="http://www.uml.org.cn/html/201207184.asp" target="_blank" rel="external">现代浏览器工作原理</a></p>
<h1 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h1><p>包含有关浏览器的信息。<br>appCodeName    返回浏览器的代码名<br>appName    返回浏览器的名称<br>appVersion    返回浏览器的平台和版本信息<br>cookieEnabled    返回指明浏览器中是否启用 cookie 的布尔值<br>platform    返回运行浏览器的操作系统平台<br>userAgent    返回由客户机发送服务器的user-agent 头部的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">js 获取操作系统</div><div class="line">function detectOS() &#123;</div><div class="line">    var sUserAgent = navigator.userAgent;</div><div class="line">    var isWin = (navigator.platform == &quot;Win32&quot;) || (navigator.platform == &quot;Windows&quot;);</div><div class="line">    var isMac = (navigator.platform == &quot;Mac68K&quot;) || (navigator.platform == &quot;MacPPC&quot;) || (navigator.platform == &quot;Macintosh&quot;) || (navigator.platform == &quot;MacIntel&quot;);</div><div class="line">    if (isMac) return &quot;Mac&quot;;</div><div class="line">    var isUnix = (navigator.platform == &quot;X11&quot;) &amp;&amp; !isWin &amp;&amp; !isMac;</div><div class="line">    if (isUnix) return &quot;Unix&quot;;</div><div class="line">    var isLinux = (String(navigator.platform).indexOf(&quot;Linux&quot;) &gt; -1);</div><div class="line">    if (isLinux) return &quot;Linux&quot;;</div><div class="line">    if (isWin) &#123;</div><div class="line">        var isWin2K = sUserAgent.indexOf(&quot;Windows NT 5.0&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows 2000&quot;) &gt; -1;</div><div class="line">        if (isWin2K) return &quot;Win2000&quot;;</div><div class="line">        var isWinXP = sUserAgent.indexOf(&quot;Windows NT 5.1&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows XP&quot;) &gt; -1;</div><div class="line">        if (isWinXP) return &quot;WinXP&quot;;</div><div class="line">        var isWin2003 = sUserAgent.indexOf(&quot;Windows NT 5.2&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows 2003&quot;) &gt; -1;</div><div class="line">        if (isWin2003) return &quot;Win2003&quot;;</div><div class="line">        var isWinVista= sUserAgent.indexOf(&quot;Windows NT 6.0&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows Vista&quot;) &gt; -1;</div><div class="line">        if (isWinVista) return &quot;WinVista&quot;;</div><div class="line">        var isWin7 = sUserAgent.indexOf(&quot;Windows NT 6.1&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows 7&quot;) &gt; -1;</div><div class="line">        if (isWin7) return &quot;Win7&quot;;</div><div class="line">    &#125;</div><div class="line">    return &quot;other&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">document.writeln(&quot;您的操作系统是：&quot; + detectOS());</div></pre></td></tr></table></figure></p>
<p><a href="http://blog.csdn.net/littleqiang_w/article/details/50463939" target="_blank" rel="external">js判断浏览器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;load-unload事件&quot;&gt;&lt;a href=&quot;#load-unload事件&quot; class=&quot;headerlink&quot; title=&quot;load/unload事件&quot;&gt;&lt;/a&gt;load/unload事件&lt;/h1&gt;&lt;h2 id=&quot;load事件&quot;&gt;&lt;a href=&quot;#loa
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于CDN</title>
    <link href="http://yoohannah.github.io/post/knowledge/cdn.html"/>
    <id>http://yoohannah.github.io/post/knowledge/cdn.html</id>
    <published>2017-08-02T22:37:02.000Z</published>
    <updated>2017-08-06T09:43:09.335Z</updated>
    
    <content type="html"><![CDATA[<p>cdn 是一种从网络层面优化页面访问速度的手段<br>CDN服务商提供一项智能域名解析服务，这种智能DNS服务在浏览器发起域名查询时，会根据用户IP计算并返回离它最近的同网络CDN节点IP，引导浏览器与此节点建立连接以获取资源。<br>不同地区的用户访问同一个域名，依赖CDN服务商提供的智能域名解析服务得到不同CDN节点的IP地址<br>不同地区的用户会访问到离自己最近的相同网络线路上的CDN节点，当请求达到CDN节点后，节点会判断自己的内容缓存是否有效，如果有效，则立即响应缓存内容给用户，从而加快响应速度。如果CDN节点的缓存失效，它会根据服务配置去我们的内容源服务器获取最新的资源响应给用户，并将内容缓存下来以便响应给后续访问的用户。因此，一个地区内只要有一个用户先加载资源，在CDN中建立了缓存，该地区的其他后续用户都能因此而受益。<br>通过将静态资源缓存到离用户很近的相同网络运营商的CDN节点上，不但能提升用户的访问速度，还能节省服务器的带宽消耗，降低负载。<br><img src="/image/cdn.png" alt="cdn缓存技术原理"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cdn 是一种从网络层面优化页面访问速度的手段&lt;br&gt;CDN服务商提供一项智能域名解析服务，这种智能DNS服务在浏览器发起域名查询时，会根据用户IP计算并返回离它最近的同网络CDN节点IP，引导浏览器与此节点建立连接以获取资源。&lt;br&gt;不同地区的用户访问同一个域名，依赖CD
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>常见页面布局小结</title>
    <link href="http://yoohannah.github.io/post/knowledge/layouts.html"/>
    <id>http://yoohannah.github.io/post/knowledge/layouts.html</id>
    <published>2017-08-02T22:30:02.000Z</published>
    <updated>2017-08-06T13:02:47.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h1><p>三栏布局,左右两栏宽度固定,中间一栏宽度随屏幕宽度自适应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;header&quot;&gt;#header&lt;/div&gt;</div><div class="line">&lt;div id=&quot;container&quot;&gt;</div><div class="line">  &lt;div id=&quot;center&quot; class=&quot;column&quot;&gt;#center&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;left&quot; class=&quot;column&quot;&gt;#left&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;right&quot; class=&quot;column&quot;&gt;#right&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;footer&quot;&gt;#footer&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">  body &#123;</div><div class="line">  min-width: 550px;      /* 2x LC width + RC width */</div><div class="line">&#125;</div><div class="line">#container &#123;</div><div class="line">  padding-left: 200px;   /* LC width */</div><div class="line">  padding-right: 150px;  /* RC width */</div><div class="line">&#125;</div><div class="line">#container .column &#123;</div><div class="line">  min-height: 200px;/* 高度自适应*/</div><div class="line">  position: relative;/* 让左右两栏进行相对位移，位移到container的内边距位置 */</div><div class="line">  float: left;</div><div class="line">&#125;</div><div class="line">#center &#123;</div><div class="line">  background-color: #e9e9e9;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div><div class="line">#left &#123;</div><div class="line">  background-color: red;</div><div class="line">  width: 200px;          /* LC width */</div><div class="line">  right: 200px;           /*LC width *//*相对于 container 的右边线向左偏移 200px 将自己位移到container内边距 */</div><div class="line">  margin-left: -100%;/*浮动到与中间平行 */</div><div class="line">&#125;</div><div class="line">#right &#123;</div><div class="line">  background-color: blue;</div><div class="line">  width: 150px;          /* RC width */</div><div class="line">  margin-right: -150px;  /* RC width */</div><div class="line">&#125;</div><div class="line">#footer &#123;</div><div class="line">  clear: both;/*清除 footer 的上下环境，以免遭跟上面三栏一起浮动*/</div><div class="line">&#125;</div><div class="line">#header, </div><div class="line">#footer &#123;</div><div class="line">  background-color: #c9c9c9;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p><img src="/image/holy1.png" alt="圣杯1"><br><img src="/image/holy2.png" alt="圣杯2"></p>
<h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><p>效果同圣杯布局，只是写法上DOM在center里面新增加了div,css不再使用relative定位，只是用float和外边距<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;header&quot;&gt;header&lt;/div&gt;</div><div class="line">&lt;div id=&quot;container&quot;&gt;</div><div class="line">  &lt;div id=&quot;center&quot; class=&quot;column&quot;&gt;</div><div class="line">    &lt;div id=&quot;innerCenter&quot;&gt;center&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div id=&quot;left&quot; class=&quot;column&quot;&gt;left&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;right&quot; class=&quot;column&quot;&gt;right&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">  body &#123;</div><div class="line">    min-width: 351px; /* LC width + RC width +1*/</div><div class="line">  &#125;</div><div class="line">  #container .column &#123;</div><div class="line">    min-height: 200px;</div><div class="line">    float: left;</div><div class="line">  &#125;</div><div class="line">  #center &#123;</div><div class="line">    background-color: #e9e9e9;</div><div class="line">    width: 100%;</div><div class="line">  &#125;</div><div class="line">  #left &#123;</div><div class="line">    background-color: red;</div><div class="line">    width: 200px;</div><div class="line">    margin-left: -100%;</div><div class="line">  &#125;</div><div class="line">  #right &#123;</div><div class="line">    background-color: blue;</div><div class="line">    width: 150px;</div><div class="line">    margin-left: -150px;</div><div class="line">  &#125;</div><div class="line">  #footer &#123;</div><div class="line">    clear: both;</div><div class="line">  &#125;</div><div class="line">  #header, #footer &#123;</div><div class="line">    background-color: #c9c9c9;</div><div class="line">  &#125;</div><div class="line">  #innerCenter &#123; /*代替圣杯container的padding处理*/</div><div class="line">    margin-left: 200px;</div><div class="line">    margin-right: 150px;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p><img src="/image/holy3.png" alt="圣杯3"><br><img src="/image/holy4.png" alt="圣杯4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;圣杯布局&quot;&gt;&lt;a href=&quot;#圣杯布局&quot; class=&quot;headerlink&quot; title=&quot;圣杯布局&quot;&gt;&lt;/a&gt;圣杯布局&lt;/h1&gt;&lt;p&gt;三栏布局,左右两栏宽度固定,中间一栏宽度随屏幕宽度自适应&lt;br&gt;&lt;figure class=&quot;highlight plain
    
    </summary>
    
    
      <category term="css" scheme="http://yoohannah.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>使用QRcode.js生成二维码</title>
    <link href="http://yoohannah.github.io/post/knowledge/qrcode.html"/>
    <id>http://yoohannah.github.io/post/knowledge/qrcode.html</id>
    <published>2017-07-31T23:26:37.000Z</published>
    <updated>2017-07-31T23:26:11.496Z</updated>
    
    <content type="html"><![CDATA[<p>在页面中引入QRcode.js文件，再js部分进行定义<br>var qrcode = new QRCode(document.getElementById(“qrcode0”), { //qrcode0放置二维码容器的id<br>        width : 150,//二维码大小<br>        height : 150<br>});<br>qrcode.makeCode(url);//url,生成二维码的依据</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在页面中引入QRcode.js文件，再js部分进行定义&lt;br&gt;var qrcode = new QRCode(document.getElementById(“qrcode0”), { //qrcode0放置二维码容器的id&lt;br&gt;        width : 150,/
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Angularjs 利用图片更换emoji表情</title>
    <link href="http://yoohannah.github.io/post/knowledge/angularjsfilterEmoji.html"/>
    <id>http://yoohannah.github.io/post/knowledge/angularjsfilterEmoji.html</id>
    <published>2017-07-31T22:46:02.000Z</published>
    <updated>2017-07-31T22:49:19.555Z</updated>
    
    <content type="html"><![CDATA[<p>在某些浏览器中,emoji表情不能正常显示,只能显示原始状态如下<br><img src="/image/emoji1.png" alt="erroremoji"><br>为使表情正常显示，这里利用转码方法将emoji符号用图片替换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对数据$scope.data.remark做表情替换处理,$scope.data.remark是包含emoji符号的字符串</span></div><div class="line">    <span class="keyword">var</span> str=$scope.data.remark;</div><div class="line">    str=str.replace(rep,<span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123; <span class="comment">//code即匹配到的emoji符号,对该符号通过_escapeToUtf32(code)转码,得到对应图片名,然后图片替换</span></div><div class="line">     <span class="keyword">return</span> <span class="string">'&lt;img class="emoji" style="vertical-align:middle" src="assets/img/emoji/'</span>+_escapeToUtf32(code) + <span class="string">'.png"&gt;'</span>;</div><div class="line">    &#125;)</div><div class="line">    $scope.data.remark = str;</div><div class="line"></div><div class="line"><span class="comment">//用emoji符号的unicode码匹配emoji符号,例如270c匹配 victory hand符号</span></div><div class="line"> <span class="keyword">var</span> rep =<span class="regexp">/\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F]|\u270c|\u261d/g</span>;</div><div class="line"></div><div class="line"><span class="comment">//emoji 表情转码</span></div><div class="line">  <span class="function"><span class="keyword">function</span>  <span class="title">_escapeToUtf32</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> escaped = [],</div><div class="line">      unicodeCodes = _convertStringToUnicodeCodePoints(str),</div><div class="line">      i = <span class="number">0</span>,</div><div class="line">      l = unicodeCodes.length,</div><div class="line">      hex;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; i &lt; l; i++) &#123;</div><div class="line">      hex = unicodeCodes[i].toString(<span class="number">16</span>);</div><div class="line">      escaped.push(<span class="string">'0000'</span>.substr(hex.length) + hex);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> escaped.join(<span class="string">'-'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">_convertStringToUnicodeCodePoints</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> surrogate1st = <span class="number">0</span>,</div><div class="line">      unicodeCodes = [],</div><div class="line">      i = <span class="number">0</span>,</div><div class="line">      l = str.length;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; i &lt; l; i++) &#123;</div><div class="line">      <span class="keyword">var</span> utf16Code = str.charCodeAt(i);</div><div class="line">      <span class="keyword">if</span> (surrogate1st != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (utf16Code &gt;= <span class="number">0xDC00</span> &amp;&amp; utf16Code &lt;= <span class="number">0xDFFF</span>) &#123;</div><div class="line">          <span class="keyword">var</span> surrogate2nd = utf16Code,</div><div class="line">            unicodeCode = (surrogate1st - <span class="number">0xD800</span>) * (<span class="number">1</span> &lt;&lt; <span class="number">10</span>) + (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) + (surrogate2nd - <span class="number">0xDC00</span>);</div><div class="line">          unicodeCodes.push(unicodeCode);</div><div class="line">        &#125;</div><div class="line">        surrogate1st = <span class="number">0</span>;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (utf16Code &gt;= <span class="number">0xD800</span> &amp;&amp; utf16Code &lt;= <span class="number">0xDBFF</span>) &#123;</div><div class="line">        surrogate1st = utf16Code;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        unicodeCodes.push(utf16Code);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> unicodeCodes;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">//Angularjs对字符串里面的html标签不会按照HTML去解析,会当做字符串显示,</span></div><div class="line"><span class="comment">//所以这里需要对字符串进行过滤，使字符串里面的标签能按照html解析</span></div><div class="line"></div><div class="line"><span class="comment">//新建过滤器trust2Html,这里使用$sce方法</span></div><div class="line">app.filter(<span class="string">'trust2Html'</span>, [<span class="string">'$sce'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$sce</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> $sce.trustAsHtml(val);</div><div class="line">    &#125;;</div><div class="line">&#125;])</div><div class="line"></div><div class="line"><span class="comment">//在页面里面显示经过图片替换的含emoji符号的字符串</span></div><div class="line">&lt;label ng-bind-html=<span class="string">"data.remark|trust2Html"</span>&gt;&lt;/label&gt;</div></pre></td></tr></table></figure></p>
<p>替换后结果<br><img src="/image/emoji2.png" alt="exactemoji"><br><a href="https://apps.timwhitlock.info/emoji/tables/unicode#block-6a-additional-emoticons" target="_blank" rel="external">Emoji Unicode Tables</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在某些浏览器中,emoji表情不能正常显示,只能显示原始状态如下&lt;br&gt;&lt;img src=&quot;/image/emoji1.png&quot; alt=&quot;erroremoji&quot;&gt;&lt;br&gt;为使表情正常显示，这里利用转码方法将emoji符号用图片替换&lt;br&gt;&lt;figure class=&quot;hi
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>探究jQuery.data</title>
    <link href="http://yoohannah.github.io/post/knowledge/JQuery_data.html"/>
    <id>http://yoohannah.github.io/post/knowledge/JQuery_data.html</id>
    <published>2017-07-30T05:43:02.000Z</published>
    <updated>2017-07-30T09:18:39.229Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery.data用于处理标签数据绑定</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>1.赋值</p>
<p>a.使用js<br>$(‘’).data(key,value); 一次赋值一个，value可以是任意js数据类型,包括Array 或者 Object<br>$(‘’).data(obj);一次赋值多个或者更新多个或者新增多个</p>
<p>b.使用HTML标签属性<br>利用H5 标签的’data-‘属性添加键值对<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div data-role=&quot;page&quot; data-last-value=&quot;43&quot; data-hidden=&quot;true&quot; data-options=&apos;&#123;&quot;name&quot;:&quot;John&quot;&#125;&apos;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>2.取值<br>$(‘’).data(key);获取key对应的数据值<br>$(‘’).data(); 一次性获取绑定在$(‘’)上的所有数据对象</p>
<p>3.删除<br>$(‘’).removeData(key);</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>a. &lt;object&gt;（除非是Flash插件），&lt;applet&gt; 或 &lt;embed&gt;&gt; 三个标签不能使用.data方法</p>
<p>b. 通过”data-“属性建立的标签数据，获取时注意<br>data-last-value=”43” ==&gt; $(‘div’).data(‘lastValue’)<br>data-options=’{“name”:”John”}’ ==&gt; $(“div”).data(“options”).name -&gt;John<br>取到的值会自动转化为js的数据类型</p>
<p>c. $(‘’).data()被赋值到js变量A后，之后对$(‘’)进行数据处理，A的内容会进行同步变动，<br>如果更改A的内容，$(‘’).data()也会同步更改<br>但如果$(‘’).data()的值被用到了html里面,HTML里面的值不会变动</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;style&gt;</div><div class="line">  div &#123; color:blue; &#125;</div><div class="line">  span &#123; color:red; &#125;</div><div class="line">  &lt;/style&gt;</div><div class="line">  &lt;script src="http://cdn.bootcss.com/jquery/1.11.2/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    The values stored were</div><div class="line">    &lt;span&gt;&lt;/span&gt;</div><div class="line">    and</div><div class="line">    &lt;span&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">$("div").data("test", &#123; first: 16, last: "pizza!" &#125;);</div><div class="line">$("span:first").text($("div").data("test").first);</div><div class="line">$("span:last").text($("div").data("test").last);</div><div class="line">//页面输出 The values stored were 16 and pizza!</div><div class="line">  var temp = $("div").data();</div><div class="line">  console.log(temp);</div><div class="line">  $("div").data(&#123; first: 25, last: "pizza!" ,test:&#123;last:'fruit'&#125;&#125;);</div><div class="line">  // $("span:first").text($("div").data("first"));</div><div class="line">  // $("span:last").text($("div").data("test").last); </div><div class="line">  //如果没有以上两句页面不会发生任何变化，添加后</div><div class="line">  //页面输出 The values stored were 25 and fruit</div><div class="line">  console.log(temp);//temp与$("div").data()保持一致</div><div class="line">  console.log($("div").data())</div><div class="line">  temp.child = 'Jack';</div><div class="line">  console.log($("div").data()) //增加一项&#123;child: "Jack"&#125;</div><div class="line">  $("div").removeData("blah");//删除没有的属性不会报错</div><div class="line">  $("div").removeData("child");</div><div class="line">   console.log(temp);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/YooHannah/algorithm/blob/master/plugin/data.js" target="_blank" rel="external">JQuery.data源码解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery.data用于处理标签数据绑定&lt;/p&gt;
&lt;h1 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h1&gt;&lt;p&gt;1.赋值&lt;/p&gt;
&lt;p&gt;a.使用js&lt;br&gt;$(‘’).data(
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>angular样式绑定ng-class</title>
    <link href="http://yoohannah.github.io/post/knowledge/ng-class.html"/>
    <id>http://yoohannah.github.io/post/knowledge/ng-class.html</id>
    <published>2017-06-25T14:00:37.000Z</published>
    <updated>2017-07-30T07:06:49.429Z</updated>
    
    <content type="html"><![CDATA[<p>ng-class命令可用于绑定不同的样式<br>使用方法即先在js中,定义样式集合<br>$scope.STATUS_NAME = [<br>  {‘labelClass’: ‘label1’},<br>  {‘labelClass’: ‘label2’},<br>  {‘labelClass’: ‘label3’},<br>  {‘labelClass’: ‘label4’}<br> ];<br> 对绑定对象赋值<br> angular.forEach($scope.data, function(data){<br>     //对数组中每一项，根据status属性赋给labelclass属性样式集合中的值<br>   data.labelClass = $scope.STATUS_NAME[data.status].labelClass;<br> });<br>在html中定义不同的样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	.label1&#123;</div><div class="line">    background-color:#87CEFA</div><div class="line">  &#125;</div><div class="line">  .label2&#123;</div><div class="line">    background-color:#90EE90</div><div class="line">  &#125;</div><div class="line">  .label3&#123;</div><div class="line">    background-color:#d2cd93</div><div class="line">  &#125;</div><div class="line">  .label4&#123;</div><div class="line">    background-color:#D3D3D3</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p> 在html中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;tr role=&quot;row&quot; ng-repeat=&quot;item in data track by $index&quot;&gt;</div><div class="line">	&lt;td&gt;&lt;span class=&quot;label&quot; ng-class=&quot;item.labelClass&quot;&gt;&#123;&#123;item.status_desc&#125;&#125;&lt;/span&gt;&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ng-class命令可用于绑定不同的样式&lt;br&gt;使用方法即先在js中,定义样式集合&lt;br&gt;$scope.STATUS_NAME = [&lt;br&gt;  {‘labelClass’: ‘label1’},&lt;br&gt;  {‘labelClass’: ‘label2’},&lt;br&gt;  {‘
    
    </summary>
    
    
      <category term="angular" scheme="http://yoohannah.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>cookie和session</title>
    <link href="http://yoohannah.github.io/post/php/CookieAndSession.html"/>
    <id>http://yoohannah.github.io/post/php/CookieAndSession.html</id>
    <published>2017-05-26T13:38:37.000Z</published>
    <updated>2017-07-30T07:23:31.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>设置cookie<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">bool setcookie  (</div><div class="line">	string $名字</div><div class="line">	[, string $值]</div><div class="line">	[, int $过期时间  = 0]</div><div class="line">	[, string $路径]</div><div class="line">	[, string $域名]</div><div class="line">	[, bool $安全  = false]</div><div class="line">	[, bool $http只读  = false]</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p> 参数 描述<br>$名字 必需。规定 cookie 的名称。<br>$值 可选。规定 cookie 的值。<br>$有效期 可选。规定 cookie 的有效期。<br>$路径 可选。规定 cookie 的服务器路径。<br>$域名 可选。规定 cookie 的域名。<br>$安全 可选。规定是否通过安全的 HTTPS 连接来传输 cookie。<br>$http安读 可选。如果true，那么js就无法读取改cookie，增加安全性。</p>
<p>在服务端通过$_COOKIE[‘name’] 来读取cookie了。</p>
<p><a href="https://github.com/YooHannah/algorithm/tree/master/php/cookie" target="_blank" rel="external">使用cookie例子</a></p>
<h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><p> session_start(); //开启session<br> $_SESSION[‘userName’] = ‘wang’; //添加session数据<br> $userName = $_SESSION[‘userName’]; //读取session数据<br> unset($_SESSION[‘XXX’]);//销毁单个session数据<br> $_SESSION = array();//销毁全部session数据<br> session_destory();//这个函数会销毁当前会话中的全部数据，并结束当前会话,但是不会重置当前会话所关联的全局变量，也不会重置会话 cookie</p>
<p> 在php.ini配置文件中有这么一行 session.save_handler = files,<br> files,说明了php默认的是用文件读写的方式来保存session的<br> session.save_path = “/tmp”, “/tmp”即存储路径</p>
<p><a href="https://github.com/YooHannah/algorithm/tree/master/php/shoppingcart" target="_blank" rel="external">使用session例子</a></p>
<h1 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="comment">//初始化</span></div><div class="line">$ch = curl_init();</div><div class="line"><span class="comment">//设置选项，包括URL</span></div><div class="line">curl_setopt($ch, CURLOPT_URL, <span class="string">"http://www.php.cn"</span>);</div><div class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</div><div class="line"><span class="comment">//执行并获取HTML文档内容</span></div><div class="line">$output = curl_exec($ch);</div><div class="line"><span class="comment">//释放curl句柄</span></div><div class="line">curl_close($ch);</div><div class="line"><span class="comment">//打印获得的数据</span></div><div class="line">print_r($output);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>函数    curl_setopt<br>参数1    curl资源变量<br>参数2    curl参数选项<br>参数3    curl参数值</p>
<p>CURLOPT_URL           这个参数选项规定了请求的url地址。<br>CURLOPT_RETURNTRANSFER   curl请求后返回对应的结果 若需要返回值即为1。不需请求后返回的结果可设置为0。</p>
<p>如果是get请求，我们不需要设置发送的参数。在post等请求的时候，我们需要设置发送方法为post方法。并设置发送的数据。<br>CURLOPT_POST    值设为1是使用POST方法，0为不使用POST方法<br>CURLOPT_POSTFIELDS  设置传递的数据<br>//声明使用POST方式来进行发送<br>    curl_setopt($ch, CURLOPT_POST, 1);<br>//发送什么数据呢<br>curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</p>
<p>如果是https有的时候需要忽略https的安全证书。</p>
<p>CURLOPT_SSL_VERIFYPEER和CURLOPT_SSL_VERIFYHOST 两个参数改为false即忽略了证书。<br>curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);<br>curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);<br>CURLOPT_HEADER  决定是是否处理http的头信息，不接收处理的话可将这个值设置为0。<br>CURLOPT_TIMEOUT 设置请求的超时时间</p>
<p>$output = curl_exec($ch); 如果执行的结果有数据。使用curl_exec执行后，会将结果返回给$output变量。<br>curl_close($ch); 关闭curl资源。<br><a href="https://github.com/YooHannah/algorithm/blob/master/php/curl1.php" target="_blank" rel="external">curlget 截取页面例子</a><br><a href="https://github.com/YooHannah/algorithm/blob/master/php/curlpost.php" target="_blank" rel="external">curlpost例子</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h1&gt;&lt;p&gt;设置cookie&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
    
      <category term="php" scheme="http://yoohannah.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的基本知识</title>
    <link href="http://yoohannah.github.io/post/php/php_MySQL.html"/>
    <id>http://yoohannah.github.io/post/php/php_MySQL.html</id>
    <published>2017-05-26T13:37:37.000Z</published>
    <updated>2017-07-30T07:33:02.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五个基本单位"><a href="#五个基本单位" class="headerlink" title="五个基本单位"></a>五个基本单位</h1><p>数据库服务器:指用来运行数据库服务的一台电脑<br>数据库:一个数据库服务器里面有可以有多个数据库。主要用来分类使用。<br>数据表:专门用来区分一个数据库中的不同数据<br>数据字段:也叫数据列,日常所见表格里面的列<br>数据行:真正的数据存在每一个表的行里面</p>
<h1 id="语句类别"><a href="#语句类别" class="headerlink" title="语句类别"></a>语句类别</h1><p>1.数据定义语言(DDL ，Data Defintion Language)语句：数据定义语句，用于定义不同的数据段、数据库、表、列、索引等。常用的语句关键字包括create、drop、alter等。<br>2.数据操作语言(DML ， Data Manipulation Language)语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据的完整性。常用的语句关键字主要包括insert、delete、update和select等。<br>3.数据控制语言(DCL， Data Control Language)<br>语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。<br>这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括grant、revoke等。</p>
<h1 id="操作语句"><a href="#操作语句" class="headerlink" title="操作语句"></a>操作语句</h1><p>create database 数据库名;      创建数据库<br>show databases;                查看当前服务器有哪些数据库，显示所有数据库名<br>use 数据库名;                  选中数据库，进入到相应的数据库中<br>show tables;                   显示当前数据库下的所有表<br>drop database 数据库名;        删除数据库<br>create table 表名(字段名1 字段类型,….字段名n 字段类型n); 建表<br>desc 表名;                     查看表结构，显示表中属性</p>
<p>show create table 表名 \G;<br>查看表的创建语句，“\G”选项的含义是使得记录能够按照字段竖着排列，对于内 容比较长的记录更易于显示。<br>可以看到表的 engine（存储引擎) 和 charset(字符集)等信息<br>在创建表的时候能够制定引擎<br>例<br>CREATE TABLE emp (<br>     useraname varchar(10) DEFAULT NULL,<br>     password date DEFAULT NULL,<br> )ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>
<p>drop table 表名;                删除表<br>alter table 表名 modify 字段名 类型字段; 修改表字段类型<br>alter table 表名 add column 字段名 类型;  增加表字段<br>alter table 表名 add 字段名2 字段类型 after 字段名1; 在字段名1后面增加字段名1<br>alter table 表名 add 字段名2 字段类型 first; 在最开始的位置增加字段<br>alter table 表名 drop column 字段名;                 删除表字段<br>alter table 表名 change 字段原名 字段新名 字段类型;  表字段改名</p>
<p>alter table 旧表名 rename 新的表名; 修改表名</p>
<p>修改表字段排列顺序<br>在前的字段增加和修改语句（add/change/modify）中，最后都可以加一个可选项 first|after。</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>MySQL数据类型    所占字节    值范围<br>tinyint    1字节    -128~127<br>smallint    2字节    -32768~32767<br>mediumint    3字节    -8388608~8388607<br>int    4字节    范围-2147483648~2147483647<br>bigint    8字节    +-9.22*10的18次方<br>1.在创建表字段时，性别我们可以使用无符号的微小整型（tinyint）来表示。用0表示女、用1表示男。用2表示未知。<br>2.同样人类年龄也是，在创建表字段时可用用无符号的整型。因为人类的年龄还没有负数<br>3.在实际使用过程中。我们业务中最大需要存储多大的数值。我们创建表时，就选择什么样的类型来存储这样的值。</p>
<h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>MySQL数据类型    所占字节    值范围<br>float(m, d)    4字节    单精度浮点型，m总个数，d小数位<br>double(m, d)    8字节    双精度浮点型，m总个数，d小数位<br>decimal(m, d)  decimal是存储为字符串的浮点数<br>浮点是非精确值，会存在不太准确的情况,而decimal叫做定点数。<br>在MySQL内部，本质上是用字符串存储的。实际使用过程中如果存在金额、钱精度要求比较高的浮点数存储，建议使用decimal（定点数）这个类型</p>
<h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><p>MySQL数据类型    所占字节    值范围<br>CHAR    0-255字节    定长字符串<br>VARCHAR    0-255字节    变长字符串<br>TINYBLOB    0-255字节    不超过255个字符的二进制字符串<br>TINYTEXT    0-255字节    短文本字符串<br>BLOB    0-65535字节    二进制形式的长文本数据<br>TEXT    0-65535字节    长文本数据<br>MEDIUMBLOB    0-16 777 215字节    二进制形式的中等长度文本数据<br>MEDIUMTEXT    0-16 777 215字节    中等长度文本数据<br>LOGNGBLOB    0-4 294 967 295字节    二进制形式的极大文本数据<br>LONGTEXT    0-4 294 967 295字节    极大文本数据<br>VARBINARY(M)    允许长度0-M个字节的定长字节符串    值的长度+1个字节<br>BINARY(M)    M    允许长度0-M个字节的定长字节符串</p>
<h2 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h2><p>MySQL数据类型    所占字节    值范围<br>date    3字节    日期，格式：2014-09-18<br>time    3字节    时间，格式：08:42:30<br>datetime    8字节    日期时间，格式：2014-09-18 08:42:30<br>timestamp    4字节    自动存储记录修改的时间<br>year    1字节    年份</p>
<h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><p>MySQL数据类型    说明    举例<br>set    集合类型    set(“member”, “member2″, … “member64″)<br>enum    枚举类型    enum(“member1″, “member2″, … “member65535″)<br>一个 ENUM 类型只允许从一个集合中取得一个值；而 SET 类型允许从一个集合中取得任意多个值。</p>
<h2 id="常用中文字符集"><a href="#常用中文字符集" class="headerlink" title="常用中文字符集"></a>常用中文字符集</h2><p>gbk_chinese_ci    简体中文, 不区分大小写<br>utf8_general_ci    Unicode (多语言), 不区分大小写<br>mysql在写utf-8的时候写的是utf8。不加中间的中横线</p>
<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><p>使用show engines命令可显示当前服务器支持的所有引擎<br>引擎名称<br>MyISAM    常用。读取效率很高的引擎<br>InnoDB    常用。写入，支持事处等都支持<br>Archive    不常用。归档引擎，压缩比高达1:10，用于数据归档<br>NDB    不常用。主要在MySQL 集群服务器中使用，</p>
<p>行锁：写入、更新操作的时候将这一行锁起来，不让其他人再操作了。<br>表锁：写入、更新操作时，将表给锁起来不让其他人再操作了。<br>事务：同时操作多个数据，若其中的一个数据操作失败。可回滚到操作之前。常用于银行、电商、金融等系统中</p>
<p>MyISAM<br>不支持事务，表锁(表级锁，加锁会锁住整个表)，支持全文索引,操作速度快。常用于读取多的业务。<br>myisam存储引擎表由myd和myi组成。.myd用来存放数据文件，.myi用来存放索引文件。<br>对于myisam存储引擎表，mysql数据库只缓存其索引文件，数据文件的缓存由操作系统本身来完成。</p>
<p>InnoDB<br>支持事务，主要面向在线事务处理(OLTP)方面的应用。<br>行锁设计，支持外键，即默认情况下读取操作不加锁。</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>1.普通索引    最基本的索引，它没有任何限制<br>alter table 表  add index(字段)</p>
<p>2.唯一索引    某一行企用了唯一索引则不准许这一列的行数据中有重复的值。针对这一列的每一行数据都要求是唯一的<br>alter table 表  add UNIQUE(字段)</p>
<p>3.主键索引    它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引，常用于用户ID。类似于书中的页码<br>alter table 表  add PRIMARY KEY(字段)</p>
<p>4.全文索引    对于需要全局搜索的数据，进行全文索引<br>alter table 表  add FULLTEXT(字段)</p>
<p>创建表时可在创建表语句后加上对应的类型即可声明索引：<br>CREATE TABLE test (<br>     id INT NOT NULL ,<br>     username VARCHAR(20) NOT NULL ,<br>     password INT NOT NULL ,<br>     content INT NOT NULL ,<br>     PRIMARY KEY (id),<br>     INDEX pw (password),<br>     UNIQUE (username),<br>     FULLTEXT (content)<br> ) ENGINE = InnoDB;</p>
<h1 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h1><p>  方法一：<br>    insert into 表 values(值1,值2,值n);<br>  表中有多少个字段就必须要插入多少个值。一个不能多，一个也不能少。若有默认值，不想传，可以写上null。<br>  顺序应该和表字段的排序一致。<br>  方法二：<br>  insert into 表(字段1,字段2,字段n) values(值1,值2,值n);<br>  除非有必填字段必须要写入值外。如果有默认值的不想写可以忽略不写。mysql会自动补主默认值。<br>  以表(字段1,字段2,字段n)字段顺序为值的顺序。<br>  基本语法变形：一次插入多条记录<br>  INSERT INTO user(username,password,sex)<br>     values(‘ll’, ‘abcdef’, 1),<br>     ( ‘loe’, ‘bcdeef’, 0),<br>     ( ‘key’, ‘123456’, 1),<br>     (‘tom’, ‘987654’, 1);</p>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>select <em> from 表;                             查询表中所有字段中的所有结果,”</em>“ 是一种正则表达式的写法，表示匹配所有<br>select 字段1[,字段2,字段n] from 表;           指定字段查询<br>select distinct 字段 from 表;                 查询单个字段不重复记录 distinct<br>select  字段 from 表 where 条件;              条件查询 where,条件可以是逻辑比较运算符的比较式</p>
<p>select 字段 from 表 order  by 字段 排序关键词; 查询结果按照字段排序关键词排序<br>排序关键词:<br>asc    升序排列，从小到大（默认）<br>desc    降序排列，从大到小</p>
<p>select 字段 from 表 order  by 字段1 排序关键词,… …字段n desc|asc;<br>order by 后面可以跟多个不同的字段排序，并且排序字段的不同结果集的顺序也不同，<br>如果排序字段的值一样，则值相同的字段按照第二个排序字段进行排序。</p>
<p>select 字段 from 表  limit 数量; 对于查询或者排序后的结果集，如果希望只显示一部分而不是全部，使用 limit 关键字结果集数量限制。<br>select 字段 from 表 order by 字段 关键词 limit 数量; 限制结果集并排序<br>select 字段 from 表  limit 偏移量,数量; 结果集区间选择，偏移量从0开始，0是第一条数据<br>select 函数(字段) from 表; 从表中将按字段查询的结果进行函数处理<br>函数<br>sum    求和<br>count    统计总数<br>max    最大值<br>min    最小值<br>avg    平均值</p>
<p>select <em> from 表 group by 字段;    将表中数据按字段分组<br>select </em> from 表 group by 字段 having 条件; 分组结果再过滤。having 是筛选组 而where是筛选记录<br>例：统计省份数量后再进行分组显示： select count(province),province  from money group by province;</p>
<p>整体的SQL语句配合使用的语法结构如下：<br>SELECT<br>     [字段1 [as 别名1],[函数(字段2) ,]……字段n]<br> FROM 表名<br> [WHERE where条件]<br> [GROUP BY 字段]<br> [HAVING where_contition]<br> [order 条件]<br> [limit 条件]<br> 例<br> 查询money表字段：id,username,balance,province 要求id&gt;1 余额大于50，使用地区进行分组。我们使用用户id进行降序，要求只准显示3条。<br> select id,username,balance,province from money where id &gt; 1 and balance &gt; 50 group by province order by id desc limit 3;</p>
<h1 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h1><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>将两个表中存在联结关系的字段符合联结关系的那些记录形成记录集的联结。<br>基本语法1：<br>select 表1.字段 [as 别名],表n.字段  from 表1 [别名],表n where 条件;<br>取满足条件的数据的在各表中的各字段<br>例<br>select user.uid ,user.username as username,order_goods.oid,order_goods.uid,order_goods.name as shopname from user,order_goods  where user.uid = order_goods.uid;<br>若表user中某条数据x的uid与表order_goods中的某条数据y的uid相同,则取出user表中数据x的 uid、username，取出order_goods中数据y的uid,name,其中order_goods的name的值以shopname的值显示<br>基本语法2：<br>select 表1.字段 [as 别名],表n.字段  from 表1 INNER JOIN 表n on  条件;<br>例<br>select user.uid ,user.username as username,order_goods.oid,order_goods.uid,order_goods.name as shopname from user inner join order_goods  on  user.uid = order_goods.uid;<br>效果同基本语法1</p>
<p>##　外连接<br>会选出其他不匹配的记录，分为外左联结和外右联结。<br>左连接：包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录<br>select 表1.字段 [as 别名],表n.字段  from 表1 LEFT JOIN 表n on  条件;<br>例<br>select *  from user left join order_goods  on  user.uid = order_goods.uid;<br>以左边ｕｓｅｒ为主，查询哪些用户未购买过商品，并将用户信息显示出来，ｕｓｅｒ表全部显示</p>
<p>右连接：包含所有的右边表中的记录甚至是右边表中没有和它匹配的记录<br>select 表1.字段 [as 别名],表n.字段  from 表1 right JOIN 表n on  条件;<br>例<br>select *  from user right join order_goods  on  user.uid = order_goods.uid;<br>查询商品表中哪些用户购买过商品，并将用户信息显示出来，order_goods全部显示</p>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>需要的条件是另外一个select语句的结果，即使用子查询<br>用于子查询的关键字包括in、not in、=、!=、exists、not exists等。<br>select 字段  from 表 where 字段 in(条件)<br>例<br>select *  from user where uid in (select uid from order_goods);<br>从order_goods取出uid这一列，将uid在user中对应的数据取出来</p>
<h2 id="记录联合"><a href="#记录联合" class="headerlink" title="记录联合"></a>记录联合</h2><p>使用 union 和 union all 关键字，将两个表的数据按照一定的查询条件查询出来后，将结果合并到一起显示。<br>union all 把结果直接合并在一起<br>union 是将 union all 后的结果进行一次distinct，去除重复记录后的结果。</p>
<h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>使用update<br>update 表名 set 字段1=值1,字段2=值2,字段n=值n where 条件；<br>例<br>update emp set  balance=balance-500 where userid = 15;<br>将emp表中userid为15的数据的balance减15<br>同时对两个表进行更新<br>update 表1,表2 set 字段1=值1,字段2=值2,字段n=值n where 条件<br>例<br>update money m,user u m.balance=m.balance<em>u.age where m.userid=u.id;<br>修改money，将money表的别名设置为m；user表的别名设置为u；将m表的余额改为m表的balance</em>用户表的age。执行条件是：m.userid = u.id</p>
<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>用delete<br>DELETE FROM 表 [where 条件];<br>删除时如果不加where条件，会清空掉整个表的记录，返回被删除的记录数</p>
<p>清空表 如果使用，<br>truncate table 表名;<br>表中若有自增字段，这个自增字段会将起始值恢复成1</p>
<h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><h2 id="添加权限"><a href="#添加权限" class="headerlink" title="添加权限"></a>添加权限</h2><p>grant 权限 on 库.表 to ‘用户’@’主机’ identified by ‘密码’;<br>grant select, insert on test.* to ‘liwenkai’@’localhost’ identified by ‘4311’;<br>给予liwenkai用户，在本机连接test库所有表的权限。操作的这些表具有查询和写入权限</p>
<h2 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h2><p>revoke 权限 on 库.表 from ‘用户’@’主机’;<br>revoke select, insert on test.* to ‘liwenkai’@’localhost’ identified by ‘4311’;<br>给予liwenkai用户，在本机连接test库所有表的权限。操作的这些表具有查询和写入权限</p>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>grant all        在grant后接all说明给予所有权限<br>revoke all       在revoke后接all说明删除所有权限<br>权限 on .        . 所明给予所有库所有表的操作权限<br>‘用户’@’主机’    主机里面若为%。任意来源的主机均可以使用这个用户来访问</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;五个基本单位&quot;&gt;&lt;a href=&quot;#五个基本单位&quot; class=&quot;headerlink&quot; title=&quot;五个基本单位&quot;&gt;&lt;/a&gt;五个基本单位&lt;/h1&gt;&lt;p&gt;数据库服务器:指用来运行数据库服务的一台电脑&lt;br&gt;数据库:一个数据库服务器里面有可以有多个数据库。主要用来
    
    </summary>
    
    
      <category term="php" scheme="http://yoohannah.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php中MySQL的使用</title>
    <link href="http://yoohannah.github.io/post/php/php_MySQLuse.html"/>
    <id>http://yoohannah.github.io/post/php/php_MySQLuse.html</id>
    <published>2017-05-26T13:37:37.000Z</published>
    <updated>2017-07-30T07:30:33.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php连接数据库"><a href="#php连接数据库" class="headerlink" title="php连接数据库"></a>php连接数据库</h1><p>查看数据库主机，用户名<br>use myaql；<br>select Host from user;<br>select user from user;</p>
<h2 id="连接数据库服务器"><a href="#连接数据库服务器" class="headerlink" title="连接数据库服务器"></a>连接数据库服务器</h2><p>mysql_connect函数<br>$con = mysql_connect(“localhost”,”peter”,”abc123”);<br>参数1    主机<br>参数2    数据库服务器登陆名<br>参数3    密码<br>参数4    数据库的名称<br>参数5    数据库服务器端口不填默认3306</p>
<p>若参数4，数据库名称在此步已填并择，不需要执行第三步</p>
<h2 id="判断链接是否正常"><a href="#判断链接是否正常" class="headerlink" title="判断链接是否正常"></a>判断链接是否正常</h2><p>如果有错误，存在错误号<br>if (mysql_errno($conn)) {<br>   echo mysql_error($conn);<br>   exit;<br>}</p>
<p>mysql_errno 返回连接错误号，无错误返回0<br>参数1    传入mysql_connect返回的资源</p>
<p>mysql_error 返回连接错误字符串<br>参数1    传入mysql_connect返回的资源</p>
<h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><p>mysql_select_db函数<br>mysql_select_db(‘user’,$conn);<br>参数1    传入mysql_connect返回的资源<br>参数2    需要连接的数据库名</p>
<h2 id="设置字符集"><a href="#设置字符集" class="headerlink" title="设置字符集"></a>设置字符集</h2><p>mysql_set_charset<br>mysql_set_charset(‘utf8’,$conn);<br>参数1    字符集类型<br>参数2    传入mysql_connect返回的资源</p>
<h2 id="准备SQL语句"><a href="#准备SQL语句" class="headerlink" title="准备SQL语句"></a>准备SQL语句</h2><p>要传入数据库的操作语句<br>注意参数如何拼接</p>
<p>如果是int类型的就使用<br>$sql=”insert into user(mycon) values(“.$my_con.”)”;<br>//或者<br>$sql=’insert into user(mycon) values(‘.$my_con.’)’;</p>
<p>如果是字符型的就要使用单引号或者双引号括起来<br>$sql=”insert into user(mycon) values(‘“.$my_con.”‘)”;<br>//或者这样写<br>$sql=’insert into user(mycon) values(“‘.$my_con.’”)’;</p>
<p>多个<br>$sql = “INSERT INTO user (username,password,createtime,createip)<br>values<br>(‘“ . $username . “‘,’” . $password . “‘,” . $time . “,’” . $ip . “‘)”;</p>
<h2 id="发送SQL语句"><a href="#发送SQL语句" class="headerlink" title="发送SQL语句"></a>发送SQL语句</h2><p>$result = mysql_query($sql,$conn);</p>
<h2 id="根据不同操作，判断执行是否正常或者遍历数据"><a href="#根据不同操作，判断执行是否正常或者遍历数据" class="headerlink" title="根据不同操作，判断执行是否正常或者遍历数据"></a>根据不同操作，判断执行是否正常或者遍历数据</h2><p>发送的是select类别的语句，通常需要将结果输出显示出来。就需要用到遍历显示数据的函数<br>函数    mysql_fetch_array<br>功能    得到result结果集中的数据，返回数组进行便利<br>参数1    传入查询出来的结果变量<br>参数2    传入MYSQLI_NUM返回索引数组，MYSQLI_ASSOC返回关联数组，MYSQLI_BOTH返回索引和关联</p>
<p>函数    mysql_fetch_assoc<br>功能    得到result结果集中的数据，返回关联数组进行便利<br>参数1    传入查询出来的结果变量</p>
<p>函数    mysql_fetch_row<br>功能    得到result结果集中的数据，返回索引数组进行便利<br>参数1    传入查询出来的结果变量</p>
<p>函数    mysql_fetch_object<br>功能    得到result结果集中的数据，返回对象进行遍历<br>参数1    传入查询出来的结果变量</p>
<p>函数    mysql_num_rows<br>功能    返回查询出来的结果总数<br>参数1    传入查询出来的结果变量</p>
<p>函数    sql_num_rows<br>功能    返回查询出来的结果总数<br>参数1    传入查询出来的结果变量</p>
<p>如果发送的是insert的语句，通常需要得到是否执行成功，或者同时拿到自增的ID。<br>函数    mysqli_fetch_field<br>功能    遍历数据行<br>参数1    传入查询出来的结果变量</p>
<p>如果发送的是update和delete类别的语句。只需要判断是否执行成功即可。</p>
<p>if ($result) {<br>   echo ‘成功’;<br>} else {<br>    echo $sql;//查看是否是SQL语句拼接有问题<br>  echo ‘失败’;<br>}</p>
<h2 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h2><p>函数    mysqli_close<br>功能    关闭数据库连接<br>参数1    传入mysqli_connect返回的资源</p>
<p>mysql_close($conn);//关闭数据库</p>
<h1 id="显示服务器信息函数"><a href="#显示服务器信息函数" class="headerlink" title="显示服务器信息函数"></a>显示服务器信息函数</h1><p>函数    mysqli_get_server_info<br>功能    返回服务器信息<br>参数1    传入mysqli_connect返回的资源</p>
<p>函数    mysqli_get_server_version<br>功能    返回服务器版本<br>参数1    传入mysqli_connect返回的资源</p>
<p><a href="https://github.com/YooHannah/algorithm/blob/master/php/registration/connect.php" target="_blank" rel="external">一个用户注册的代码链接</a></p>
<h2 id="数据显示乱码终极解决办法"><a href="#数据显示乱码终极解决办法" class="headerlink" title="数据显示乱码终极解决办法"></a>数据显示乱码终极解决办法</h2><p>多个不同的文件系统中一定要统一编码。<br>9个要点分别是：<br>    1.html编码与MySQL编码一致<br>    2.PHP编码与MySQL编码一致<br>    3.若有header头发送字符集，请与数据库一样<br>      如果php中有header头，一定要是utf-8的<br>      header(‘content-type:text/html;charset=utf-8’);<br>    4.<meta http-equiv="“Content-Type”content=“text/html;" charset="utf-8”">要和页面的文字编码一致<br>    5.数据库建库的字符集要统一<br>    6.表的字符集要统一<br>    7.列的字符集要统一(表设了,列就默认写表的)<br>    8.连接,校验的字符集要统一<br>      通过mysqli_set_charset(‘utf8’)来MySQL连接、结果和校验的字符集设置。<br>      注：数据库的字符集声明和文件中的略有不同。utf8为mysql数据库的，utf-8为文件中使用的<br>    9.结果集的字符集要统一</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;php连接数据库&quot;&gt;&lt;a href=&quot;#php连接数据库&quot; class=&quot;headerlink&quot; title=&quot;php连接数据库&quot;&gt;&lt;/a&gt;php连接数据库&lt;/h1&gt;&lt;p&gt;查看数据库主机，用户名&lt;br&gt;use myaql；&lt;br&gt;select Host from 
    
    </summary>
    
    
      <category term="php" scheme="http://yoohannah.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>图片上传</title>
    <link href="http://yoohannah.github.io/post/php/php_imge.html"/>
    <id>http://yoohannah.github.io/post/php/php_imge.html</id>
    <published>2017-05-02T14:22:37.000Z</published>
    <updated>2017-07-30T07:35:50.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用函数画图"><a href="#用函数画图" class="headerlink" title="用函数画图"></a>用函数画图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//创建图片</div><div class="line">$img = imagecreatetruecolor(500, 500);</div><div class="line"></div><div class="line">//分配颜色 为图片准备需要用到的颜色</div><div class="line">$red = imagecolorallocate($img, 255, 0, 0);</div><div class="line"></div><div class="line">$green = imagecolorallocate($img, 0, 255, 0);</div><div class="line"></div><div class="line">$blue = imagecolorallocate($img, 0, 0, 255);</div><div class="line"></div><div class="line">$pur = imagecolorallocate($img, 255, 0, 255);</div><div class="line"></div><div class="line">$yellow = imagecolorallocate($img, 121, 72, 0);</div><div class="line"></div><div class="line"></div><div class="line">//填充背景 (0,0)(500,500)指图片左上角和右下角两点，从而确定图片的矩形</div><div class="line">imagefilledrectangle($img, 0, 0, 500, 500, $green);</div><div class="line"></div><div class="line">//画对角线 对角线起始点坐标</div><div class="line">imageline($img, 0, 0, 500, 500, $red);</div><div class="line">imageline($img, 500, 0, 0, 500, $blue);</div><div class="line"></div><div class="line">//画圆</div><div class="line">//bool imagefilledellipse ( resource $图片资源 , int $圆心x , int $圆心y , int $圆的宽 , int $圆的高 , int $圆的颜色 )</div><div class="line">imagefilledellipse($img, 250, 250, 200, 200, $yellow);</div><div class="line"></div><div class="line">//圆中间画矩形，同样通过左上角右下角确定矩形</div><div class="line">imagefilledrectangle($img, 200, 200, 300, 300, $blue);</div><div class="line"></div><div class="line"></div><div class="line">//保存图片，图片名为haha.jpg</div><div class="line">imagejpeg($img, &apos;haha.jpg&apos;);</div><div class="line"></div><div class="line">//销毁资源</div><div class="line">imagedestroy($img);</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h1 id="画验证码"><a href="#画验证码" class="headerlink" title="画验证码"></a>画验证码</h1><p><a href="https://github.com/YooHannah/algorithm/blob/master/php/Verificationcode.php" target="_blank" rel="external">代码链接</a></p>
<h1 id="图片加水印"><a href="#图片加水印" class="headerlink" title="图片加水印"></a>图片加水印</h1><p>bool imagecopymerge ( resource $目标图片 , resource $来源图片, int $目标开始的x , int $目标开始的y, int $来源的x , int $来源的y , int $来源的宽 , int $来源的高 , int $透明度)<br>注意：<br>透明度的值为0-100的整数。imagecopy和imagecopymerge的区别在于一个有透明度，一个没有透明度。<br>大致步骤：<br> 1.打开原图（也叫操作的目标图片）<br> 2.打开水印图（也叫水印来源图片）<br> 3.使用 imagecopymerge 将小图合并至大图的指定位置<br> 4.输出图片<br> 5.销毁资源<br> <a href="https://github.com/YooHannah/algorithm/blob/master/php/Watermark.php" target="_blank" rel="external">代码链接</a></p>
<h1 id="图像放缩和裁剪"><a href="#图像放缩和裁剪" class="headerlink" title="图像放缩和裁剪"></a>图像放缩和裁剪</h1><p>操作方式说明：<br>从来源图片的开始点(x,y)起，指定的宽高的大小图片。放至到目标图片的起点(x,y)，指定宽高大小的图片中。</p>
<h2 id="缩放图片"><a href="#缩放图片" class="headerlink" title="缩放图片"></a>缩放图片</h2><p>imagecopyresampled    重采样拷贝部分图像并调整大小<br>bool imagecopyresampled ( resource $目标图 , resource $来源图 , int $目标开始的x位置 , int $目标开始的y位置 , int $来源开始的x位置 , int $来源开始的y位置 , int $目标图片的宽 , int $目标图片的高, int $来源图片的宽 , int $来源图片的高 )<br>大致步骤：<br>1.打开来源图片<br>2.设置图片缩放百分比（缩放）<br>3.获得来源图片，按比调整大小<br>4.新建一个指定大小的图片为目标图<br>5.将来源图调整后的大小放到目标中<br>6.销毁资源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//打开来源图片</div><div class="line">$image = imagecreatefrompng(&apos;fbb.png&apos;);</div><div class="line"></div><div class="line"></div><div class="line">//定义百分比，缩放到0.1大小</div><div class="line">$percent = 0.1;</div><div class="line"></div><div class="line"></div><div class="line">// 将图片宽高获取到</div><div class="line">list($width, $height) = getimagesize(&apos;fbb.png&apos;);</div><div class="line"></div><div class="line">//设置新的缩放的宽高</div><div class="line">$new_width = $width * $percent;</div><div class="line">$new_height = $height * $percent;</div><div class="line"></div><div class="line">//创建新图片</div><div class="line">$new_image = imagecreatetruecolor($new_width, $new_height);</div><div class="line"></div><div class="line">//将原图$image按照指定的宽高，复制到$new_image指定的宽高大小中</div><div class="line">imagecopyresampled($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);</div><div class="line"></div><div class="line">header(&apos;content-type:image/jpeg&apos;);</div><div class="line">imagejpeg($new_image);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h2 id="裁剪图片"><a href="#裁剪图片" class="headerlink" title="裁剪图片"></a>裁剪图片</h2><p>imagecopyresized    拷贝部分图像并调整大小<br>bool imagecopyresized ( resource $目标图 , resource $来源图 , int $目标开始的x位置 , int $目标开始的y位置 , int $来源开始的x位置 , int $来源开始的y位置 , int $目标图片的宽 , int $目标图片的高, int $来源图片的宽 , int $来源图片的高 )<br>大致步骤：<br> 1.打开来源图片和目标图片<br> 2.截取来源图片中的点，设置宽高。放至到目标图片中。（裁剪）<br> 3.保存图片输入<br> 4.销毁资源</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"> $dst = imagecreatefrompng(&apos;hsq.png&apos;);</div><div class="line"> $src = imagecreatefrompng(&apos;du.png&apos;);</div><div class="line"> imagecopyresized($dst, $src, 281, 71, 407, 154, 132, 160, 80, 90);</div><div class="line"> header(&apos;content-type:image/jpeg&apos;);</div><div class="line">imagejpeg($dst);</div><div class="line">imagedestroy($dst);</div><div class="line"> imagedestroy($src);</div><div class="line"> ?&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用函数画图&quot;&gt;&lt;a href=&quot;#用函数画图&quot; class=&quot;headerlink&quot; title=&quot;用函数画图&quot;&gt;&lt;/a&gt;用函数画图&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
    
    </summary>
    
    
      <category term="php" scheme="http://yoohannah.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="http://yoohannah.github.io/post/php/php_fileupload.html"/>
    <id>http://yoohannah.github.io/post/php/php_fileupload.html</id>
    <published>2017-05-02T14:21:37.000Z</published>
    <updated>2017-07-30T07:40:18.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改php-ini文件配置"><a href="#修改php-ini文件配置" class="headerlink" title="修改php.ini文件配置"></a>修改php.ini文件配置</h1><p>php.ini文件在不同的集成环境包中都在安装目录的php文件下,如果有多个版本php,则在每个版本里面都会有一个php.ini文件<br>配置项    功能说明<br>file_uploads    on为 开启文件上传功能，off为关闭<br>post_max_size    系统允许的POST传参的最大值<br>upload_max_filesize    系统允许的上传文件的最大值<br>memory_limit    内存使用限制<br>【建议尺寸： file_size(文件大小) &lt; upload_max_filesize &lt; post_max_size &lt; memory_limit】<br>max_execution_time 设定脚本的最大执行时间。<br>也可以根据需求做适当的改变。通常不需要来修改，系统默认值即可。超大文件上传的时候，可能会涉及到这一项参数的修改<br>上传时间太长了，会超时。如果你将此项参数设为0，则是不限制超时时间，不建议使。</p>
<h1 id="html页面"><a href="#html页面" class="headerlink" title="html页面"></a>html页面</h1><p>1.form 表单中的参数method 必须为post。若为get是无法进行文件上传的<br>2.enctype须为multipart/form-data<br><a href="https://github.com/YooHannah/algorithm/blob/master/php/fileupload/fileupload.html" target="_blank" rel="external">代码链接</a></p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>按照数组和步骤完成文件上传<br>所有文件的信息存储在$_FILES[‘file’]中<br><a href="https://github.com/YooHannah/algorithm/blob/master/php/fileupload/file.php" target="_blank" rel="external">代码链接</a></p>
<h1 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h1><p>写了2个或者多个input<br>将每个input name设置为”file[]”<br>对每个input上传文件后 $_FILE[‘file’]的每个属性将变成数组，依次对应每个input上传的文件</p>
<h1 id="上传进度处理"><a href="#上传进度处理" class="headerlink" title="上传进度处理"></a>上传进度处理</h1><p>首先要修改php.ini的相关配置<br>配置项    说明<br>session.upload_progress.enabled    是否启用上传进度报告(默认开启) 1为开启，0为关闭<br>session.upload_progress.cleanup    是否在上传完成后及时删除进度数据(默认开启, 推荐开启)</p>
<p>session.upload_progress.prefix[=upload<em>progress</em>]<br>进度数据将存储在_SESSION[session.upload_progress.prefix . _POST[session.upload_progress.name]]</p>
<p>session.upload_progress.name[=PHP_SESSION_UPLOAD_PROGRESS]<br>如果_POST[session.upload_progress.name]没有被设置, 则不会报告进度.</p>
<p>session.upload_progress.freq[=1%]    更新进度的频率(已经处理的字节数), 也支持百分比表示’%’.<br>session.upload_progress.min_freq[=1.0]    更新进度的时间间隔(秒)</p>
<p>文件上传的进度信息存储在$_SESSION中<br><a href="https://github.com/YooHannah/algorithm/blob/master/php/fileupload/progress.php" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;修改php-ini文件配置&quot;&gt;&lt;a href=&quot;#修改php-ini文件配置&quot; class=&quot;headerlink&quot; title=&quot;修改php.ini文件配置&quot;&gt;&lt;/a&gt;修改php.ini文件配置&lt;/h1&gt;&lt;p&gt;php.ini文件在不同的集成环境包中都在安装目录的
    
    </summary>
    
    
      <category term="php" scheme="http://yoohannah.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>文件</title>
    <link href="http://yoohannah.github.io/post/php/php_file.html"/>
    <id>http://yoohannah.github.io/post/php/php_file.html</id>
    <published>2017-05-01T00:40:37.000Z</published>
    <updated>2017-05-01T14:34:31.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读"><a href="#读" class="headerlink" title="读"></a>读</h1><p>readfile 传入一个文件路径，输出一个文件<br>int readfile ( string $文件名)</p>
<p>file_get_contents 传入一个文件或文件路径，打开这个文件返回文件的内容。文件的内容是一个字符串。<br>string file_get_contents ( string filename)</p>
<p>资源类型处理方式<br>fopen函数，打开资源，参数为文件打开路径，打开文件模式，返回资源类型<br>resource fopen ( string $文件名, string 模式)</p>
<p>fread函数 读取打开的文件资源。读取指定长度的文件资源，读取一部份向后移动一部份。至到文件结尾。<br>string fread ( resource $操作资源, int 读取长度)</p>
<p>fclose函数的功能是关闭资源。资源有打开就有关闭<br>bool fclose ( resource $操作资源 )</p>
<p>fopen的模式<br>模式    说明<br>r    只读方式打开，将文件指针指向文件头。<br>r+    读写方式打开，将文件指针指向文件头。<br>w    写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建<br>w+    读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建<br>a    写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建<br>a+    读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之<br>x    创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建<br>x+<br>创建并以读写方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建<br>t    windows下将\n转为\r\n<br>b    二进制打开模式</p>
<h1 id="创建和修改"><a href="#创建和修改" class="headerlink" title="创建和修改"></a>创建和修改</h1><p>file_put_contents 向指定的文件当中写入一个字符串，如果文件不存在则创建文件。返回的是写入的字节长度<br>int file_put_contents ( string $文件路径, string $写入数据])</p>
<p> fwrite 配合fopen进行写入操作，写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建<br> int fwrite ( resource $文件资源变量, string $写入的字符串 [, int 长度])<br> 1.不论有没有新建都会打开文件重新写入<br> 2.原有的文件内容会被覆盖掉<br> 3.文件不存在会创建<br> 模式<br> x    每次写入会干掉原有文件的内容，文件不存在都会创建<br> a    每次写入都会向文件的尾端追加内容</p>
<p>  tmpfile  创建一个临时文件，返回资源类型。关闭文件即被删除<br>  resource tmpfile ( )</p>
<p>  rename 重命名文件 返回一个bool值，将旧的名字改为新的名字<br>  bool rename($旧名,$新名);</p>
<p>  copy 复制文件 将指定路径的源文件，复制一份到目标文件的位置。<br>  bool copy(源文件,目标文件)</p>
<p>  unlink 删除文件 这个删除是直接删除。使用的是windows电脑，在回收站看不到这个文件<br>  bool unlink(指定路径的文件)</p>
<h1 id="检测文件属性函数"><a href="#检测文件属性函数" class="headerlink" title="检测文件属性函数"></a>检测文件属性函数</h1><pre><code>bool file_exists ( $指定文件名或者文件路径) 功能：文件是否存在。
bool is_readable ( $指定文件名或者文件路径) 功能：文件是否可读
bool is_writeable ( $指定文件名或者文件路径) 功能：文件是否可写
bool is_executable ( $指定文件名或者文件路径) 功能：文件是否可执行
bool is_file ( $指定文件名或者文件路径) 功能：是否是文件
bool is_dir ( $指定文件名或者文件路径) 功能：是否是目录
void clearstatcache ( void ) 功能：清楚文件的状态缓存
</code></pre><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><p>rewind ( resource handle) 指针回到开始处<br>fseek ( resource handle, int offset [, int from_where]) 文件指针向后移动指定字符<br>filesize 检测文件的大小<br>file(文件名)    把整个文件读入一个数组中<br>fgets(文件名)    从文件指针中读取一行,读到最后返回false<br>fgetc(文件名)    从文件指针中读取一个字符，读到最后返回false<br>ftruncate(文件名，长度)    将文件截断到给定的长度<br>filectime(文件名)    文件创建时间<br>filemtime(文件名)    文件修改时间<br>fileatime(文件名)    文件上次访问时间</p>
<h1 id="文件锁定"><a href="#文件锁定" class="headerlink" title="文件锁定"></a>文件锁定</h1><p>bool flock ( resource $handle , int $operation) 轻便的咨询文件锁定<br>锁类型    说明<br>LOCK_SH    取得共享锁定（读取的程序）<br>LOCK_EX    取得独占锁定（写入的程序<br>LOCK_UN    释放锁定（无论共享或独占）<br>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$fp = fopen(&quot;demo.txt&quot;, &quot;r+&quot;);</div><div class="line"></div><div class="line">// 进行排它型锁定</div><div class="line">if (flock($fp, LOCK_EX)) &#123; </div><div class="line"></div><div class="line">   fwrite($fp, &quot;文件这个时候被我独占了哟\n&quot;);</div><div class="line"></div><div class="line">  // 释放锁定</div><div class="line">   flock($fp, LOCK_UN);    </div><div class="line">&#125; else &#123;</div><div class="line">   echo &quot;锁失败，可能有人在操作，这个时候不能将文件上锁&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fclose($fp);</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h1 id="处理文件夹"><a href="#处理文件夹" class="headerlink" title="处理文件夹"></a>处理文件夹</h1><p>处理文件夹的基本思想如下：<br>1.读取某个路径的时候判断是否是文件夹<br>2.是文件夹的话，打开指定文件夹，返回文件目录的资源变量<br>3.使用readdir读取一次目录中的文件，目录指针向后偏移一次<br>4.使用readdir读取到最后，没有可读的文件返回false<br>5.关闭文件目录</p>
<p>opendir    打开文件夹，返回操作资源<br>readdir    读取文件夹资源<br>is_dir    判断是否是文件夹<br>closedir    关闭文件夹操作资源<br>filetype    显示是文件夹还是文件，文件显示file，文件夹显示dir<br>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//设置打开的目录是D盘</div><div class="line">$dir = &quot;d:/&quot;;</div><div class="line"></div><div class="line">//判断是否是文件夹，是文件夹</div><div class="line">if (is_dir($dir)) &#123;</div><div class="line">   if ($dh = opendir($dir)) &#123;</div><div class="line"></div><div class="line">      //读取一次向后移动一次文件夹指针</div><div class="line">      echo readdir($dh).&apos;&lt;br /&gt;&apos;;</div><div class="line">      echo readdir($dh).&apos;&lt;br /&gt;&apos;;</div><div class="line">      echo readdir($dh).&apos;&lt;br /&gt;&apos;;</div><div class="line">      echo readdir($dh).&apos;&lt;br /&gt;&apos;;</div><div class="line"></div><div class="line">      //读取到最后返回false</div><div class="line"></div><div class="line">      //关闭文件夹资源</div><div class="line">       closedir($dh);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h1 id="文件权限设置"><a href="#文件权限设置" class="headerlink" title="文件权限设置"></a>文件权限设置</h1><p>函数用法与linux的权限操作的用法一样。<br>函数    功能说明<br>chmod    修改读取模式<br>chgrp    修改用户组<br>chown    修改权限</p>
<h1 id="文件路径函数"><a href="#文件路径函数" class="headerlink" title="文件路径函数"></a>文件路径函数</h1><p>array pathinfo ( string $路径)<br>功能：传入文件路径返回文件的各个组成部份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$path_parts = pathinfo(&apos;d:/www/index.inc.php&apos;);</div><div class="line"></div><div class="line">echo &apos;文件目录名：&apos;.$path_parts[&apos;dirname&apos;].&quot;&lt;br /&gt;&quot;;//d:/www</div><div class="line">echo &apos;文件全名：&apos;.$path_parts[&apos;basename&apos;].&quot;&lt;br /&gt;&quot;;//index.inc.php</div><div class="line">echo &apos;文件扩展名：&apos;.$path_parts[&apos;extension&apos;].&quot;&lt;br /&gt;&quot;;//php</div><div class="line">echo &apos;不包含扩展的文件名：&apos;.$path_parts[&apos;filename&apos;].&quot;&lt;br /&gt;&quot;; //index.inc</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>string basename ( string $路径[, string $suffix ])<br>功能：传入路径返回文件名<br>第一个参数传入路径。<br>第二个参数，指定我文件名到了指定字符停止。</p>
<p>dirname(string $路径)<br>功能：返回文件路径的文件目录部份</p>
<p>mixed parse_url ( string $路径 )<br>功能：将网址拆解成各个部份</p>
<p>string http_build_query ( mixed $需要处理的数据)<br>功能：生成url 中的query字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//定义一个关联数组</div><div class="line">$data = [</div><div class="line">       &apos;username&apos;=&gt;&apos;php&apos;,</div><div class="line">       &apos;area&apos;=&gt;&apos;hubei&apos;</div><div class="line">        ];</div><div class="line"></div><div class="line">//生成query内容</div><div class="line">echo http_build_query($data);//username=php&amp;area=hubei</div></pre></td></tr></table></figure></p>
<p>http_build_url()<br>功能： 生成一个url</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;读&quot;&gt;&lt;a href=&quot;#读&quot; class=&quot;headerlink&quot; title=&quot;读&quot;&gt;&lt;/a&gt;读&lt;/h1&gt;&lt;p&gt;readfile 传入一个文件路径，输出一个文件&lt;br&gt;int readfile ( string $文件名)&lt;/p&gt;
&lt;p&gt;file_get_co
    
    </summary>
    
    
      <category term="php" scheme="http://yoohannah.github.io/tags/php/"/>
    
  </entry>
  
</feed>
