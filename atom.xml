<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Little World</title>
  <subtitle>learn and share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoohannah.github.io/"/>
  <updated>2017-02-03T06:36:38.000Z</updated>
  <id>http://yoohannah.github.io/</id>
  
  <author>
    <name>YooHannah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Git Bash建立本地仓库并同步github仓库</title>
    <link href="http://yoohannah.github.io/post/knowledge/gitrepository.html"/>
    <id>http://yoohannah.github.io/post/knowledge/gitrepository.html</id>
    <published>2017-02-05T02:43:04.465Z</published>
    <updated>2017-02-03T06:36:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h1><p>1.选择仓库存放位置,新建文件夹,用作本地仓库<br>2.打开Git bash,cd 切换路径到该文件夹<br>3.执行以下命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">echo "该项目简短说明" &gt;&gt; README.md     ##输入“该项目简短说明”内容到README.md文件</div><div class="line">git init</div><div class="line">git add README.md                      ##将提交的文件(README.md)的信息添加到索引库</div><div class="line">git commit -m "第一次提交"             ##依据索引库中的内容来进行文件的提交</div><div class="line">																			 ##同时提交更改描述“第一次提交”</div></pre></td></tr></table></figure></p>
<p>以上步骤完成本地仓库建立和将文件提交到本地仓库的工作</p>
<h1 id="建立远成仓库"><a href="#建立远成仓库" class="headerlink" title="建立远成仓库"></a>建立远成仓库</h1><p>1.登录github账号,点击右上角“+”,选择“New repository”<br>2.填写仓库名称,简单描述<br>3.为避免与本地仓库READMD.md冲突，初始化时不勾选“Initialize this repository with a README”<br>4.点击“Create repository”,生成远程仓库</p>
<h1 id="同步仓库"><a href="#同步仓库" class="headerlink" title="同步仓库"></a>同步仓库</h1><p>1.点击“Clone or download”, 复制远程仓库地址<br>2.执行以下代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin 远程仓库地址     ##将本地仓库推送到远成仓库</div><div class="line">git push -u origin master              ##将本地仓库推送到远程分支</div></pre></td></tr></table></figure></p>
<p>以上步骤即完成本地仓库同步到远程仓库</p>
<p>执行git remote时，<br>若出现提示出错信息：fatal: remote origin already exists.<br>则先输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote rm origin ##删除远程仓库</div></pre></td></tr></table></figure></p>
<p>再执行推送语句 “git remote add origin 远程仓库地址”</p>
<h1 id="更新远成仓库"><a href="#更新远成仓库" class="headerlink" title="更新远成仓库"></a>更新远成仓库</h1><p>若对本地仓库进行了修改<br>git add &lt;文件名&gt; 只是添加一个文件<br>git add .  可添加全部仓库文件<br>若执行“git add .”时，总出现警告：warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX.<br>可执行语句 “git config core.autocrlf false”<br>添加完文件后执行提交操作<br>git commit -m “”<br>最后推送到远程仓库<br>git push -u origin master</p>
<p>[资源共享]（<a href="http://www.cnblogs.com/len0031/p/5831571.html" target="_blank" rel="external">http://www.cnblogs.com/len0031/p/5831571.html</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;建立本地仓库&quot;&gt;&lt;a href=&quot;#建立本地仓库&quot; class=&quot;headerlink&quot; title=&quot;建立本地仓库&quot;&gt;&lt;/a&gt;建立本地仓库&lt;/h1&gt;&lt;p&gt;1.选择仓库存放位置,新建文件夹,用作本地仓库&lt;br&gt;2.打开Git bash,cd 切换路径到该文件夹&lt;b
    
    </summary>
    
    
      <category term="git" scheme="http://yoohannah.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>循环队列</title>
    <link href="http://yoohannah.github.io/post/algorithm/loopqueue.html"/>
    <id>http://yoohannah.github.io/post/algorithm/loopqueue.html</id>
    <published>2017-02-02T04:47:37.000Z</published>
    <updated>2017-02-06T22:45:08.098Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/image/queue9.png" alt="queue9"><br><img src="/image/queue10.png" alt="queue10"><br><img src="/image/queue11.png" alt="queue11"><br><img src="/image/queue12.png" alt="queue12"></p>
<h1 id="定义一个循环队列"><a href="#定义一个循环队列" class="headerlink" title="定义一个循环队列"></a>定义一个循环队列</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># define MAXSIZE 100</div><div class="line">typedef struct&#123;</div><div class="line">	ElemType *base;	##存放内存分配基地址，也可以用数组存放</div><div class="line">	int front;</div><div class="line">	int rear;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="初始化一个循环队列"><a href="#初始化一个循环队列" class="headerlink" title="初始化一个循环队列"></a>初始化一个循环队列</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">initQueue(cyclQueue *q)&#123;</div><div class="line">	q-&gt;base = (ElemType *)malloc(MAXSIZE sizeof(ElemType));</div><div class="line">	if(!q-&gt;base)&#123;</div><div class="line">	exit(0);</div><div class="line">	&#125;</div><div class="line">	q-&gt;front = q-&gt;rear = 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="入队列操作"><a href="#入队列操作" class="headerlink" title="入队列操作"></a>入队列操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">insertQueue(cyclQueue *q,ElemType e)&#123;</div><div class="line">	if((q-&gt;rear+1)%MAXSIZE == q-&gt;front)&#123;</div><div class="line">	return;	##队列已满</div><div class="line">	&#125;</div><div class="line">	q-&gt;base[q-&gt;rear] = e;</div><div class="line">	q-&gt;rear = (q-&gt;rear+1)%MAXSIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="出队列操作"><a href="#出队列操作" class="headerlink" title="出队列操作"></a>出队列操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DeleteQueue(cyclQueue *q,ElemType e)&#123;</div><div class="line">	if(q-&gt;rear == q-&gt;front)&#123;</div><div class="line">	return;	##队列为空</div><div class="line">	&#125;</div><div class="line">	*e = q-&gt;base[q-&gt;front];</div><div class="line">	q-&gt;front = (q-&gt;front+1)%MAXSIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/image/queue9.png&quot; alt=&quot;queue9&quot;&gt;&lt;br&gt;&lt;img src=&quot;/image/queue10.png&quot; alt=&quot;queue10&quot;&gt;&lt;br&gt;&lt;img src=&quot;/image/queue11.png&quot; alt=&quot;queue11&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="http://yoohannah.github.io/post/algorithm/queue.html"/>
    <id>http://yoohannah.github.io/post/algorithm/queue.html</id>
    <published>2017-02-02T04:34:37.000Z</published>
    <updated>2017-02-06T22:32:00.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>1.先进先出的线性表，有顺序表和链表<br>2.只允许在一段插入，另一端删除</p>
<h1 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h1><p>和栈相反，队列常用链表实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef sruct QNode&#123;</div><div class="line">	ElemType data;</div><div class="line">	struct QNode *next;</div><div class="line">&#125;QNode,*QueuePrt;</div><div class="line">typedef struct &#123;</div><div class="line">	QueuePrt front;	##队头指针指向链队列的头结点(头结点不是必要的)</div><div class="line">	QueuePrt rear;	##队尾指针指向终端结点，空队列时，front，rear都指向头结点</div><div class="line">&#125;LinkQueue;</div></pre></td></tr></table></figure></p>
<p><img src="/image/queue2.png" alt="queue2"></p>
<h1 id="入队列"><a href="#入队列" class="headerlink" title="入队列"></a>入队列</h1><p><img src="/image/queue3.png" alt="queue3"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">InsertQueue(LinkQueue *q,ElemType e)&#123;</div><div class="line">	QueuePrt p;</div><div class="line">	p = (QueuePtr)malloc(sizeof(QNode));</div><div class="line">	if(p==NULL)&#123;</div><div class="line">		exit(0);</div><div class="line">	&#125;</div><div class="line">	p-&gt;data = e;</div><div class="line">	p-&gt;next = NULL;</div><div class="line">	q-&gt;rear-&gt;next = p;</div><div class="line">	q-&gt;rear = p;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="出队列"><a href="#出队列" class="headerlink" title="出队列"></a>出队列</h1><p><img src="/image/queue5.png" alt="queue5"><br><img src="/image/queue6.png" alt="queue6"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">DeleteQueue(LinkQueue *q,ElemType e)&#123;</div><div class="line">	QueuePrt p;</div><div class="line">	if(q-&gt;front ==q-&gt;rear)</div><div class="line">	&#123;</div><div class="line">		retrun;</div><div class="line">	&#125;</div><div class="line">	p=q-&gt;front-&gt;next;</div><div class="line">	*e=p-&gt;data;</div><div class="line">	q-&gt;front-&gt;next = p-&gt;next;</div><div class="line">	if(q-&gt;rear ==p)&#123;</div><div class="line">		q-&gt;rear = q-&gt;front;</div><div class="line">	&#125;</div><div class="line">	free(p);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="销毁一个队列"><a href="#销毁一个队列" class="headerlink" title="销毁一个队列"></a>销毁一个队列</h1><p>由于链队列建立在内存的动态区，因此当一个队列<br>不在有用时，应当及时销毁掉，以免过多占用内存空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DestroyQueue(LinkQueue *q)&#123;</div><div class="line">	while(q-&gt;front)&#123;</div><div class="line">	q-&gt;rear = q-&gt;front-&gt;next;</div><div class="line">	free(q-&gt;front):</div><div class="line">	q-&gt;front = q-&gt;rear;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="">题目：实现链队列结构</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;p&gt;1.先进先出的线性表，有顺序表和链表&lt;br&gt;2.只允许在一段插入，另一端删除&lt;/p&gt;
&lt;h1 id=&quot;队列的链式存储结构&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://yoohannah.github.io/post/algorithm/Recursion.html"/>
    <id>http://yoohannah.github.io/post/algorithm/Recursion.html</id>
    <published>2017-02-02T04:34:37.000Z</published>
    <updated>2017-02-02T05:13:11.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>1.把有一个直接调用自己或通过一系列的调用语句间接的调用用自己的函数，称作递归函数<br>2.每个递归函数必须有一个终止调用的条件语句，否则陷入永不结束的无穷递归</p>
<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p>迭代实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var a=[];</div><div class="line">a[0] = 1;</div><div class="line">a[1] = 1;</div><div class="line">for(var i =2;i&lt;40;i++)&#123;</div><div class="line">  a[i]=a[i-1]+a[i-2];</div><div class="line">&#125;</div><div class="line">for(var j=0;j&lt;40;j++)&#123;</div><div class="line">  console.log(j,a[j]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>递归实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function fib(n)&#123;</div><div class="line">  if(n&lt;2)&#123;</div><div class="line">    return 1;</div><div class="line">  &#125;</div><div class="line">  if(n&gt;1 &amp;&amp; n&lt;40)&#123;</div><div class="line">    return fib(n-1)+fib(n-2);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">console.log(fib(4));</div></pre></td></tr></table></figure></p>
<p>n!阶乘递归算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function fib(n)&#123;</div><div class="line">    if(n&gt;0)&#123;</div><div class="line">      return n*fib(n-1);</div><div class="line">    &#125;else&#123;</div><div class="line">      return 1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">console.log(fib(4));</div></pre></td></tr></table></figure></p>
<p>汉诺塔问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function hanoita(n,x,y,z)&#123;</div><div class="line">  if(n==1)&#123;</div><div class="line">    console.log(x+&quot;-&gt;&quot;+z);</div><div class="line">  &#125;else&#123;</div><div class="line">    hanoita(n-1,x,z,y);</div><div class="line">    console.log(x+&quot;-&gt;&quot;+z);</div><div class="line">    hanoita(n-1,y,x,z);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">hanoita(3,&quot;x&quot;,&quot;y&quot;,&apos;z&apos;);</div></pre></td></tr></table></figure></p>
<p><a href="">递归字符串翻转</a><br><a href="">折中查找法递归迭代</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>1.迭代使用循环结构，递归使用选择结构<br>2.递归能使程序结构更清晰、简洁、容易让人理解，从而减少读懂代码的时间<br>3.大量的递归会建立函数的副本，会消耗大量时间和内存，而迭代不需要<br>4.递归函数分为调用和回退阶段，递归的回退顺序是它调用顺序的逆序</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h1&gt;&lt;p&gt;1.把有一个直接调用自己或通过一系列的调用语句间接的调用用自己的函数，称作递归函数&lt;br&gt;2.每个递归函数必须有一个终止调用的条件语句，否则
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>逆波兰表达式/后缀表达式</title>
    <link href="http://yoohannah.github.io/post/algorithm/stacklinked.html"/>
    <id>http://yoohannah.github.io/post/algorithm/stacklinked.html</id>
    <published>2017-02-02T03:48:37.000Z</published>
    <updated>2017-02-06T22:08:09.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h1><h2 id="栈的链式存储结构-1"><a href="#栈的链式存储结构-1" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h2><p><img src="/image/stack2.png" alt="stack2"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef struct StackNode&#123;</div><div class="line">  ElemType data;          ##存放栈的数据</div><div class="line">  struct StackNode *next;</div><div class="line">&#125;StackNode,*LinkStackPtr;</div><div class="line">typedef struct LinkStack&#123;</div><div class="line">  LinkStackPrt top;        ##top指针</div><div class="line">  int count;               ##栈元素计数器</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="栈链的入栈操作"><a href="#栈链的入栈操作" class="headerlink" title="栈链的入栈操作"></a>栈链的入栈操作</h2><p>假设元素值e的新结点是s,top为栈顶指针<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Status Push(LinkStack *s,ElemType e)&#123;</div><div class="line">  LinkStackPtr p=(LinkStackPtr)malloc(sizeof(StackNode));</div><div class="line">  p-&gt;data = e;</div><div class="line">  p-&gt;next = s-&gt;top;</div><div class="line">  s-&gt;top = p;</div><div class="line">  s-&gt;count++;</div><div class="line">  <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="栈的出栈操作"><a href="#栈的出栈操作" class="headerlink" title="栈的出栈操作"></a>栈的出栈操作</h2><p>假设变量p用来存储要删除的栈顶结点，将栈顶指针下移一位，最后释放p<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Status Pop(LinkStack *s,ElemType e)&#123;</div><div class="line">  LinkStackPtr p;</div><div class="line">  <span class="keyword">if</span>(StackEmpty(*s))&#123;</div><div class="line">  <span class="keyword">return</span> ERROR;</div><div class="line">  &#125;</div><div class="line">  *e=s-&gt;top-&gt;data;</div><div class="line">  p=s-&gt;top;</div><div class="line">  s-&gt;top = s-&gt;top-&gt;next;</div><div class="line">  free(p);</div><div class="line">  s-&gt;count--;</div><div class="line">  <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="逆波兰表达式-后缀表达式"><a href="#逆波兰表达式-后缀表达式" class="headerlink" title="逆波兰表达式/后缀表达式"></a>逆波兰表达式/后缀表达式</h1><p>正常表达式–&gt;后缀表达式<br>（1-2)x(4+5）–&gt; 1 2 - 4 5 + x<br>1.计算后缀表达式<br>主要思想是判断字符是否为运算符，若为数字，则入栈，为运算符则连续出栈两次进行运算，再将运算结果入栈<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>]</div><div class="line"><span class="keyword">var</span> stack = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;list.length;i++)&#123;</div><div class="line">  <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(list[i]))&#123;</div><div class="line">      stack.push(list[i]);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">       <span class="keyword">var</span> a = stack.pop();</div><div class="line">       <span class="keyword">var</span> b = stack.pop();</div><div class="line">       <span class="keyword">if</span>(list[i] ==<span class="string">"+"</span>)&#123;</div><div class="line">        stack.push(b+a);</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list[i] ==<span class="string">"-"</span>)&#123;</div><div class="line">        stack.push(b-a);</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list[i] ==<span class="string">"*"</span>)&#123;</div><div class="line">        stack.push(b*a);</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list[i] ==<span class="string">"/"</span>)&#123;</div><div class="line">        stack.push(b/a);</div><div class="line">       &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(stack);</div></pre></td></tr></table></figure></p>
<p>2.计算表达式转后缀表达式<br>主要思路<br>1，表达式中参与运算的数字、运算符以及小括号分割，形成待处理数组<br>2，循环判断<br>  A.若字符为数字，入栈2，<br>  B.若字符为“+”、“-”，分情况讨论<br>（1）此时栈1为空，入栈；<br>（2）栈1不为空，将“（”左括号以上的符号从栈1 pop到栈2，“（”留          在栈1，处理完后，将“+”、“-”入栈1；<br>   C若字符为“）”，将“（”以上符号从栈1 pop到栈2，“（”也pop出来<br>     但不入栈2<br>   D若字符为“/”“*”“（”直接入栈2<br>   E其他情况，非法字符，抛出异常<br>3.将栈1元素pop到栈2；<br>栈2即后缀表达式<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/%E8%AE%A1%E7%AE%97%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E6%A0%88%EF%BC%89.js" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;栈的链式存储结构&quot;&gt;&lt;a href=&quot;#栈的链式存储结构&quot; class=&quot;headerlink&quot; title=&quot;栈的链式存储结构&quot;&gt;&lt;/a&gt;栈的链式存储结构&lt;/h1&gt;&lt;h2 id=&quot;栈的链式存储结构-1&quot;&gt;&lt;a href=&quot;#栈的链式存储结构-1&quot; class=&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://yoohannah.github.io/post/algorithm/stack.html"/>
    <id>http://yoohannah.github.io/post/algorithm/stack.html</id>
    <published>2017-02-02T03:48:37.000Z</published>
    <updated>2017-02-06T21:50:58.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>1.特殊线性表,所以也分为顺序存储和链式存储结构<br>2.表尾称为栈尾，表头称为栈底<br>3.元素必须后进先出;所有操作只能在表尾进行<br>4.插入操作叫做进栈/入栈/压栈，删除操作叫出栈/弹栈<br>5.最开始栈中不含有任何数据，叫空栈，此时栈顶就是栈底，<br>  然后数据从栈顶进入，栈顶栈底分离，整个栈的当前容量变大，<br>  数据出栈时从栈顶弹出，栈顶下移，整个栈的当前容量变小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">栈的顺序存储结构</div><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">  ElemType *base; ##指向栈底的指针变量</div><div class="line">  ElemType *top;  ##指向栈顶的指针变量</div><div class="line">  int stackSize;  ##栈当前可使用的最大容量</div><div class="line">&#125;sqStack;</div></pre></td></tr></table></figure></p>
<h1 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h1><p>  每次向栈中压入一个数据，top指针+1，直到栈满为止</p>
<h1 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h1><p>  在栈顶取数，栈顶指针随之下移，当前容量-1，</p>
<h1 id="JS数组push和pop方法对数组处理"><a href="#JS数组push和pop方法对数组处理" class="headerlink" title="JS数组push和pop方法对数组处理"></a>JS数组push和pop方法对数组处理</h1><p>二进制转10进制<br>主要思想，每次pop数组最后一项，即二进制的位数依次增长，顺序i正好为指数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> length = list.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">  <span class="keyword">var</span> pop = list.pop();</div><div class="line">  sum+= pop*<span class="built_in">Math</span>.pow(<span class="number">2</span>,i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum);</div></pre></td></tr></table></figure></p>
<p>二进制转8进制<br>主要思想，三位一组生成10进制，最后十进制按位数相加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> hex = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> length = list.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length/<span class="number">3</span>+<span class="number">1</span>;i++)&#123;</div><div class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</div><div class="line">    <span class="keyword">if</span>(list.length&gt;<span class="number">0</span>)&#123;</div><div class="line">      sum+=list.pop()*<span class="built_in">Math</span>.pow(<span class="number">2</span>,j);</div><div class="line">    &#125;</div><div class="line">   &#125;</div><div class="line">   hex +=sum*<span class="built_in">Math</span>.pow(<span class="number">10</span>,i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(hex);</div></pre></td></tr></table></figure></p>
<p>二进制转16进制<br>注意 &gt;9时，转换成字母，pop，进行反序链接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> hex = [];</div><div class="line"><span class="keyword">var</span> length = list.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length/<span class="number">4</span>+<span class="number">1</span>;i++)&#123;</div><div class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">   <span class="keyword">if</span>(list.length&gt;<span class="number">0</span>)&#123;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</div><div class="line">    <span class="keyword">if</span>(list.length&gt;<span class="number">0</span>)&#123;</div><div class="line">      sum+=list.pop()*<span class="built_in">Math</span>.pow(<span class="number">2</span>,j);</div><div class="line">    &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (sum &gt;<span class="number">-1</span>&amp;&amp;sum&lt;<span class="number">10</span>) &#123;</div><div class="line">    hex.push(<span class="built_in">String</span>.fromCharCode(sum+<span class="number">48</span>));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span>(sum &gt;<span class="number">9</span> &amp;&amp; sum &lt;<span class="number">16</span>)&#123;</div><div class="line">     hex.push(<span class="built_in">String</span>.fromCharCode(sum+<span class="number">55</span>));</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> l = hex.length<span class="number">-1</span>;l&gt;<span class="number">-1</span>;l--)&#123;</div><div class="line">  str+=hex[l];</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;p&gt;1.特殊线性表,所以也分为顺序存储和链式存储结构&lt;br&gt;2.表尾称为栈尾，表头称为栈底&lt;br&gt;3.元素必须后进先出;所有操作只能在表尾进行&lt;br&gt;4
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>双向循环链表</title>
    <link href="http://yoohannah.github.io/post/algorithm/Doublylinkedlist.html"/>
    <id>http://yoohannah.github.io/post/algorithm/Doublylinkedlist.html</id>
    <published>2017-02-02T03:33:37.000Z</published>
    <updated>2017-02-06T14:31:58.480Z</updated>
    
    <content type="html"><![CDATA[<p>结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef struct DualNode&#123;</div><div class="line">	ElemType data;</div><div class="line">	struct DualNode *prior;//前驱结点</div><div class="line">	struct DualNode *next;//后继结点</div><div class="line">&#125;DualNode,*DuLinkList;</div></pre></td></tr></table></figure></p>
<p><img src="/image/doublylinklist1.png" alt="doublylinklist1"><br><img src="/image/doublylinklist2.png" alt="doublylinklist2"><br>双向链表插入<br><img src="/image/doublylinklist3.png" alt="doublylinklist3"><br>s-&gt;next = p;<br>s-&gt;prior = p-&gt;prior;<br>p-&gt;prior-&gt;next = s;<br>p-&gt;prior = s;<br>双向链表删除<br><img src="/image/doublylinklist4.png" alt="doublylinklist4"><br>p-&gt;prior-&gt;next = p-&gt;next;<br>p-&gt;next -&gt;prior = p-&gt;prior;<br>free(p)<br>小结<br>双向链表相对于单链表来说复杂一点，每个结点对了一个prior指针，在进行插入和删除时需要注意;<br>双向链表可以有效提高算法的时间性能，用空间换取时间</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结构&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;li
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>拉丁方阵</title>
    <link href="http://yoohannah.github.io/post/algorithm/lating.html"/>
    <id>http://yoohannah.github.io/post/algorithm/lating.html</id>
    <published>2017-02-02T03:25:37.000Z</published>
    <updated>2017-02-02T03:28:47.823Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/image/lating1.png" alt="lating1"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Latinsquare</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> list=[];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;num;i++)&#123;</div><div class="line">	  <span class="keyword">var</span> pre = <span class="number">0</span>;</div><div class="line">	  <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</div><div class="line">	    pre=num;</div><div class="line">	  &#125;<span class="keyword">else</span>&#123;</div><div class="line">	    pre = i;</div><div class="line">	  &#125;</div><div class="line">	  <span class="keyword">var</span> nextt = <span class="number">0</span>;</div><div class="line">	  <span class="keyword">if</span>(i ==num<span class="number">-1</span>)&#123;</div><div class="line">	    nextt = <span class="number">1</span>;</div><div class="line">	  &#125;<span class="keyword">else</span>&#123;</div><div class="line">	    nextt = i+<span class="number">2</span>;</div><div class="line">	  &#125;</div><div class="line">	  list.push(&#123;</div><div class="line">	    <span class="attr">prior</span>:pre,</div><div class="line">	    <span class="attr">data</span>:i+<span class="number">1</span>,</div><div class="line">	    <span class="attr">next</span>:nextt</div><div class="line">	  &#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;num;i++)&#123;</div><div class="line">	  <span class="keyword">var</span> string=[];</div><div class="line">	  <span class="keyword">var</span> p = <span class="number">1</span>;</div><div class="line">	  <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt;i;j++)&#123;</div><div class="line">	    p = list[p<span class="number">-1</span>].next;</div><div class="line">	  &#125;</div><div class="line">	  <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>;k&lt;num;k++)&#123;</div><div class="line">	    string.push(list[p<span class="number">-1</span>].data);</div><div class="line">	    p = list[p<span class="number">-1</span>].next;</div><div class="line">	  &#125;</div><div class="line">	  <span class="built_in">console</span>.log(string);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">Latinsquare(<span class="number">5</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/image/lating1.png&quot; alt=&quot;lating1&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>判断单链表是否有环</title>
    <link href="http://yoohannah.github.io/post/algorithm/hascirclesinglelinkedlist.html"/>
    <id>http://yoohannah.github.io/post/algorithm/hascirclesinglelinkedlist.html</id>
    <published>2017-02-02T03:15:37.000Z</published>
    <updated>2017-02-06T14:30:39.878Z</updated>
    
    <content type="html"><![CDATA[<p>有环定义:链表的尾节点指向了链表中的某个结点<br><img src="/image/ishascircle.png" alt="ishascircle"><br>方法一：p、q指针同时向前走，但q每次都从头开始走，对于每个结点，若p、q走的步数不等则说明有环<br>方法二：快慢指针:使用p,q两个指针，p每次向前走一步，q每次向前走两步，若在某个时候p==q,则存在环<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF.js" target="_blank" rel="external">代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有环定义:链表的尾节点指向了链表中的某个结点&lt;br&gt;&lt;img src=&quot;/image/ishascircle.png&quot; alt=&quot;ishascircle&quot;&gt;&lt;br&gt;方法一：p、q指针同时向前走，但q每次都从头开始走，对于每个结点，若p、q走的步数不等则说明有环&lt;br&gt;方法二
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>单链表</title>
    <link href="http://yoohannah.github.io/post/algorithm/Singlelinkedlist.html"/>
    <id>http://yoohannah.github.io/post/algorithm/Singlelinkedlist.html</id>
    <published>2017-02-02T02:06:56.000Z</published>
    <updated>2017-02-05T13:51:57.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h1><p><img src="/image/chaintable17.png" alt="chaintable17"><br><img src="/image/chaintable18.png" alt="chaintable18"><br><a href="https://github.com/YooHannah/algorithm/blob/master/C/%E5%8D%95%E9%93%BE%E8%A1%A8.c" target="_blank" rel="external">代码链接</a></p>
<h1 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h1><p>头插法建立的链表输入顺序与结点次序相反，尾插法可以使二者顺序相同<br><img src="/image/chaintable20.png" alt="chaintable20"><br>R做索引，S做中介节点<br><a href="https://github.com/YooHannah/algorithm/blob/master/C/%E5%8D%95%E9%93%BE%E8%A1%A8.c" target="_blank" rel="external">代码链接</a><br>重点r=p;将尾节点更新为r</p>
<h1 id="整表删除"><a href="#整表删除" class="headerlink" title="整表删除"></a>整表删除</h1><p><img src="/image/chaintable21.png" alt="chaintable21"><br>参照删除单链表制定位置结点代码<a href="https://github.com/YooHannah/algorithm/blob/master/C/%E5%8D%95%E9%93%BE%E8%A1%A8.c" target="_blank" rel="external">代码链接</a></p>
<h1 id="快慢指针—-gt-标尺思想"><a href="#快慢指针—-gt-标尺思想" class="headerlink" title="快慢指针—&gt;标尺思想"></a>快慢指针—&gt;标尺思想</h1><p><img src="/image/staticlinklist3.png" alt="staticlinklist3"><br><a href="https://github.com/YooHannah/algorithm/blob/master/C/%E5%8D%95%E9%93%BE%E8%A1%A8.c" target="_blank" rel="external">快速找到未知长度单链表的中间结点  代码链接</a></p>
<h1 id="单链表与顺序存储结构优缺点"><a href="#单链表与顺序存储结构优缺点" class="headerlink" title="单链表与顺序存储结构优缺点"></a>单链表与顺序存储结构优缺点</h1><p>1.存储分配方式：<br>  顺序存储结构用一段连续的存储单元依次存储线性表的数据元素;<br>  单链表采用链式存储结构,用一组任意的存储单元存放线性表的元素<br>2.时间性能：<br>—查找<br>顺序存储结构O(1);<br>单链表O(n)<br>—插入和删除<br>顺序存储结构需要平均移动表长一半的元素，时间为O(n);<br>单链表在计算出某位置的指针后，插入和删除时间仅为O(1)<br>3.空间性能<br>顺序存储结构需要预分配存储空间，分大了容易造成空间浪费，分小了容易发生溢出<br>单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>1.频繁查找，较少插入删除操作，宜用顺序存储结构，如，游戏开发时用户注册的个人信息的存储<br>2.频繁插入删除操作，较少查找，宜用单链表结构，如游戏中的玩家的装备列表<br>3.当线性表大致长度已知，宜用顺序存储结构，反之，长度变化大或未知，则用单链表</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;头插法建立单链表&quot;&gt;&lt;a href=&quot;#头插法建立单链表&quot; class=&quot;headerlink&quot; title=&quot;头插法建立单链表&quot;&gt;&lt;/a&gt;头插法建立单链表&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/image/chaintable17.png&quot; alt=&quot;chaint
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>静态链表</title>
    <link href="http://yoohannah.github.io/post/algorithm/Staticlinkedlist.html"/>
    <id>http://yoohannah.github.io/post/algorithm/Staticlinkedlist.html</id>
    <published>2017-02-02T02:06:37.000Z</published>
    <updated>2017-02-05T13:51:54.775Z</updated>
    
    <content type="html"><![CDATA[<p>用数组描述的链表叫做静态链表<br>这种描述方法叫做游标实现法<br><img src="/image/staticlinklist1.png" alt="staticlinklist1"><br>Staticlinklist是一个容量为maxsize大的数组，数组每一项是一个结构struct，<br>这个结构包含两项，数据data和游标cur<br>整个数组的第一项(下标为0)和最后一项（下标为maxsize-1）的数据部分不存放数据<br>把未使用的数组元素（数据部分为空称为备用链表<br>约定：<br>——第一项的游标指向数组中除收尾两项外的项中，第一个数据部分为空的项，即首项游标为该项的下标/备用链表第一个结点的下标;<br>——尾项游标指向第一个有数据的元素 相当于头结点作用<br>——其他元素游标等于其指向的元素位于数组中的下标<br>——数据元素的最后一项的游标等于首项下标0,即指向备用链表开始结点</p>
<p>初始化静态链表相当于初始化数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Status InitList(StatixLinkList space)</div><div class="line">&#123;</div><div class="line">	int i;</div><div class="line">	for(i =0;i&lt;MAXSIZE-1;i++)&#123;</div><div class="line">		space[MAXSIZE-1].cur = 0;</div><div class="line">		return OK;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/YooHannah/algorithm/blob/master/C/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8.c" target="_blank" rel="external">链表插入，删除，求长度 代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用数组描述的链表叫做静态链表&lt;br&gt;这种描述方法叫做游标实现法&lt;br&gt;&lt;img src=&quot;/image/staticlinklist1.png&quot; alt=&quot;staticlinklist1&quot;&gt;&lt;br&gt;Staticlinklist是一个容量为maxsize大的数组，数组每一项是
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>单循环链表</title>
    <link href="http://yoohannah.github.io/post/algorithm/singlelooplinklist.html"/>
    <id>http://yoohannah.github.io/post/algorithm/singlelooplinklist.html</id>
    <published>2017-02-02T02:06:37.000Z</published>
    <updated>2017-02-05T13:58:34.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h1><p>将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表<br><img src="/image/singlelooplinklist1.png" alt="singlelooplinklist1"><br>循环链表并不一定要有头结点<br>与单链表的主要差异为判断链表是否为空<br>单链表为空条件为head-&gt;next = null<br>循环链表为空条件为head-&gt;next = head<br>终端节点用尾指针rear指示，查找终端结点是O(1);开始结点是rear-&gt;next-&gt;next,也是O(1);<br>[插入、删除、返回位置 代码思路参考单链表]<br>Rear == rear-&gt;next 空循环链表<br><img src="/image/singlelooplinklist2.png" alt="singlelooplinklist2"><br>小结<br>循环链表的特点是无须增加存储量，仅对链接方式稍作改变，即可使得表处理更加方便灵活</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;循环链表&quot;&gt;&lt;a href=&quot;#循环链表&quot; class=&quot;headerlink&quot; title=&quot;循环链表&quot;&gt;&lt;/a&gt;循环链表&lt;/h1&gt;&lt;p&gt;将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表成为单循环链表，简称循环链表
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>线性表基本概念</title>
    <link href="http://yoohannah.github.io/post/algorithm/lineartable.html"/>
    <id>http://yoohannah.github.io/post/algorithm/lineartable.html</id>
    <published>2017-02-02T01:12:37.000Z</published>
    <updated>2017-02-02T01:21:52.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>由0个或多个数据元素组成的有限序列</p>
<p>1.序列，有顺序<br>2.若元素存在多个，则第一个无前驱，而最后一个元素无后继，其他元素都有且只有一个前驱和后继<br>3.有限的，无论计算机发展到多强大，线性表处理的元素都是有限的</p>
<p>(ai-1,ai,ai+1)  ai-1是ai 的直接前驱元素;ai+1是ai的直接后继元素<br>线性表长度即线性表元素个数,个数为0，即为空表</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>一组性质相同的值的集合及定义在此集合上的一些操作的总称（编程语言中的各种类型）</p>
<p>抽象数据类型 把数据类型和操作结合捆绑在一起</p>
<p>标准格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ADT（抽象数据名）list</div><div class="line">Data（数据元素之间逻辑关系的定义）</div><div class="line">	  数据间关系一对一</div><div class="line">Operation（操作）</div><div class="line">	Initlist()初始化操作 新建一个空表</div><div class="line">	ListEmpty(list) 判断线性表list是否为空，空返回true</div><div class="line">	Clearlist(list) 清空线性表</div><div class="line">	Getitem(list,i,e) 获取线性表第i个位置元素并返回给e</div><div class="line">	Search(item,list) 在list里面查找item是否在里面，存在返回序号；否则返回0</div><div class="line">	  				 线性表从1 开始</div><div class="line">	Listinsert(item,i,list) 在list的第i个位置插入item</div><div class="line">	Listdelete(item,i,list) 删除list中第i个位置元素，并返回该元素给item</div><div class="line">	Listlength(list) 返回线性表list元素个数</div><div class="line">endADT</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;p&gt;由0个或多个数据元素组成的有限序列&lt;/p&gt;
&lt;p&gt;1.序列，有顺序&lt;br&gt;2.若元素存在多个，则第一个无前驱，而最后一个元素无后继，
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>线性表顺序存储结构</title>
    <link href="http://yoohannah.github.io/post/algorithm/lineartable-sequence.html"/>
    <id>http://yoohannah.github.io/post/algorithm/lineartable-sequence.html</id>
    <published>2017-02-02T01:12:37.000Z</published>
    <updated>2017-02-02T01:59:42.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h1><p>结构struct{<br> 数据类型 数组名data[数组最大长度MAXSIZE]；<br> Int length;(线性表当前长度/数组当前数据个数)<br>}</p>
<p>封装3个属性<br>1.存储空间起始位置，数组data,它的存储位置就是线性表存储空间的存储位置<br>2.线性表最大存储容量：maxsize ,初始化后一般不变<br>3.线性表当前长度：length，时刻改变</p>
<h1 id="地址计算方法"><a href="#地址计算方法" class="headerlink" title="地址计算方法"></a>地址计算方法</h1><p>假设每个元素占C个存储单元（字节），LOC表示获得存储位置的函数<br>LOC( )= loc( )+C<br>LOC( )= loc( )+(i-1)*C<br>假设,线性表最大长度设置为10；当前长度为4；如下<br>var maxsize = 10;<br>var list ={<br>  data:[1,2,3,4],<br>  length:4<br>}</p>
<h1 id="获取线性表第i个位置的元素"><a href="#获取线性表第i个位置的元素" class="headerlink" title="获取线性表第i个位置的元素"></a>获取线性表第i个位置的元素</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getitem</span>(<span class="params">list,i</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i &gt;list.length || list.length == <span class="number">0</span>)&#123;   <span class="comment">//线性表位置从1 开始</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"input is error"</span>)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> item;</div><div class="line">  item = list[i<span class="number">-1</span>]; <span class="comment">//数组下标从0 开始，与线性表差1</span></div><div class="line">  <span class="keyword">return</span> item;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ff = getitem(list.data,<span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(ff);</div></pre></td></tr></table></figure>
<h1 id="在线性表第i个位置插入元素item"><a href="#在线性表第i个位置插入元素item" class="headerlink" title="在线性表第i个位置插入元素item"></a>在线性表第i个位置插入元素item</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertitem</span>(<span class="params">list,i,item</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(list.data.length == maxsize)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"the list is full"</span>);</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i &gt;list.data.length)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"the position is not in the range"</span>)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(i&lt;list.data.length)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = list.data.length <span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)&#123;</div><div class="line">      list.data[j+<span class="number">1</span>] = list.data[j];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  list.data[i<span class="number">-1</span>] = item; </div><div class="line">  list.length = list.length+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">insertitem(list,<span class="number">2</span>,<span class="number">5</span>);</div><div class="line"><span class="built_in">console</span>.log(list);</div></pre></td></tr></table></figure>
<h1 id="删除线性表第i个位置的元素"><a href="#删除线性表第i个位置的元素" class="headerlink" title="删除线性表第i个位置的元素"></a>删除线性表第i个位置的元素</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteitem</span>(<span class="params">list,i</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(list.data.length == <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"the list is empty"</span>)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i &gt;list.data.length)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"the position is not in the range"</span>)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> temp = list.data[i<span class="number">-1</span>];<span class="comment">//被删除的元素</span></div><div class="line">  <span class="keyword">if</span>(i&lt;list.data.length)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = i ;j&lt;list.data.length;j++)&#123;</div><div class="line">      list.data[j<span class="number">-1</span>] = list.data[j];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  list.data.splice(list.data.length<span class="number">-1</span>,<span class="number">1</span>);<span class="comment">//删除最后一个</span></div><div class="line">  list.length = list.length<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">deleteitem(list,<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(list);</div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在存、读数据时，不管是那个位置,时间复杂度都是O(1).<br>而在插入或删除时，时间复杂度都是O(n);<br>比较适合元素个数稳定，不经常插入和删除元素，而更多操作是存取数据的应用。<br>优点：<br>1.无需为表示表中元素之间的逻辑关系而增加额外的存储空间<br>2.可以快速存取表中任意位置元素<br>缺点<br>1.插入和删除操作需要移动大量元素<br>2.当线性表长度变化较大时，难以确定存储空间的容量<br>3.容易造成存储空间的碎片</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;顺序存储结构&quot;&gt;&lt;a href=&quot;#顺序存储结构&quot; class=&quot;headerlink&quot; title=&quot;顺序存储结构&quot;&gt;&lt;/a&gt;顺序存储结构&lt;/h1&gt;&lt;p&gt;结构struct{&lt;br&gt; 数据类型 数组名data[数组最大长度MAXSIZE]；&lt;br&gt; Int len
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>线性表链式存储结构</title>
    <link href="http://yoohannah.github.io/post/algorithm/lineartable-chain.html"/>
    <id>http://yoohannah.github.io/post/algorithm/lineartable-chain.html</id>
    <published>2017-02-02T01:12:37.000Z</published>
    <updated>2017-02-05T13:35:31.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h1><p>用一组任意的存储单元存储线性表数据元素，这组存储单元可以存在内存中未被占用的任意位置；每个元素需要两个位置，一个存储元素本身，一个存储它后继元素的存储地址（指针）<br>数据域：存储数据元素信息的域；<br>指针域：存储直接后继位置的域；<br>指针/链：指针域中存储的信息<br>存储映像/结点（node）：数据域和指针域这两部分信息组成的数据元素<br>链式存储结构：n个结点连接成一个链表<br>单链表：链表中每个结点中只包含一个指针域<br><img src="/image/chaintable1.png" alt="chaintable1"><br>头指针：链表中第一个结点的存储位置<br>最后一个结点指针为空<br><img src="/image/chaintable2.png" alt="chaintable2"><br>头结点的数据域一般不存储任何信息<br>头指针<br>—— 指 指向链表第一个结点的指针，若链表有头结点，则是指向头结点的指针<br>在头结点之前<br>—— 头指针具有标志作用，所以常用头指针冠以链表的名字（指针变量的名字）<br>—— 无论链表是否为空，头指针均不为空<br>—— 头指针是链表的必要元素<br>头结点<br>—— 为了操作统一和方便而设立，放在第一个元素的结点之前，其数据域一般无<br>    意义（但也可以用来存放链表的长度）<br>—— 有了头结点，对第一个元素节点前插入结点和删除第一个结点操作与其他结<br>点的操作就统一了<br>——头结点不一定是链表的必须要素<br><img src="/image/chaintable3.png" alt="chaintable3"><br>用结构指针来描述单链表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef struct Node</div><div class="line">&#123;</div><div class="line">	ElemType data;//数据域</div><div class="line">	struct Node* Next;//指针域</div><div class="line">&#125;Node;</div><div class="line">Typedef struct Node* LinkList</div></pre></td></tr></table></figure></p>
<p>Typedef struct Node<em>  LinkList 将Node</em>取别名为LinkList<br>结点由存放数据元素的数据域和存放后继结点的地址指针组成</p>
<p>假设P是指向线性表第i个元素的指针，则该结点ai的数据域为p-&gt;data<br>指针域为p-&gt;next,因为p-&gt;next是一个指针，它指向第i+1个元素ai+1<br>因此，如果p-&gt;data=ai,那么p-&gt;next-&gt;data=ai+1</p>
<h1 id="单链表元素读取"><a href="#单链表元素读取" class="headerlink" title="单链表元素读取"></a>单链表元素读取</h1><p>链表元素不像顺序存储线性表通过位置计算可以得到，需要一个一个找<br><img src="/image/chaintable6.png" alt="chaintable6"></p>
<p>时间复杂度为O（n）;核心思想：“工作指针后移”</p>
<h1 id="单链表元素插入O-n"><a href="#单链表元素插入O-n" class="headerlink" title="单链表元素插入O(n)"></a>单链表元素插入O(n)</h1><p><img src="/image/chaintable8.png" alt="chaintable8"><br><img src="/image/chaintable9.png" alt="chaintable9"></p>
<h1 id="单链表元素删除O-n"><a href="#单链表元素删除O-n" class="headerlink" title="单链表元素删除O(n)"></a>单链表元素删除O(n)</h1><p><img src="/image/chaintable11.png" alt="chaintable11"><br><img src="/image/chaintable12.png" alt="chaintable12"><br><img src="/image/chaintable13.png" alt="chaintable13"></p>
<p><a href="https://github.com/YooHannah/algorithm/blob/master/C/%E5%8D%95%E9%93%BE%E8%A1%A8.c" target="_blank" rel="external">以上操作代码链接</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>如果我们想从第i个位置开始，插入连续10个元素，<br>对顺序存储结构意味着，每次插入都需要移动n-i个位置,所以每次都是O(n);<br>而单链表，只需要在第一次找到第i个位置的指针，此时时间复杂度为O(n),<br>接下来只是简单的赋值移动指针而已，时间复杂度都是O(1)<br>因此对于频繁插入或删除数据来说，单链表效率更高。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;链式存储结构&quot;&gt;&lt;a href=&quot;#链式存储结构&quot; class=&quot;headerlink&quot; title=&quot;链式存储结构&quot;&gt;&lt;/a&gt;链式存储结构&lt;/h1&gt;&lt;p&gt;用一组任意的存储单元存储线性表数据元素，这组存储单元可以存在内存中未被占用的任意位置；每个元素需要两个位置，
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>基础概念</title>
    <link href="http://yoohannah.github.io/post/algorithm/basicconcept.html"/>
    <id>http://yoohannah.github.io/post/algorithm/basicconcept.html</id>
    <published>2017-02-01T13:21:30.000Z</published>
    <updated>2017-02-02T01:09:02.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>逻辑结构：数据元素之间的关系<br>物理结构：逻辑结构在计算机中的存储形式</p>
<p>四大逻辑结构：<br>1.集合结构：同属一个集合，相互之间无关系<br>2.线性:一对一<br>3.树形：一对多<br>4.图形：多对多</p>
<p>物理机构：<br>顺序存储：地址连续<br>链式存储：可连续可不连续</p>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>1.特性<br>输入：0或多个<br>输出：至少1个或多个<br>有穷性：不会无限循环，有限时间内结束<br>确定性：无歧义，一条路径得到结果相同<br>可行性：有限次数完成</p>
<p>2.设计要求<br>正确性：<br> 算法程序没有语法错误；<br> 对于合法输入能够产生满足要求的输出；<br> 对于非法输入能够产生满足规格的说明；<br> 对于故意刁难得测试输入都有满足要求的输出结果；<br>可读性：<br>便于阅读和修改<br>健壮性：<br>当输入数据不合法时，算法也能做出相关处理，而不是产生异常、崩溃或明明奇妙结果<br>时间效率高和存储量低</p>
<h1 id="函数渐进增长"><a href="#函数渐进增长" class="headerlink" title="函数渐进增长"></a>函数渐进增长</h1><p>函数F(n)在n&gt;N时,始终大于函数G(n),就说G(n)渐进增长F(n)</p>
<p>X为输入规模，Y 为算法执行次数（复杂度） aX^b+cX+d 执行次数计算方法<br>Y= aX^b+cX+d    a,c,d对Y值的影响均可忽略，此时只看b值，b越大Y 增长越快<br>Y= cX+d         c,d忽略,Y随X增长<br>Y = d            d无论为多大常熟，均视作1</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>T(n)=O(f(n));  f(n)是n的某个函数<br>执行次数 = 时间<br>O() 大O记法<br>T(n)增长最慢的算法为最优算法</p>
<h1 id="推导大O阶"><a href="#推导大O阶" class="headerlink" title="推导大O阶"></a>推导大O阶</h1><p>用常熟1取代运行时间中的所有加法常数<br>在修改后的运行次数函数中，只保留最高阶项<br>如果最高阶项存在且不是1，则去除与这个项相乘的常数</p>
<p>时间复杂度耗时从小到大O(以下项)<br><img src="/image/timelength.png" alt="timelength"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;p&gt;逻辑结构：数据元素之间的关系&lt;br&gt;物理结构：逻辑结构在计算机中的存储形式&lt;/p&gt;
&lt;p&gt;四大逻辑结构：&lt;br&gt;1.集合结构
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>打印文件</title>
    <link href="http://yoohannah.github.io/post/knowledge/print.html"/>
    <id>http://yoohannah.github.io/post/knowledge/print.html</id>
    <published>2017-02-01T09:57:25.000Z</published>
    <updated>2017-02-01T09:59:53.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打印文件"><a href="#打印文件" class="headerlink" title="打印文件"></a>打印文件</h2><p>  Window.print();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$scope.print= function()&#123;</div><div class="line">      $(&quot;#noprint&quot;).css(&apos;display&apos;,&apos;none&apos;);</div><div class="line">      $(&quot;#print&quot;).css(&apos;display&apos;,&apos;block&apos;);</div><div class="line">      window.print();</div><div class="line">      $(&quot;#print&quot;).css(&apos;display&apos;,&apos;none&apos;);</div><div class="line">      $(&quot;#noprint&quot;).css(&apos;display&apos;,&apos;block&apos;);</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;打印文件&quot;&gt;&lt;a href=&quot;#打印文件&quot; class=&quot;headerlink&quot; title=&quot;打印文件&quot;&gt;&lt;/a&gt;打印文件&lt;/h2&gt;&lt;p&gt;  Window.print();&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>链接(页面跳转)</title>
    <link href="http://yoohannah.github.io/post/knowledge/link.html"/>
    <id>http://yoohannah.github.io/post/knowledge/link.html</id>
    <published>2016-12-17T16:20:07.000Z</published>
    <updated>2017-02-01T09:01:30.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跳转打开新页面"><a href="#跳转打开新页面" class="headerlink" title="跳转打开新页面"></a>跳转打开新页面</h1><pre><code>1.window.Open(url);
2.&lt;a href= “” target=&quot;view_window&quot;&gt;&lt;/a&gt;
</code></pre><p>a 标签的 target 属性规定在何处打开链接文档。<br>如果在一个 a 标签内包含一个 target 属性，浏览器将会载入和显示用这个标签的 href 属性命名的、名称与这个目标吻合的框架或者窗口中的文档。如果这个指定名称或 id 的框架或者窗口不存在，浏览器将打开一个新的窗口，给这个窗口一个指定的标记，然后将新的文档载入那个窗口。从此以后，超链接文档就可以指向这个新的窗口。</p>
<h1 id="本页跳转"><a href="#本页跳转" class="headerlink" title="本页跳转"></a>本页跳转</h1><pre><code>&lt;a href=“”&gt;&lt;/a&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;跳转打开新页面&quot;&gt;&lt;a href=&quot;#跳转打开新页面&quot; class=&quot;headerlink&quot; title=&quot;跳转打开新页面&quot;&gt;&lt;/a&gt;跳转打开新页面&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1.window.Open(url);
2.&amp;lt;a href= “” targe
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>图片显示</title>
    <link href="http://yoohannah.github.io/post/knowledge/imageshow.html"/>
    <id>http://yoohannah.github.io/post/knowledge/imageshow.html</id>
    <published>2016-12-17T16:15:51.000Z</published>
    <updated>2017-02-01T09:03:01.695Z</updated>
    
    <content type="html"><![CDATA[<p>1.按一定大小，直接在img 标签里设置style<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;&#123;&#123;detaildata.image&#125;&#125;&quot; name=&quot;img&quot; style=&quot;width:32px;height: 32px;&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>2.按图片原本大小自适应显示，不在容器里设置任何大小</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.按一定大小，直接在img 标签里设置style&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Angular 绑定</title>
    <link href="http://yoohannah.github.io/post/knowledge/Angular-binding.html"/>
    <id>http://yoohannah.github.io/post/knowledge/Angular-binding.html</id>
    <published>2016-12-17T16:14:37.000Z</published>
    <updated>2017-02-01T09:07:27.071Z</updated>
    
    <content type="html"><![CDATA[<p>数据: ng-model<br>点击: ng-click=”closeimg()”<br>鼠标经过: ng-mouseenter=”imgclick(item.img_url)”   ng-mouseleave=”closeimg()”<br>显示：ng-show   ng-if<br>禁用：ng-disabled</p>
<p>select 数据绑定<br>1.显示name,绑定id;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;select <span class="class"><span class="keyword">class</span></span>=<span class="string">"sel"</span> ng-model=<span class="string">"supplier.status"</span> ng-options=<span class="string">"item.id as item.name for item in statuss"</span> ng-disabled=<span class="string">"read2"</span>&gt;&lt;/select&gt;</div></pre></td></tr></table></figure></p>
<p>2.显示title，绑定整个对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;select <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-1"</span> ng-model=<span class="string">"usertype"</span> ng-options=<span class="string">"item.title for item in usertypes"</span> ng-change=<span class="string">"usertypechange()"</span>&gt;</div><div class="line">&lt;option selected value=""&gt;请选择&lt;/option&gt;</div><div class="line">&lt;<span class="regexp">/select&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据: ng-model&lt;br&gt;点击: ng-click=”closeimg()”&lt;br&gt;鼠标经过: ng-mouseenter=”imgclick(item.img_url)”   ng-mouseleave=”closeimg()”&lt;br&gt;显示：ng-show   ng
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
</feed>
