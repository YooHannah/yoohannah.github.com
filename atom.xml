<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Little World</title>
  <subtitle>learn and share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoohannah.github.io/"/>
  <updated>2017-10-08T10:27:20.407Z</updated>
  <id>http://yoohannah.github.io/</id>
  
  <author>
    <name>YooHannah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于webpack</title>
    <link href="http://yoohannah.github.io/post/knowledge/webpack.html"/>
    <id>http://yoohannah.github.io/post/knowledge/webpack.html</id>
    <published>2017-10-08T10:37:02.000Z</published>
    <updated>2017-10-08T10:27:20.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>1.webpack工作内容<br>Webpack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。<br>2.webpack工作方式<br>把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders,plugins处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1.如果在nodejs中全局安装了webpack和webpack-dev-server,可以在git bash直接使用’webpack’命令进行打包，使用’webpack-dev-server’命令启动打包后生成的项目<br>2.在打包之前,要先配置webpack.config.js文件,’webpack’命令会根据webpack.config.js文件的配置项去打包文件<br>3.如果想使用不同的配置文件去打包项目，可以使用’webpack –config 文件名’命令去打包<br>4.如果不想带文件名去打包,可以在package.json的scripts对象中配置命令‘xxx’,然后在git bash中使用命令‘npm run xxx’进行打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;webpack-dev-server&quot;,</div><div class="line">    &quot;build&quot;: &quot;webpack --config webpack.config.build.js&quot;,</div><div class="line">    &quot;dev&quot;:&quot;webpack --config webpack.config.dev.js&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>执行 npm run build 则按照webpack.config.build.js文件配置的内容去打包<br>同样，执行 npm run dev 则按照webpack.config.dev.js文件配置的内容去打包<br>但要注意,使用配置命令’start’时，直接执行’npm start’，就可以执行其对于的命令，中间不需要加run</p>
<h1 id="webpack-config-js-配置"><a href="#webpack-config-js-配置" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h1><p>module.exports = {}<br>1.配置根路径<br>配置入口文件前，可以用context配置根路径，这样在配置时，就不用将文件路径写进去，直接将文件配置进去就可以了<br>可以借助path模块拼接路径字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  /**</div><div class="line">   * The base directory</div><div class="line">   */</div><div class="line">  context: path.join(__dirname, &apos;./src&apos;),//这样入口文件就是指src文件夹下面的那些文件</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.入口文件<br>入口文件是指打包后项目生成的可以访问的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//单入口：</div><div class="line"> entry: &apos;./index.js&apos;,/*打包单个文件*/</div><div class="line"> entry: [&apos;./index1.js&apos;,&apos;./index2.js&apos;],/*打包多个文件*/</div><div class="line"></div><div class="line">//多入口：</div><div class="line">entry: &#123;</div><div class="line">    home: &apos;./home&apos;,</div><div class="line">    user: [&apos;./user&apos;, &apos;./account&apos;]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<p>多入口文件数组的KEY值可用于命名输出文件名，其对应的值即是要打包的源文件</p>
<p>3.输出文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line"></div><div class="line">/* filename方式一：直接指定文件名*/</div><div class="line">    filename: &apos;bundle.js&apos;,</div><div class="line"></div><div class="line">/* filename方式二：映射变量[name]和[hash]，[name]即定义入口文件的key值，[hash]是webpack在打包的时候按照一定规则生成的值,是MD5加密的值</div><div class="line"> * 还可以加[chunkhash],这里是作为版本号使用，方便上线时静态资源的版本管理</div><div class="line"> * 单入口[name]被映射成‘main’</div><div class="line">*/</div><div class="line">    filename: &apos;[name].bundle.[hash].js&apos;,</div><div class="line"></div><div class="line">    path: &apos;/home/proj/public/assets&apos;，/*指定输入文件存放路径*/</div><div class="line">    libraryTarget：</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.css88.com/doc/webpack2/concepts/output/" target="_blank" rel="external">其他配置参数</a></p>
<p>4.配置加载器loader</p>
<p>loader 是对应用程序中资源文件进行转换。它们是（运行在 Node.js 中的）函数，可以将资源文件作为参数的来源，然后返回新的资源文件。<br><a href="https://webpack.js.org/loaders/" target="_blank" rel="external">官方可用loader</a></p>
<p>Loaders的配置包括以下几方面：<br>test：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）<br>loader：loader的名称（必须）<br>include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；<br>query：为loaders提供额外的设置选项（可选）</p>
<p>loader被配置在rules数组中，数组每一个对象可配置一个或多个loader<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">   rules: [</div><div class="line">     &#123;</div><div class="line">       test: /\.js$/,</div><div class="line">       include: path.join(__dirname, &apos;./src&apos;),</div><div class="line">       use: &apos;babel-loader&apos;</div><div class="line">     &#125;</div><div class="line">   ]</div><div class="line"> &#125;,</div></pre></td></tr></table></figure></p>
<p>常用loader:<br>babel-loader:编译js,考虑到babel具有非常多的配置选项,一般把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中<br>css-loader:使你能够使用类似@import 和 url(…)的方法实现 require()的功能,获取css文件里面的样式<br>style-loader:将css样式插件js文件，与css-loader一起使用能够把样式表嵌入webpack打包后的JS文件中<br>autoprefixer-loader:自动添加前缀，使css文件更有兼容性<br>postcss-loader:css会自动根据Can i use里的数据添加不同前缀，可与autoprefixer-loader结合使用<br>ExtractTextPlugin.extract:将css单独打包成一个.css文件，使用这个插件，需要require 插件extract-text-webpack-plugin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">//配置代码：</div><div class="line">1.</div><div class="line"> module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.css$/,</div><div class="line">        include: [</div><div class="line">          path.join(__dirname, &apos;./src&apos;)</div><div class="line">        ],</div><div class="line">        use: [&apos;style-loader&apos;, &apos;css-loader&apos;]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">2.</div><div class="line">module: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      test: /\.css$/,</div><div class="line">      include: [</div><div class="line">       path.join(__dirname, &apos;./src&apos;),</div><div class="line">      ],</div><div class="line">      use: ExtractTextPlugin.extract(&#123;</div><div class="line">        fallback: &apos;style-loader&apos;,</div><div class="line">        use: &apos;css-loader&apos;</div><div class="line">      &#125;)</div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">plugins: [</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;)</div><div class="line">  ]</div><div class="line">3.</div><div class="line">module: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      test: /\.css$/,</div><div class="line">      include: [</div><div class="line">       path.join(__dirname, &apos;./src&apos;)</div><div class="line">      ],</div><div class="line">      use: ExtractTextPlugin.extract(&#123;</div><div class="line">        fallback: &apos;style-loader&apos;,</div><div class="line">        use: [&apos;css-loader&apos;, &apos;autoprefixer-loader&apos;]</div><div class="line">      &#125;)</div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;)</div><div class="line">  ]</div></pre></td></tr></table></figure></p>
<p>5.配置插件plugin<br>插件目的在于解决 loader 无法实现的其他事,配置插件都在plugin数组中，数组每一项就是new一个plugin,插件的配置也在new时以参数形式传递进去<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">    new CommonsChunkPlugin(&#123;</div><div class="line">      name: &apos;commons&apos;,</div><div class="line">      filename: &apos;commons.js&apos;</div><div class="line">    &#125;),</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;)</div><div class="line">  ]</div></pre></td></tr></table></figure></p>
<p>常用插件：<br>CommonsChunkPlugin：将多个文件通用的东西打包成一个文件<br>webpack.optimize.CommonsChunkPlugin：require(‘webpack’),使用webpack的optimize.CommonsChunkPlugin将打包的文件转化为公共文件<br>HtmlWebpackPlugin：是依据一个简单的index.html模板，生成一个自动引用你打包后的JS文件的新index.html。这在每次生成的js文件名称不同时非常有用（比如添加了hash值）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var path = require(&apos;path&apos;)</div><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  context: path.join(__dirname, &apos;./src&apos;),</div><div class="line">  entry: &#123;</div><div class="line">    app: &apos;./&apos;,</div><div class="line">    vendor: [&apos;jquery&apos;, &apos;underscore&apos;],//将文件中require的&apos;jquery&apos;, &apos;underscore&apos;打包成公共文件vendor.bundle.js</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.join(__dirname, &apos;dist&apos;),</div><div class="line">    filename: &apos;bundle.js&apos;</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      name: &apos;vendor&apos;,</div><div class="line">      filename: &apos;vendor.bundle.js&apos;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">入门Webpack</a></p>
<h1 id="写一个webpack-的loader"><a href="#写一个webpack-的loader" class="headerlink" title="写一个webpack 的loader"></a>写一个webpack 的loader</h1><p><a href="https://webpack.js.org/development/how-to-write-a-loader/" target="_blank" rel="external">How to write a loader</a><br><a href="https://webpack.js.org/api/loaders/" target="_blank" rel="external">loader API</a></p>
<h1 id="写一个webpack-的plugin"><a href="#写一个webpack-的plugin" class="headerlink" title="写一个webpack 的plugin"></a>写一个webpack 的plugin</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;1.webpack工作内容&lt;br&gt;Webpack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于HTTP</title>
    <link href="http://yoohannah.github.io/post/knowledge/http.html"/>
    <id>http://yoohannah.github.io/post/knowledge/http.html</id>
    <published>2017-10-05T14:53:37.000Z</published>
    <updated>2017-10-06T08:58:11.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在浏览器的地址栏输入url后发生了什么"><a href="#在浏览器的地址栏输入url后发生了什么" class="headerlink" title="在浏览器的地址栏输入url后发生了什么"></a>在浏览器的地址栏输入url后发生了什么</h1><p> 粗略的回答的话，就是浏览器向服务器发送该url,浏览器根据该url找到相应的资源，再把资源返回给浏览器，即使我们看到的页面内容<br> 细致的回答的话，浏览器会在应用层利用DNS协议解析域名生成ip地址，利用http协议生成一个http请求然后传递给传输层，传输层将根据TCP协议将这个http请求报文进行分割并打上序号标记、端口号和三次握手标志后转发给网络层，网络层会利用ARP协议根据ip地址查到MAC地址,IP协议对数据封装MAC地址等信息，将打包好的数据包发送给链路层再封装然后发送出去，经过一系列转发，忽略路由、CDN的缓存策略，中转到达服务器后,服务器再按链路层，网路层，传输层，应用层的顺序，从下到上依次解封数据信息，找到资源后，同样分割，封装打包再传给客户端浏览器。</p>
<h1 id="关于-TCP-IP-协议"><a href="#关于-TCP-IP-协议" class="headerlink" title="关于 TCP/IP 协议"></a>关于 TCP/IP 协议</h1><p>1.不同的硬件、操作系统之间的通信，所有这一切都需要一种规则，这种规则即协议<br>2.与互联网相关联的协议集合起来就是TCP/IP<br>3.http协议是TCP/IP协议的一个子集<br>4.URI(统一资源标识符)，用字符串标识某一互联网资源，而url表示资源的地点</p>
<h2 id="分层管理"><a href="#分层管理" class="headerlink" title="分层管理"></a>分层管理</h2><p>好处:局部改变设计，只需把变动的层替换，无需整体替换<br>应用层：应用服务间通信，如FTP,DNS服务，应用http协议<br>传输层：网络连接中两台计算机之间数据传输，应用TCP和UDP协议<br>网络层：处理网络上流动的数据包，应用IP协议<br>链路层：处理连接网络的硬件之间通信，包括操作系统，硬件的设备驱动，光纤等。</p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>目的在于确保准确无误的将数据送达目的地<br>TCP协议在封装数据时会封装SYN和ACK作为握手标识<br>发送端首先发送一个带SYN标识的数据包给对方，接收端收到后，回传一个带有SYN/ACK标识的数据包以示传达确认信息，最后，发送端再回传一个带ACK标识的数据包，代表‘握手’结束<br>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包</p>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>1.请求报文由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成<br>2.响应报文基本上由协议版本、状态码(表示请求成功或失败的数字代码)、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成<br>3.http是无状态协议，即不保存之前发送过的请求或响应<br>4.持久链接的特点：只要任意一端没有明确提出断开连接，则保持TCP连接状态，<br>旨在建立1次TCP连接后进行多次请求和响应的交互<br>5.管线化技术：在持久链接状态下，不用等待响应亦可直接发送下一个请求，实现并行发送多个请求<br>6.请求方法<br>GET:访问已被URI识别的资源,获取响应内容<br>POST：传输实体的主体<br>PUT：在请求报文主体中包含文件内容，然后保存到请求URI指定的位置，自身不带验证机制<br>HEAD:用于确认URI的有效性及资源更新的日期时间等<br>DELETE：按请求URI删除指定的资源，不带验证机制<br>OPTION：查询针对请求URI指定的资源支持的方法<br>TRACE: 将之前的请求通信环回给客户端,可以查询发送出去的请求是怎样被加工修改/篡改的，但容易引发XST攻击<br>CONNECT：在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL和TLS协议把通信内容加密后经网络隧道传输</p>
<h2 id="COOKIE状态管理"><a href="#COOKIE状态管理" class="headerlink" title="COOKIE状态管理"></a>COOKIE状态管理</h2><p>客户端在未携带cookie信息状态下请求服务器时，服务器会生成cookie，并记住是向谁发送的，然后在响应报文头中添加一个叫Set-Cookie的字段信息，通知客户端保存Cookie。<br>当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去<br>服务器端发现客户端发送过来的Cookie后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息.<br>7.报文由报文首部、空格和报文主体构成</p>
<p>请求报文的报文首部分为：请求行(请求方法,URI,HTTP版本)、请求首部字段、通用首部字段、实体首部字段、其他<br>响应报文的报文首部分为：状态行(状态码,原因短语,HTTP版本)、响应首部字段、通用首部字段、实体首部字段、其他</p>
<p>报文主体即传输请求或响应的实体主体</p>
<p>提升传输效率采取的方法：传输编码，对实体进行‘内容编码’，压缩传输内容，分块传输编码</p>
<p>发送不同类型数据时，需要首部字段Content-Type<br>请求报文的Content-Type赋值mulitipart/form-data,<br>响应报文的Content-Type赋值mulitipart/byteranges,</p>
<p>请求指定范围数据时，可以用首部字段Range指定资源的byte范围<br>例：请求开始到3000，和5000到7000字节的多重范围<br>Range:bytes=-3000,5000-7000<br>响应状态码会返回206，多重范围会在首部添加Content-Type：mulitipart/byteranges<br>如果服务器无法响应范围请求，则会返回状态码200OK和完整的实体内容</p>
<p>内容协商机制：客户端和服务端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。<br>内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准<br>对应首部字段有：Accept,Accept-Charset,Accept-Encoding,Accept-Language,Content-Language<br>内容协商技术有三类：<br>服务器驱动协商：以请求首部字段为参考，在服务器端自动处理<br>客户端驱动协商：用户在浏览器可选列表中手动选择<br>透明协商：前两者的结合体，由服务端和客户端各自进行内容协商的一种方法</p>
<p>8.状态码</p>
<p>1XX:请求正在处理<br>2XX:请求正常那个处理完毕<br>3XX：重定向，需要进行附加操作以完成请求，<br>4XX：服务器无法处理请求,客户端有错误发生<br>5XX：服务器处理请求出错</p>
<p>200 OK 客户端的请求在服务器被正常处理了<br>204 No Content ，正常处理，但响应不含实体<br>206 Partial Content  成功处理了范围请求，响应只含指定范围实体</p>
<p>301 Moved Permanently 永久重定向<br>302 Found 临时重定向<br>303 See Other 临时重定向，但只能使用get方法访问该资源<br>304 Not Modified 服务器没有找到符合客户端附带条件(If-Match,If-Range等报文首部)的资源，响应不含主体，与重定向无关,服务器告诉客户，原来缓冲的文档还可以继续使用<br>307 Temporary Redirect 临时重定向，按照浏览器标准不会从post变成GET。但浏览器不同，出现情况也可能不同</p>
<p>400 Bad Request 请求报文存在语法错误<br>401 Unauthorized 携带信息未通过HTTP认证，没有权限访问资源<br>403 Forbidden 请求的资源被服务器拒绝访问<br>404 Not Found 无法找到请求资源</p>
<p>500 Internal Server Error 服务器在执行请求时发生了错误，也可能是web应用存在bug或临时故障<br>503 Service Unavailable 服务器暂时处于超负载或正在进行停机维护</p>
<p>9.通信数据转发程序<br>代理：接收客户端请求并转发给源服务器，不改变URI,但在转发时会添加via首部<br>好处：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的等等<br>使用方法分两类：<br>1.是否使用缓存,例,缓存代理(预先将资源副本存在代理服务器上);<br>2.是否会修改报文,例,透明代理(对报文不做任何加工，反之非透明代理)</p>
<p>网关：转发其他服务器数据的服务器，接收从客户端发来的请求并对请求进行处理<br>好处：能使通信线路上服务器提供非HTTP协议服务，能提高通信安全性</p>
<p>隧道：在相隔甚远的客户端和服务器之间进行中转，并保持双方通信连接的应用程序<br>目的：确保客户端能与服务器进行安全的通信，通信双发断开连接时结束</p>
<p>缓存：代理服务器或客户端本地磁盘内保存的资源副本<br>目的：减少对源服务器的访问，从而节省通信流量和通信时间<br>机制：超过有效期之后，会向源服务器确认资源有效性，若判断缓存失效，则再次从源服务器上获取‘新’资源</p>
<p>10.首部字段<br>分两类：缓存代理和非缓存代理<br>缓存代理，即端到端首部，这类首部会被带到客户端或服务端，且会保存在缓存中<br>非缓存代理，即逐跳首部，只对单词转发有效，会因通过缓存或代理而不再转发</p>
<p>通用首部：客户端和服务端都会用的首部<br><img src="/image/header1.png" alt="header1"><br>请求首部<br><img src="/image/header2.png" alt="header2"><br>响应首部<br><img src="/image/header3.png" alt="header3"><br>实体首部<br><img src="/image/header4.png" alt="header4"><br>cookie 相关首部<br><img src="/image/header5.png" alt="header5"></p>
<h1 id="https"><a href="#https" class="headerlink" title="https"></a>https</h1><p>http缺点</p>
<p>1.通信使用明文(不加密)，内容可能会被窃听<br>造成原因：通信线路上的网络设备、光纤等不可能是个人私有物，不排除某个环节会遭到恶意窥视或窃听<br>解决办法：加密处理防止被窃听<br>方式一：通信加密，使用SSL和TLS建立安全通信线路，再在这条线路上进行HTTP通信<br>方式二：内容加密，对HTTP协议传输的内容本身加密，前提要求服务端和客户端都具备加密解密机制</p>
<p>2.不验证通信方的身份，因此可能遭遇伪装<br>造成原因：服务器不管谁发来的请求都会给一个响应，客户端不管是谁的响应都接收<br>解决办法：查明对方证书，证书由第三发颁发，通信前先确认对方证书,验证时要通信的双方后，再继续通信</p>
<p>3.无法证明报文完整性，所以有可能已遭篡改<br>中间人攻击：请求或响应在传输途中，遭攻击者拦截并篡改内容的攻击<br>造成原因：中间人攻击<br>解决办法：MD5和SHA-1等散列值校验的方法,以及用来确认文件的数字签名方法,但以上方法都需要用户本人自己验证</p>
<h2 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP+加密+认证+完整性保护 = HTTPS"></a>HTTP+加密+认证+完整性保护 = HTTPS</h2><p>HTTP通信接口部分用SSL和TLS协议代替，即不再是http与TCP通信，而是http和SSL再和TCP通信<br>共享/对称密钥加密：加密和解密用同一个密钥<br>公开密钥加密：<br>使用一对非对称的密钥,一把叫做私有密钥，另一把叫做公开密钥,<br>使用公开密钥进行加密发送密文，收信方收到信息后用私有密钥进行解密<br>公开密钥加密方式比共享密钥加密方式处理起来更麻烦</p>
<p>HTTPS混合加密：在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式<br>缺点：无法保证公开密钥本身是真正的公开密钥<br>解决办法：使用数字证书进行验证，客户端根据数字证书机构的公开密钥验证数字签名，从而验证服务器公开密钥<br><img src="/image/header6.png" alt="header6"><br>关于证书：<br>客户端证书一般由银行等特殊业务颁发，因为客户端证书需要费用支出<br>自签名证书无法保证通信真实性<br>中级认证机构的证书可能变成自认证证书<br>HTTPS的安全通信机制<br><img src="/image/header7.png" alt="header7"><br><img src="/image/header8.png" alt="header8"><br>步骤12结束之后，客户端再发送TCP FIN报文来关闭与TCP的通信<br>缺点：<br>1.由于加密解密过程消耗大量CPU以及内存等资源，导致处理速度变慢<br>2.由于SSL通信部分消耗网络资源，处理通信部分又会消耗一定时间，因此相比http又会变慢<br>解决办法：使用SSL加速器以分担负载</p>
<p>不使用https原因：<br>1.客户端要考虑消耗cpu,内存资源，服务器端要考虑负载<br>2.购买证书需要开销</p>
<h1 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h1><p>方法有BASIC认证，DIGEST认证，SSL客户端认证，FormBase认证</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在浏览器的地址栏输入url后发生了什么&quot;&gt;&lt;a href=&quot;#在浏览器的地址栏输入url后发生了什么&quot; class=&quot;headerlink&quot; title=&quot;在浏览器的地址栏输入url后发生了什么&quot;&gt;&lt;/a&gt;在浏览器的地址栏输入url后发生了什么&lt;/h1&gt;&lt;p&gt; 粗
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>关于promise</title>
    <link href="http://yoohannah.github.io/post/knowledge/promise.html"/>
    <id>http://yoohannah.github.io/post/knowledge/promise.html</id>
    <published>2017-08-31T14:19:37.000Z</published>
    <updated>2017-08-31T14:47:04.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><p>Promise 是异步编程的一种解决方案</p>
<h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  // ... some code</div><div class="line"></div><div class="line">  if (/* 异步操作成功 */)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; else &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise</div><div class="line">.then(function(value) &#123;      //resolve(value);回调函数</div><div class="line">  // success</div><div class="line">&#125;, function(error) &#123;         // reject(error);回调函数</div><div class="line">  // failure</div><div class="line">&#125;)</div><div class="line">.catch(function(error) &#123;</div><div class="line">  // 处理 getJSON 和 前一个回调函数运行时发生的错误</div><div class="line">  console.log(&apos;发生错误！&apos;, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>1、Promise对象是一个构造函数,用来生成Promise实例,<br>2、Promise构造函数的参数是一个函数,该函数有两个参数,分别是两个函数:resolve和 reject<br>3、resolve函数在promise对象状态从Pending变为Fulfiled时调用,即异步操作成功的时候调用,参数一般为获取的结果，方便回调函数使用，或者另一个promise实例,继续进行回调<br>   reject函数在promise对象状态从Pending变为Rejected时调用,即异步操作失败的时候调用，参数一般为错误Error对象,报出错误<br>4、Promise实例生成以后，可以用then方法分别指定Resolved状态和Rejected状态的回调函数<br>5、then方法有两个参数，均为匿名函数，第一个匿名函数为resolve()的定义,第二个参数为reject()的定义<br>6、Promise对象状态变为Resolved，则会调用then方法指定的回调函数;如果异步操作抛出错误,状态就会变为Rejected,就会调用catch方法指定的回调函数,处理这个错误。<br>   另外,then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获。<br>   注意,如果then方法定义了reject(),将不会再调用catch方法,如果then里面没有reject，发生错误时将会调用catch</p>
<h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><p>1.then方法会在与promise同步的任务完成之后再执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">let promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  console.log(&apos;Promise&apos;);</div><div class="line">  resolve();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(function() &#123;</div><div class="line">  console.log(&apos;Resolved.&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">console.log(&apos;Hi!&apos;);</div><div class="line">//打印顺序</div><div class="line">&quot;Promise&quot;</div><div class="line">&quot;Hi!&quot;</div><div class="line">&quot;Resolved.&quot;</div></pre></td></tr></table></figure></p>
<p>Promise 新建后立即执行，所以首先输出的是Promise。然后,then方法指定的回调函数,将在当前脚本所有同步任务执行完才会执行,所以Resolved最后输出。</p>
<p>2、如果Promise1的resolved返回另一个promise2,那Promise1的then会根据promise2的状态决定执行reject还是resolved<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise(function (resolve, reject) &#123;</div><div class="line">  setTimeout(() =&gt; reject(new Error(&apos;fail&apos;)), 3000)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var p2 = new Promise(function (resolve, reject) &#123;</div><div class="line">  setTimeout(() =&gt; resolve(p1), 1000)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">p2</div><div class="line">  .then(result =&gt; console.log(result))</div><div class="line">  .catch(error =&gt; console.log(error))</div><div class="line">// Error: fail</div></pre></td></tr></table></figure></p>
<p>上面代码中，p1是一个Promise，3秒之后变为rejected。p2的状态在1秒之后改变，resolve方法返回的是p1。由于p2返回的是另一个 Promise，导致p2自己的状态无效了，由p1的状态决定p2的状态。所以，后面的then语句都变成针对后者（p1）。又过了2秒，p1变为rejected，导致触发catch方法指定的回调函数。</p>
<p>3、在Promise构造函数的参数函数里,在调用resolve()或reject()之后,仍会执行后续语句,但如果是抛错语句将不会执行,同样在抛错语句之后的resolve()调用也不会被执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  resolve(&apos;ok&apos;);</div><div class="line">  console.log(&apos;1111&apos;)</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value) &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(&apos;报错啦&apos;) &#125;);</div><div class="line">//1111</div><div class="line">//ok</div><div class="line">//因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务,所以会先打印1111,,再打印ok</div><div class="line"></div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  return resolve(&apos;ok&apos;);</div><div class="line">  console.log(&apos;1111&apos;)</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value) &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(&apos;报错啦&apos;) &#125;);</div><div class="line">//ok</div><div class="line">//return 方法阻止继续执行后续操作</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  resolve(&apos;ok&apos;);</div><div class="line">  throw new Error(&apos;test&apos;);</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value) &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(&apos;报错啦&apos;) &#125;);</div><div class="line">  //ok</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  throw new Error(&apos;test&apos;);</div><div class="line">  resolve(&apos;ok&apos;);</div><div class="line"></div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value) &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(&apos;报错啦&apos;) &#125;);</div><div class="line">//报错啦</div></pre></td></tr></table></figure></p>
<p>4、then方法会返回一个promise对象，因此可以继续在then函数后面加then函数,这时前面then函数应该会return一个结果值作为后面then函数的参数,<br>   前面then函数如果执行resolve()则后面then函数也会执行resolve(),前面then函数如果执行reject()则后面then函数也会执行reject(),<br>   但如果前面then函数return一个promise对象,那后面的then函数将会根据这个promise的执行结果去执行resolve()还是reject()<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject)&#123;</div><div class="line">    resolve(123)</div><div class="line">  &#125;);</div><div class="line">promise.then(function(json) &#123;</div><div class="line">  console.log(&apos;Contents: &apos; + json);</div><div class="line">  return 1223;</div><div class="line">&#125;, function(error) &#123;</div><div class="line">  console.error(&apos;出错了&apos;, error);</div><div class="line">  return &apos;2423&apos;</div><div class="line">&#125;)</div><div class="line">.then(function(val)&#123;</div><div class="line">  console.log(val);</div><div class="line">&#125;,function(val)&#123;</div><div class="line">  console.log(val)</div><div class="line">&#125;);</div><div class="line">//&quot;Contents: 123&quot;</div><div class="line">//1223</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject)&#123;</div><div class="line">    reject(456)</div><div class="line">  &#125;);</div><div class="line">promise.then(function(json) &#123;</div><div class="line">  console.log(&apos;Contents: &apos; + json);</div><div class="line">  return 1223;</div><div class="line">&#125;, function(val,error) &#123;</div><div class="line">  console.log(val);</div><div class="line">  console.error(&apos;出错了&apos;, error);</div><div class="line">  return &apos;2423&apos;</div><div class="line">&#125;)</div><div class="line">.then(function(val)&#123;</div><div class="line">  console.log(val);</div><div class="line">&#125;,function(val)&#123;</div><div class="line">  console.log(val)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//456</div><div class="line">//&quot;出错了&quot;</div><div class="line">//&quot;2423&quot;</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject)&#123;</div><div class="line">//     resolve(123)</div><div class="line">    reject(456)</div><div class="line">  &#125;);</div><div class="line">var promise1 = new Promise(function(resolve, reject)&#123;</div><div class="line">    resolve(789)</div><div class="line">  &#125;);</div><div class="line">promise.then(function(json) &#123;</div><div class="line">  console.log(&apos;Contents: &apos; + json);</div><div class="line">  return 1223;</div><div class="line">&#125;, function(val,error) &#123;</div><div class="line">  console.log(val);</div><div class="line">  console.error(&apos;出错了&apos;, error);</div><div class="line">  return promise1</div><div class="line">&#125;)</div><div class="line">.then(function(val)&#123;</div><div class="line">  console.log(111+val);</div><div class="line">&#125;,function(val)&#123;</div><div class="line">  console.log(222+val)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//456</div><div class="line">//&quot;出错了&quot;</div><div class="line">//900</div></pre></td></tr></table></figure></p>
<p>then 方法链式调用箭头函数格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">promise.then(</div><div class="line">  param1 =&gt; &#123;&#125;</div><div class="line">).then(</div><div class="line">  param2 =&gt; &#123;&#125;,</div><div class="line">  err =&gt; &#123;&#125;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>5、promise 如果发生了错误,无论reject()或者catch在哪一层，会一直向后传递，直到被捕获为止，即遇到reject()或者catch就会抛出来,如果后续所有回调函数中都没有reject()或者catch,错误就不会被抛出来<br>  catch方法会返回一个promise,所以可以继续写then(),catch()抛完错之后会继续执行后面这个then()<br>  catch()里面还可以再抛错，如果catch后面没有reject()或者catch()，错误将不会被抛出来<br>  如果catch之前的promise没有遇到错误,catch之后又有then(),则执行流程会跳过catch,继续执行catch后面的then<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  throw new Error(&apos;test&apos;);</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value); return &apos;2&apos;&#125;, function() &#123; //捕获test</div><div class="line">  throw new Error(&apos;test1&apos;);</div><div class="line">&#125;)</div><div class="line">  .then(function(value) &#123; console.log(value);return &apos;3&apos; &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(error);return &apos;4&apos;&#125;) //捕获test1</div><div class="line">  .then(function(value) &#123; console.log(value); &#125;) //4</div><div class="line"></div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  resolve(&apos;1&apos;)</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value); return &apos;2&apos;&#125;, function() &#123; //1</div><div class="line">  throw new Error(&apos;test1&apos;);</div><div class="line">&#125;)</div><div class="line">  .then(function(value) &#123; console.log(value);return &apos;3&apos; &#125;)//2</div><div class="line">  .catch(function(error) &#123; console.log(error) return &apos;4&apos;&#125;)</div><div class="line">  .then(function(value) &#123; console.log(value); &#125;)//3 没遇到错误直接跳过来</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  throw new Error(&apos;test&apos;);</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value); return &apos;2&apos;&#125;, function(error) &#123; //捕获test</div><div class="line">  console.log(error)</div><div class="line">  throw new Error(&apos;test1&apos;);</div><div class="line">&#125;)</div><div class="line">  .then(function(value) &#123; console.log(value);return &apos;3&apos; &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(error);throw new Error(&apos;test2&apos;); return &apos;4&apos;&#125;) //捕获test1</div><div class="line">  .then(function(value) &#123; console.log(value); &#125;,function(error)&#123;</div><div class="line">   console.log(error)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>用于将多个 Promise 实例，包装成一个新的 Promise 实例<br>var p = Promise.all([p1, p2, p3])<br>p的状态由p1、p2、p3决定，分成两种情况。<br>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>
<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>将多个Promise实例，包装成一个新的Promise实例<br>var p = Promise.race([p1, p2, p3]);<br>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数</p>
<h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h2><p>将现有对象转为Promise对象<br>var Promise = Promise.resolve(参数);</p>
<h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h2><p>返回一个新的 Promise 实例，该实例的状态为rejected。<br>var p = Promise.reject(‘出错了’);<br>Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数</p>
<h2 id="done-finally"><a href="#done-finally" class="headerlink" title="done finally"></a>done finally</h2><p>done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误，没有参数<br>finally方法用于指定不管Promise对象最后状态如何，都会执行的操作<br>可以接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; class=&quot;headerlink&quot; title=&quot;promise&quot;&gt;&lt;/a&gt;promise&lt;/h1&gt;&lt;p&gt;Promise 是异步编程的一种解决方案&lt;/p&gt;
&lt;h1 id=&quot;简单使用&quot;&gt;&lt;a href=&quot;#简
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>对象构造和继承</title>
    <link href="http://yoohannah.github.io/post/knowledge/obj.html"/>
    <id>http://yoohannah.github.io/post/knowledge/obj.html</id>
    <published>2017-08-19T01:56:37.000Z</published>
    <updated>2017-08-31T14:47:22.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象特性"><a href="#对象特性" class="headerlink" title="对象特性"></a>对象特性</h1><p>对象的属性在定义时，都带有一些特征值，js通过这些特征值定义他们的行为<br>这些特征值描述对象属性的各种特征,成为对象属性的特性<br>特性是内部值,放在两对方括号中访问<br>特性分为数据属性和访问器属性<br>数据属性：Configurable、Enumerable、Writable、Value<br>访问器属性：Configurable、Enumerable、Get、Set<br>定义某个属性的特性：Object.defineProperty(对象名,对象属性名,{特性1：值,特性2：值…})<br>定义多个属性特性:Object.defineProperties(对象名,{属性1：{特性1：值,特性2：值…},属性2：{特性1:值….}})<br>读取属性:Object.getOwnPropertyDescriptor(对象名,属性名) 返回一个对象</p>
<h1 id="构造对象"><a href="#构造对象" class="headerlink" title="构造对象"></a>构造对象</h1><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  var o=new Object();</div><div class="line">  o.name = name;</div><div class="line">  o.age = age;</div><div class="line">  o.sayName = function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;;</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line">var person1 = createobj(&apos;gray&apos;,25);</div><div class="line">var person2 = createobj(&apos;black&apos;,26);</div><div class="line">person1.sayName()//gray</div><div class="line">person2.sayName()//black</div><div class="line">console.log(typeof person1)//object</div><div class="line">console.log(person1 instanceof createobj) //false</div></pre></td></tr></table></figure>
<p>缺点：无法识别对象类型</p>
<h2 id="寄生构造函数"><a href="#寄生构造函数" class="headerlink" title="寄生构造函数"></a>寄生构造函数</h2><p>定义样子同工厂模式,只不过创建实例时用new 操作符<br>将包装函数叫做 构造函数<br>实例与构造函数及其原型没有关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;  //构造函数</div><div class="line">  var o=new Object();</div><div class="line">  o.name = name;</div><div class="line">  o.age = age;</div><div class="line">  o.sayName = function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;;</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line">var person1 = new createobj(&apos;gray&apos;,25);</div><div class="line">person1.sayName()//gray</div><div class="line">console.log(person1 instanceof createobj) //false</div><div class="line">console.log(person1 instanceof Object) //true</div></pre></td></tr></table></figure></p>
<p>应用:为无法修改构造函数的对象添加方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//给数组增加特殊方法</div><div class="line">function specialArray()&#123;</div><div class="line">  var values = new Array();</div><div class="line">  values.push.apply(values,arguments);</div><div class="line">  values.toPiedString = function(str)&#123; //特殊方法</div><div class="line">    return this.join(str);</div><div class="line">  &#125;;</div><div class="line">  return values;</div><div class="line">&#125;</div><div class="line">var colors = new specialArray(&apos;red&apos;,&apos;blue&apos;);</div><div class="line">console.log(colors.toPiedString(&apos;|&apos;));//&quot;red|blue&quot;</div></pre></td></tr></table></figure></p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">  this.sayName = function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">var person1 = new createobj(&apos;gray&apos;,25);</div><div class="line">person1.sayName(); //gray</div><div class="line"></div><div class="line">console.log(person1 instanceof createobj)//true</div><div class="line">console.log(person1 instanceof Object)//true</div><div class="line"></div><div class="line">console.log(window.name)//&apos;&apos;</div><div class="line">var person2 = createobj(&apos;black&apos;,26);</div><div class="line">console.log(person2) //undefined</div><div class="line">console.log(window.name) //black</div><div class="line">console.log(person1.sayName == window.sayName)//false</div><div class="line"></div><div class="line">var person3 = new createobj(&apos;orange&apos;,25);</div><div class="line">console.log(person1.sayName == person3.sayName)//false</div><div class="line"></div><div class="line">console.log(person1.constructor == createobj)//true</div><div class="line">console.log(person3.constructor == person1.constructor)//true</div></pre></td></tr></table></figure>
<p>1、构造函数的实例均指向构造函数。例：person1、person3的constructor均指向createobj)<br>2、不使用new 关键字调用构造函数,构造函数的方法和属性会挂到window上面。例：person2<br>3、定义在构造函数上的方法,创建不同实例后,不同实例各自拥有自己的该方法,不同实例之间构造函数方法不相等,不共享</p>
<p>使用构造函数创建对象,如果相让对象方法在不同实例实现共享,则在定义方法时，采用引用函数的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">  this.sayName = sayName;</div><div class="line">&#125;</div><div class="line">function sayName()&#123;</div><div class="line">   console.log(this.name)</div><div class="line">&#125;</div><div class="line">var person1 = new createobj(&apos;gray&apos;,25);</div><div class="line">var person3 = new createobj(&apos;orange&apos;,25);</div><div class="line">console.log(person1.sayName == person3.sayName)//true</div></pre></td></tr></table></figure></p>
<p>缺点:若对象需要定义多个方法则需要创建多个全局函数供构造函数引用,失去封装性</p>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>在对象的prototype中定义的属性和方法,可以在所有实例中共享<br>定义方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;&#125;</div><div class="line">createobj.prototype.name = &apos;black&apos;;</div><div class="line">createobj.prototype.age = 26;</div><div class="line">createobj.prototype.sayName = function()&#123;</div><div class="line">   console.log(this.name)</div><div class="line">&#125;</div><div class="line">var person1 = new createobj();</div><div class="line">var person2 = new createobj();</div><div class="line">person1.sayName();//black</div><div class="line">person2.sayName();//black</div><div class="line">console.log(person1.sayName == person2.sayName)//true</div><div class="line"></div><div class="line">console.log(person1.constructor == createobj)//true</div><div class="line">console.log(person2.constructor == person1.constructor)//true</div><div class="line"></div><div class="line"></div><div class="line">console.log(person1.age)   //26 来自原型</div><div class="line">person1.age = 27;          //相当于创建了一个实例属性</div><div class="line">console.log(person1.age)   //27 来自实例属性</div><div class="line">console.log(person2.age)   //26 来自原型</div><div class="line">delete person1.age;        //删除实例属性</div><div class="line">console.log(person1.age)   //26 来自原型</div><div class="line">delete person1.age;        //不能删除原型属性</div><div class="line">console.log(person1.age)   //26</div><div class="line">console.log(person2.age)   //26</div><div class="line"></div><div class="line">console.log(person1 == createobj.prototype)//false</div><div class="line">console.log(person1.prototype == createobj.prototype)//false</div><div class="line">console.log(createobj.prototype.isPrototypeOf(person1))//true</div><div class="line">console.log(person1.prototype) //undefined</div><div class="line">console.log(Object.getPrototypeOf(person1));//createobj.prototype</div><div class="line"></div><div class="line">console.log(person1.hasOwnProperty(&apos;name&apos;));//false</div><div class="line">console.log(&apos;name&apos; in person1);//true</div><div class="line">console.log(Object.keys(createobj.prototype));//[&quot;name&quot;, &quot;age&quot;, &quot;sayName&quot;]</div><div class="line">console.log(Object.getOwnPropertyNames(createobj.prototype));//[&quot;constructor&quot;, &quot;name&quot;, &quot;age&quot;, &quot;sayName&quot;]</div></pre></td></tr></table></figure></p>
<p><img src="/image/obj1.png" alt="obj1"><br>1、实例的内部指针[[Prototype]] 会指向构造函数的原型对象,它是不能直接访问的<br>2、构造函数的prototype也会指向构造函数的原型对象,但他是构造函数的一个属性，可以直接访问<br>3、Object.getPrototypeOf(实例名); 返回实例的原型对象 .即[[Prototype]]指向的对象<br>4、实例名.hasOwnProperty(属性名字符串) ; 只检查实例的实例属性中是否有该属性,没有的话,返回false,可用于检查该属性在实例属性中，还是在原型属性中<br>5、在获取属性值时，实例属性中有该属性就取该实例属性的值,没有则用原型属性值,原型属性也没有的话则返回undefined<br>6、实例属性可用delete删除,实例无法更改原型属性的值<br>7、属性名字符串 in 实例名; 检查实例和原型所有属性中是否有该属性,有的话就返回true;for-in循环可枚举的属性,包括实例属性和原型属性<br>8、Object.keys(对象名);返回对象可枚举属性的字符串数组<br>9、Object.getOwnPropertyNames(对象名);返回所有对象的实例属性,无论它是否枚举</p>
<p>定义方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function createobj()&#123;&#125;</div><div class="line">createobj.prototype=&#123;</div><div class="line">  name:&apos;seven&apos;,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person1 = new createobj();</div><div class="line">person1.sayName();//seven</div><div class="line">console.log(person1.constructor == createobj);//false</div><div class="line">console.log(person1.constructor == createobj.prototype);//false</div><div class="line">console.log(person1.constructor == Object);//true</div><div class="line">console.log(person1.constructor == createobj.prototype.constructor);//true</div><div class="line">console.log(person1.constructor);//function object()&#123;&#125;</div><div class="line"></div><div class="line">console.log(person1 instanceof Object);//true</div><div class="line">console.log(person1 instanceof createobj);//true</div></pre></td></tr></table></figure></p>
<p>1、将挂在构造函数原型上的属性以一个对象的形式，一起赋给构造函数原型,即构造函数原型被赋值为一个对象<br>2、构造函数原型被Object创建,实例、构造函数的原型对象的构造函数为Object对象<br>3、若在定义原型对象时,指定原型对象的constructor,则对象实例的constructor也会跟着指到相应的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function createobj()&#123;&#125;</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj, //明确指出,同时特性的枚举属性会被设置为true,默认为false</div><div class="line">  name:&apos;seven&apos;,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person1 = new createobj();</div><div class="line">person1.sayName();//seven</div><div class="line">console.log(person1.constructor == createobj);//true</div><div class="line">console.log(person1.constructor == createobj.prototype);//false</div><div class="line">console.log(person1.constructor == Object);//false</div><div class="line">console.log(person1.constructor == createobj.prototype.constructor);//true</div><div class="line">console.log(person1.constructor);//function createobj()&#123;&#125;</div><div class="line"></div><div class="line">console.log(person1 instanceof Object);//true</div><div class="line">console.log(person1 instanceof createobj);//true</div></pre></td></tr></table></figure></p>
<p>4、 实例中的指针指向原型，不指向构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function createobj()&#123;&#125;</div><div class="line"></div><div class="line">var person1 = new createobj();</div><div class="line">console.log(person1 instanceof createobj);//true</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj,</div><div class="line">  name:&apos;seven&apos;,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">//person1.sayName();//person1.sayName is not a function</div><div class="line">console.log(person1.constructor == createobj);//true</div><div class="line">console.log(person1.constructor == createobj.prototype);//false</div><div class="line">console.log(person1.constructor == Object);//false</div><div class="line">console.log(person1.constructor == createobj.prototype.constructor);//true</div><div class="line">console.log(person1.constructor);//function createobj()&#123;&#125;</div><div class="line"></div><div class="line">console.log(person1 instanceof Object);//true</div><div class="line">console.log(person1 instanceof createobj);//false</div></pre></td></tr></table></figure></p>
<p><img src="/image/obj2.png" alt="obj2"><br>对象生成实例后,再去重写构造函数的原型对象,会将构造函数的原型对象指向后来被赋的对象,<br>切断与旧的原型对象之间的关系，新的原型对象与实例没有任何关系,实例仍引用旧的原型对象</p>
<p>原型方法可用于修改添加原生对象的属性方法<br>缺点:在原型对象prototype中的属性方法全都共享,当更改一个实例中的属性值时,其他实例一起变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">//定义一</div><div class="line">function createobj(name,age)&#123;&#125;</div><div class="line">createobj.prototype.name = [1,2];</div><div class="line">createobj.prototype.sayName = function()&#123;</div><div class="line">   console.log(this.name)</div><div class="line">&#125;</div><div class="line">var person1 = new createobj();</div><div class="line">var person2 = new createobj();</div><div class="line">person1.sayName();//[1, 2]</div><div class="line">person2.sayName();//[1, 2]</div><div class="line">person1.name.push(3);</div><div class="line">person1.sayName();//[1, 2, 3]</div><div class="line">person2.sayName();//[1, 2, 3]</div><div class="line">//定义二</div><div class="line">function createobj()&#123;&#125;</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj,</div><div class="line">  name:[1,2],</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person1 = new createobj();</div><div class="line">var person2 = new createobj();</div><div class="line">console.log(person1.name)//[1, 2]</div><div class="line">console.log(person2.name)//[1, 2]</div><div class="line">person1.name.push(3);</div><div class="line">console.log(person1.name)//[1, 2, 3]</div><div class="line">console.log(person2.name)//[1, 2, 3]</div></pre></td></tr></table></figure></p>
<h2 id="构造函数-原型模式"><a href="#构造函数-原型模式" class="headerlink" title="构造函数+原型模式"></a>构造函数+原型模式</h2><p>构造函数定义实例属性，<br>原型模式定义方法和共享属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">  this.friends = [1,2];</div><div class="line">&#125;</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person1 = new createobj(&apos;halo&apos;,24);</div><div class="line">var person2 = new createobj(&apos;jack&apos;,25);</div><div class="line">person1.friends.push(3);</div><div class="line">console.log(person1.friends);//[1, 2, 3]</div><div class="line">console.log(person2.friends);//[1, 2]</div></pre></td></tr></table></figure></p>
<p>是用来定义引用类型的一种默认模式</p>
<h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">  if(typeof this.sayName !=&apos;function&apos;)&#123;</div><div class="line">    createobj.prototype.sayName = function()&#123;</div><div class="line">     console.log(this.name)</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var person1 = new createobj(&apos;halo&apos;,24);</div><div class="line">var person2 = new createobj(&apos;jack&apos;,26);</div><div class="line">person1.sayName();//halo</div><div class="line">person2.sayName();//jack</div><div class="line"></div><div class="line">//修改原型</div><div class="line">createobj.prototype.sayName = function()&#123;</div><div class="line">     console.log(&apos;111&apos;)</div><div class="line">  &#125;</div><div class="line">person1.sayName();//111</div><div class="line">person2.sayName();//111</div><div class="line"></div><div class="line">//使用字面方式重写</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(222)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person3 = new createobj(&apos;kitty&apos;,24);</div><div class="line">person1.sayName();//111</div><div class="line">person2.sayName();//111</div><div class="line">person3.sayName();//222</div><div class="line">console.log(person1.prototype);//undefined</div><div class="line"></div><div class="line">//重写一个原型方法</div><div class="line">person1.sayName=function()&#123;</div><div class="line">  console.log(&apos;333&apos;);</div><div class="line">&#125;</div><div class="line">person1.sayName();//333</div><div class="line">person2.sayName();//111</div></pre></td></tr></table></figure>
<p>1、判断sayName函数是否存在的语句，只会在初次调用构造函数的时候运行，即第一次创建实例的时候运行，<br>  运行过后，构造函数原型中就会存在sayName函数，即完成初始化，之后就不会在运行<br>2、对原型模式定义的方法属性能够在所有实例中立即得到放映<br>3、如果对构造函数原型使用字面方式重写，将切断已有实例与构造函数原型的联系，<br>   已有实例会指向就原型对象，新建实例会指向新原型对象<br>4、在一个实例中重写一个原型方法，不会影响原型对象方法，其他实例和新建实例仍会调用原型对象方法</p>
<h2 id="稳妥构造函数"><a href="#稳妥构造函数" class="headerlink" title="稳妥构造函数"></a>稳妥构造函数</h2><p>创建对象的实例方法，不使用this<br>不使用new调用构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;  //构造函数</div><div class="line">  var o=new Object();</div><div class="line">  o.name = name;</div><div class="line">  o.age = age;</div><div class="line">  o.sayName = function()&#123;</div><div class="line">    console.log(this.name)；</div><div class="line">    console.log(this == o) </div><div class="line">  &#125;;</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line">var person1 = createobj(&apos;gray&apos;,25);</div><div class="line">person1.sayName()//gray true</div><div class="line"></div><div class="line">console.log(person1 instanceof createobj) //false</div></pre></td></tr></table></figure></p>
<p>只用通过sayName函数访问传入到构造函数中的原始成员</p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="实例原型链模式"><a href="#实例原型链模式" class="headerlink" title="实例原型链模式"></a>实例原型链模式</h2><p>继承函数的原型被赋值为祖先函数的实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//祖先函数</div><div class="line">function Superfn()&#123;</div><div class="line">  this.pro = true;</div><div class="line">  this.color = [1,2];</div><div class="line">  this.getsuper = function()&#123;</div><div class="line">    console.log(&apos;aaa&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Superfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;bbb&apos;);</div><div class="line">&#125;</div><div class="line">//继承函数</div><div class="line">function Subfn()&#123;</div><div class="line">  this.subpro = false;</div><div class="line">  this.getsuper = function()&#123;</div><div class="line">    console.log(&apos;000&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Subfn.prototype = new Superfn();</div><div class="line">Subfn.prototype.getsuper = function()&#123;</div><div class="line">    console.log(&apos;ccc&apos;)</div><div class="line">  &#125;</div><div class="line">var ins = new Subfn();</div><div class="line">ins.getsuper();</div><div class="line"></div><div class="line">console.log(ins instanceof Object); //true</div><div class="line">console.log(ins instanceof Superfn); //true</div><div class="line">console.log(ins instanceof Subfn); //true</div><div class="line">console.log(Object.prototype.isPrototypeOf(ins)); //true</div><div class="line">console.log(Superfn.prototype.isPrototypeOf(ins)); //true</div><div class="line">console.log(Subfn.prototype.isPrototypeOf(ins)); //true</div><div class="line"></div><div class="line">var ins1 = new Subfn();</div><div class="line">console.log(ins.color)//[1,2]</div><div class="line">console.log(ins1.color)//[1,2]</div><div class="line">ins1.color.push(4);</div><div class="line">console.log(ins.color)//[1,2,4]</div><div class="line">console.log(ins1.color)//[1,2,4]</div></pre></td></tr></table></figure></p>
<p>1.继承函数实例的属性/方法调用顺序：<br>自己定义的-&gt;继承函数实例-&gt;继承函数prototype-&gt;祖先函数实例属性-&gt;祖先函数prototype<br>2.因为所有引用类型默认继承object,所以调用toString等方法时，其实调用的的是object的prototype<br>3.重写原型中祖先函数的方法,一定要在继承函数原型被赋值祖先函数实例之后，相当于用实例方法覆盖原型方法<br>但注意不能用字面量方法重写继承函数原型,这样会导致继承函数原型重新指向新对象，切断与祖先函数联系<br>4.因为继承函数prototype指向祖先函数实例时,祖先函数所有属性相当于继承函数prototype属性，<br>构造函数原型的属性会被所有实例共享，所以创建继承函数实例时,<br>不能像祖先函数的构造函数中传递参数,因为会导致其他实例同时共享这些参数导致的后果</p>
<h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><p>使用apply()或者call()方法。在继承函数构造函数中调用祖先函数构造函数，这样，<br>在new 一个继承函数实例时，就会去执行祖先函数中所有对象初始化代码，每个实例都会具有自己的祖先函数属性的副本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">function Superfn(time)&#123;</div><div class="line">  this.color = [1,2];</div><div class="line">  this.time = time;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Superfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;bbb&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Subfn()&#123;</div><div class="line">  Superfn.call(this,&apos;11:23:30&apos;);</div><div class="line">  this.age = 29;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var ins = new Subfn();</div><div class="line">var ins1 = new Subfn();</div><div class="line">console.log(ins.color) //[1, 2]</div><div class="line">console.log(ins1.color)//[1, 2]</div><div class="line">ins1.color.push(4);</div><div class="line">console.log(ins.color)//[1, 2]</div><div class="line">console.log(ins1.color)//[1, 2, 4]</div><div class="line"></div><div class="line">console.log(ins.time);//&quot;11:23:30&quot;</div><div class="line">console.log(ins.age);//29</div><div class="line"></div><div class="line">ins.getsuper();//ins.getsuper is not a function</div></pre></td></tr></table></figure></p>
<p>1、可以像祖先函数构造函数中传递参数；<br>2、定义继承函数自己的属性必须放在调用祖先函数之后，防止祖先函数重写继承函数属性<br>缺点： 所有的属性只能使用构造函数模式定义，而且,继承函数实例，不能调用祖先函数原型上的方法</p>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>在继承函数构造函数中调用祖先函数，实现属性继承<br>将继承函数的原型赋值为祖先函数实例，实现方法复制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function Superfn(time)&#123;</div><div class="line">  this.color = [1,2];</div><div class="line">  this.time = time;</div><div class="line">&#125;</div><div class="line">Superfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;bbb&apos;);</div><div class="line">&#125;</div><div class="line">function Subfn()&#123;</div><div class="line">  Superfn.call(this,&apos;11:23:30&apos;);</div><div class="line">  this.age = 29;</div><div class="line">&#125;</div><div class="line">Subfn.prototype= new Superfn();</div><div class="line">var ins = new Subfn();</div><div class="line">var ins1 = new Subfn();</div><div class="line">console.log(ins.color)</div><div class="line">console.log(ins1.color)</div><div class="line">ins1.color.push(4);</div><div class="line">console.log(ins.color)</div><div class="line">console.log(ins1.color)</div><div class="line"></div><div class="line">console.log(ins.time);//&quot;11:23:30&quot;</div><div class="line">console.log(ins.age);//29</div><div class="line"></div><div class="line">ins.getsuper();//bbb</div></pre></td></tr></table></figure></p>
<p>缺点：调用了两次Superfn()，初始化时，Subfn.prototype中的Superfn的实例属性会被构造函数中创建的Superfn的实例属性覆盖，<br>重复创建，没必要</p>
<h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><p>Object.creat()方法原理像如下函数<br>function object(o){<br>    function F(){<br>      F.prototype = o;<br>    }<br>  return new F();<br>}<br>原型式继承 即使用Object.creat(祖先对象)定义实例,实例会共享祖先对象属性方法，通过添加第二个参数，覆盖祖先对象属性，或新增属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Superfn=&#123;</div><div class="line">  color:[&apos;red&apos;,&apos;green&apos;],</div><div class="line">  getsuper:function()&#123;</div><div class="line">  console.log(222);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var test = Object.create(Superfn,&#123;getsuper:&#123;value:function()&#123;console.log(111)&#125;&#125;&#125;);</div><div class="line">var test1 = Object.create(Superfn,&#123;color:&#123;value:[1,2]&#125;,name:&#123;value:&apos;jack&apos;&#125;&#125;);</div><div class="line">console.log(test.color);//[&apos;red&apos;,&apos;green&apos;]</div><div class="line">console.log(test1.color,test1.name); //[1,2] jack</div><div class="line">console.log(test.name);//undefined</div><div class="line">test.getsuper(); //111</div><div class="line">test1.getsuper();//222</div></pre></td></tr></table></figure></p>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function createAnthoer(oriobj)&#123;</div><div class="line">  var clone = Object(oriobj);//创建oriobj对象副本</div><div class="line">  clone.sayHi=function()&#123;//以某种方式增强这个对象，例如定义自己的方法</div><div class="line">    console.log(&apos;hi&apos;)</div><div class="line">  &#125;</div><div class="line">  return clone;</div><div class="line">&#125;</div><div class="line">var Superfn=&#123;</div><div class="line">  color:[&apos;red&apos;,&apos;green&apos;],</div><div class="line">&#125;</div><div class="line">var test = createAnthoer(Superfn);</div><div class="line">test.sayHi()//hi</div><div class="line">console.log(test.color);//[&quot;red&quot;, &quot;green&quot;]</div></pre></td></tr></table></figure>
<h2 id="最理想继承-寄生组合式继承"><a href="#最理想继承-寄生组合式继承" class="headerlink" title="最理想继承-寄生组合式继承"></a>最理想继承-寄生组合式继承</h2><p>对比组合式继承<br>仅调用一次superfn函数，避免在Subfn.prototype中创建多余superfn实例属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function inhertPrototype(subfn,superfn)&#123;</div><div class="line">  var prototype = Object(superfn.prototype);//创建对象 ，仅继承祖先函数原型</div><div class="line">  prototype.constructor = subfn;//增强对象</div><div class="line">  subfn.prototype = prototype;//指定对象</div><div class="line">&#125;</div><div class="line">function Superfn(name)&#123;</div><div class="line">  this.color = [1,2];</div><div class="line">  this.name = name;</div><div class="line">&#125;</div><div class="line">Superfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;bbb&apos;);</div><div class="line">&#125;</div><div class="line">function Subfn(name,age)&#123;</div><div class="line">  Superfn.call(this,name); //仅继承祖先函数实例属性，不会继承祖先函数原型</div><div class="line">  this.age = age;</div><div class="line">&#125;</div><div class="line">Subfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;ccc&apos;);</div><div class="line">&#125;</div><div class="line">inhertPrototype(subfn,superfn);</div></pre></td></tr></table></figure></p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类的定义相当于es5 对象构造函数的另一种写法，一种新语法<br>es5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面<br>es6 类的继承，实质是先创造父类的实例对象this（必须先调用super方法），然后再用子类的构造函数修改this</p>
<h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">//es5</div><div class="line">function Point(x, y) &#123;</div><div class="line">  this.x = x;</div><div class="line">  this.y = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Point.prototype.toString = function () &#123;</div><div class="line">  return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var p = new Point(1, 2);</div><div class="line">//es6</div><div class="line">let methodName = &apos;getArea&apos;;</div><div class="line">class Point &#123;</div><div class="line">  constructor(x, y) &#123;</div><div class="line">    this.x = x;</div><div class="line">    this.y = y;</div><div class="line">    this.toString = function()&#123;</div><div class="line">      console.log(111);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  [methodName]() &#123;</div><div class="line">    console.log(666);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var temp = new Point(&apos;helo&apos;,&apos;world&apos;);</div><div class="line">console.log(temp)// constructor定义的内容</div><div class="line">console.log(temp.toString()) //先找实例属性，在去原型找属性</div><div class="line"></div><div class="line">console.log(typeof Point) // &quot;function&quot;</div><div class="line">console.log(Point === Point.prototype.constructor) // true</div><div class="line"></div><div class="line">console.log(Object.keys(Point.prototype));//[]</div><div class="line">console.log(Object.getOwnPropertyNames(Point.prototype));//[&quot;constructor&quot;, &quot;toString&quot;]</div><div class="line">Object.assign(Point.prototype, &#123;</div><div class="line">  toString222()&#123;console.log(222);&#125;,</div><div class="line">  toValue()&#123;console.log(333);&#125;</div><div class="line">&#125;);</div><div class="line">temp.toString222()</div><div class="line">console.log(Object.keys(Point.prototype));//[&quot;toString222&quot;, &quot;toValue&quot;]</div><div class="line">console.log(Object.getOwnPropertyNames(Point.prototype));//[&quot;constructor&quot;, &quot;toString&quot;, &quot;toString222&quot;, &quot;toValue&quot;]</div><div class="line"></div><div class="line"></div><div class="line">temp[methodName]() //666</div><div class="line"></div><div class="line">class Foo &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    return Object.create(null);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">console.log(Foo.name)//Foo</div><div class="line">console.log(new Foo() instanceof Foo)//false</div><div class="line">var tt = new Foo();</div><div class="line">console.log(tt.__proto__ == Point) //TRUE</div><div class="line"></div><div class="line">var p1 = new Point(2,3);</div><div class="line">var p2 = new Point(3,2);</div><div class="line">console.log(p1.__proto__ === p2.__proto__)//true</div><div class="line">p1.__proto__.printName = function () &#123; console.log(&apos;Oops&apos;) &#125;;</div><div class="line">p1.printName() // &quot;Oops&quot;</div><div class="line">p2.printName() // &quot;Oops&quot;</div><div class="line">var p3 = new Point(4,2);</div><div class="line">p3.printName() // &quot;Oops</div><div class="line"></div><div class="line">//这个类的名字是MyClass而不是Me，Me只在 Class 的内部代码可用，指代当前类。</div><div class="line">const MyClass = class Me &#123;</div><div class="line">  getClassName() &#123;</div><div class="line">    console.log(Me.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">let inst = new MyClass();</div><div class="line">inst.getClassName() // Me</div><div class="line">console.log(MyClass.name)//me</div><div class="line"></div><div class="line">//立即执行的 Class</div><div class="line">let person = new class &#123;</div><div class="line">  constructor(name) &#123;</div><div class="line">    this.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayName() &#123;</div><div class="line">    console.log(this.name);</div><div class="line">  &#125;</div><div class="line">&#125;(&apos;张三&apos;);</div><div class="line"></div><div class="line">person.sayName(); // &quot;张三&quot;</div><div class="line"></div><div class="line">class MyClass &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">  get prop() &#123;</div><div class="line">    return &apos;getter&apos;;</div><div class="line">  &#125;</div><div class="line">  set prop(value) &#123;</div><div class="line">    console.log(&apos;setter: &apos;+value);</div><div class="line">  s&#125;</div><div class="line">let inst = new MyClass();</div><div class="line">inst.prop = 123;// setter: 123</div><div class="line">console.log(inst.prop)// &apos;getter&apos;</div></pre></td></tr></table></figure>
<p>1.constructor函数定义实例属性，this代表实例对象，生成对象实例时，自动调用该方法，<br>  默认返回实例对象this，也可以指定返回另外一个对象，则生成的实例将是另外这个对象的实例<br>  如果没有显式定义，一个空的constructor方法会被默认添加。<br>  其他在constructor函数之外定义的函数全都挂在类的prototype对象上(没有定义在this上的全都定义在class上)<br>  其实constructor函数也挂在prototype对象上<br>2.定义原型方法时，不需要加上function这个关键字，方法之间不需要逗号分隔<br>3.类的数据类型就是函数，类本身就指向构造函数<br>4.使用Object.assign()新增原型方法,定义类时定义的原型方法是不可枚举的，但Object.assign()新增的可枚举<br>5.可以使用变量值做原型方法名<br>6.定义实例仍使用new关键字,且必须使用new定义，否则会报错<br>7.类的所有实例共享一个原型对象,使用实例的<strong>proto</strong>属性改写原型,会改变“类”的原始定义，影响到所有实例<br>8.类也可以使用表达式的形式定义,采用 Class 表达式，可以写出立即执行的 Class<br>9.类必须先定义再使用，无论是生成实例还是进行继承<br>10.类的name属性总是返回紧跟在class关键字后面的类名。<br>11.对某个属性设置对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。存值函数和取值函数是设置在属性的 Descriptor 对象上的。<br>12.静态方法,该方法不会被实例继承，而是直接通过类来调用<br>如果静态方法包含this关键字，这个this指的是类，而不是实例<br>父类的静态方法，可以被子类继承。<br>静态方法也是可以从super对象上调用的<br>13.<br>ES6 为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。</p>
<h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Point &#123;</div><div class="line">  constructor(x, y) &#123;</div><div class="line">    this.x = x;</div><div class="line">    this.y = y;</div><div class="line">    console.log(new.target.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ColorPoint extends Point &#123;</div><div class="line">  constructor(x, y, color) &#123;</div><div class="line">    super(x, y);</div><div class="line">    this.color = color;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let cp0 = new Point(25, 8);//&quot;Point&quot;</div><div class="line">let cp = new ColorPoint(25, 8, &apos;green&apos;);//&quot;ColorPoint&quot; super()使用</div><div class="line"></div><div class="line">console.log(cp instanceof ColorPoint)//true</div><div class="line">console.log(cp instanceof Point)//true</div><div class="line">console.log(Object.getPrototypeOf(ColorPoint) === Point)</div><div class="line"></div><div class="line">console.log(ColorPoint.__proto__ === Point) // true</div><div class="line">console.log(ColorPoint.prototype.__proto__ === Point.prototype) // true</div><div class="line"></div><div class="line">console.log(cp.__proto__.__proto__ === cp0.__proto__ )// true</div><div class="line">cp.__proto__.__proto__.printName = function () &#123;</div><div class="line">  console.log(&apos;Ha&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">cp0.printName() // &quot;Ha&quot;</div></pre></td></tr></table></figure>
<p>1、使用extends关键字进行继承：class 子类名 extends 父类名{}<br>2、在子类构造函数constructor中使用super关键字继承父类this对象,必需在super语句之后使用this<br>3、Object.getPrototypeOf方法可以用来从子类上获取父类<br>4、子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。<br>   子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。<br>5、子类的原型的原型，是父类的原型，通过子类实例的<strong>proto</strong>.<strong>proto</strong>属性，可以修改父类实例的行为</p>
<h3 id="关于super关键字"><a href="#关于super关键字" class="headerlink" title="关于super关键字"></a>关于super关键字</h3><p>1、用作函数<br>作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错，代表调用父类构造函数<br>super()在这里相当于parent.prototype.constructor.call(this),this指子类</p>
<p>2、用作对象</p>
<p>作为对象使用时,在普通方法中指向父类原型对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.p = 2;</div><div class="line">  &#125;</div><div class="line">  q() &#123;</div><div class="line">    console.log(this.p)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B extends A &#123;</div><div class="line">    constructor() &#123;</div><div class="line">    super();</div><div class="line">    this.p =3</div><div class="line">    super.q();</div><div class="line">    super.p = 5;</div><div class="line">    console.log(super.p); // undefined</div><div class="line">    console.log(this.p); // 5</div><div class="line">    super.tt = 6;</div><div class="line">    console.log(this.tt); // 6</div><div class="line">    console.log(super.valueOf() instanceof B); // true</div><div class="line">  &#125;</div><div class="line">  get m() &#123;</div><div class="line">    return super.p;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let b = new B();//3</div><div class="line">console.log(b.m) // undefined</div></pre></td></tr></table></figure></p>
<p>在普通方法中指向父类原型对象,即使用super.xxxx(),相当于使用parent.prototype.xxxx(),<br>所以只能调用父类原型属性方法,不能使用实例属性方法</p>
<p>通过super调用父类的方法时,super会绑定子类的this,<br>即在子类使用super.xxxx()时,xxxx()里面的this指子类<br>通过super对某个属性赋值,赋值的属性会变成子类实例的属性</p>
<p>在静态方法中使用super将指向父类，而不是父类的原型对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Parent &#123;</div><div class="line">  static myMethod(msg) &#123;</div><div class="line">    console.log(&apos;static&apos;, msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    console.log(&apos;instance&apos;, msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Child extends Parent &#123;</div><div class="line">  static myMethod(msg) &#123;</div><div class="line">    super.myMethod(msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    super.myMethod(msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.myMethod(1); // static 1 super在静态方法之中指向父类</div><div class="line"></div><div class="line">var child = new Child();</div><div class="line">child.myMethod(2); // instance 2 在普通方法之中指向父类的原型对象。</div></pre></td></tr></table></figure></p>
<h3 id="extends特殊对象"><a href="#extends特殊对象" class="headerlink" title="extends特殊对象"></a>extends特殊对象</h3><p>第一种特殊情况，子类继承Object类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class A extends Object &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === Object // true</div><div class="line">A.prototype.__proto__ === Object.prototype // true</div></pre></td></tr></table></figure></p>
<p>这种情况下，A其实就是构造函数Object的复制，A的实例就是Object的实例。</p>
<p>第二种特殊情况，不存在任何继承。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === Function.prototype // true</div><div class="line">A.prototype.__proto__ === Object.prototype // true</div></pre></td></tr></table></figure></p>
<p>这种情况下，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承Function.prototype。但是，A调用后返回一个空对象（即Object实例），所以A.prototype.<strong>proto</strong>指向构造函数（Object）的prototype属性。</p>
<p>第三种特殊情况，子类继承null。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class A extends null &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === Function.prototype // true</div><div class="line">A.prototype.__proto__ === undefined // true</div></pre></td></tr></table></figure></p>
<p>这种情况与第二种情况非常像。A也是一个普通函数，所以直接继承Function.prototype。但是，A调用后返回的对象不继承任何方法，所以它的<strong>proto</strong>指向Function.prototype，即实质上执行了下面的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class C extends null &#123;</div><div class="line">  constructor() &#123; return Object.create(null); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第四种情况,允许继承原生构造函数定义子类,但无法通过super方法向父类Object传参<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class NewObj extends Object&#123;</div><div class="line">  constructor()&#123;</div><div class="line">    super(...arguments);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var o = new NewObj(&#123;attr: true&#125;);</div><div class="line">console.log(o.attr === true)  // false</div></pre></td></tr></table></figure></p>
<h3 id="Mixin-模式"><a href="#Mixin-模式" class="headerlink" title="Mixin 模式"></a>Mixin 模式</h3><p>使用如下mix函数将多个对象合成为一个类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">function mix(...mixins) &#123;</div><div class="line">  class Mix &#123;&#125;</div><div class="line"></div><div class="line">  for (let mixin of mixins) &#123;</div><div class="line">    copyProperties(Mix, mixin);</div><div class="line">    copyProperties(Mix.prototype, mixin.prototype);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return Mix;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function copyProperties(target, source) &#123;</div><div class="line">  for (let key of Reflect.ownKeys(source)) &#123;</div><div class="line">    if ( key !== &quot;constructor&quot;</div><div class="line">      &amp;&amp; key !== &quot;prototype&quot;</div><div class="line">      &amp;&amp; key !== &quot;name&quot;</div><div class="line">    ) &#123;</div><div class="line">      let desc = Object.getOwnPropertyDescriptor(source, key);</div><div class="line">      Object.defineProperty(target, key, desc);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用：继承返回的合成类</div><div class="line">class DistributedEdit extends mix(Loggable, Serializable) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对象特性&quot;&gt;&lt;a href=&quot;#对象特性&quot; class=&quot;headerlink&quot; title=&quot;对象特性&quot;&gt;&lt;/a&gt;对象特性&lt;/h1&gt;&lt;p&gt;对象的属性在定义时，都带有一些特征值，js通过这些特征值定义他们的行为&lt;br&gt;这些特征值描述对象属性的各种特征,成为对象属性
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Ajax和跨域</title>
    <link href="http://yoohannah.github.io/post/knowledge/ajax.html"/>
    <id>http://yoohannah.github.io/post/knowledge/ajax.html</id>
    <published>2017-08-19T01:56:37.000Z</published>
    <updated>2017-08-19T02:05:13.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><p>ajax全称Asynchronous JavaScript and XML（异步的JavaScript与XML），是网页无需刷新页面、使用js与服务器进行交互的一种技术。</p>
<p>ajax的基本流程可以概括为：页面上js脚本实例化一个XMLHttpRequest对象，设置好服务器端的url、必要的查询参数、回调函数之后，向服务器发出请求，<br>服务器在处理请求之后将处理结果返回给页面，触发事先绑定的回调函数。<br>这样，页面脚本如果想要改变一个区域的内容，只需要通过ajax向服务器获取与该区域有关的少量数据，在回调函数中将该区域的内容替换掉即可，不需要刷新整个页面。</p>
<p>XMLHttpRequest在发送请求的时候，有两种方式：同步与异步。<br>同步方式是请求发出后，一直到收到服务器返回的数据为止，浏览器进程被阻塞，页面上什么事也做不了。<br>而异步方式则不会阻塞浏览器进程，在服务端返回数据并触发回调函数之前，用户依然可以在该页面上进行其他操作。<br>ajax的核心是异步方式，而同步方式只有在极其特殊的情况下才会被用到。</p>
<p>XMLHttpRequest 对象是一个接口，用于创建一个http请求对象实例,打开一个URL，然后发送这个请求,<br>当传输完毕后，结果的HTTP状态以及返回的响应内容也可以从请求对象中获取<br>五种状态<br>0：未打开<br>1：未发送<br>2：以获取响应头<br>3：正在下载响应体<br>4：请求完成<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">XMLHttpRequest API</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">const xhr = new XMLHttpRequest()</div><div class="line"></div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">  switch (xhr.readyState) &#123;</div><div class="line">    case 0:</div><div class="line">      // UNSENT (未打开)</div><div class="line">      debugger</div><div class="line">      break</div><div class="line">    case 1:</div><div class="line">      // OPENED  (未发送)</div><div class="line">      debugger</div><div class="line">      break</div><div class="line">    case 2:</div><div class="line">      // HEADERS_RECEIVED (已获取响应头)</div><div class="line">      debugger</div><div class="line">      break</div><div class="line">    case 3:</div><div class="line">      // LOADING (正在下载响应体)</div><div class="line">      debugger</div><div class="line">      break</div><div class="line">    case 4:</div><div class="line">      // DONE (请求完成)</div><div class="line">      if (xhr.status === 200) &#123;</div><div class="line">        console.log(xhr.responseType)</div><div class="line">        console.log(xhr.responseText)</div><div class="line">        console.log(xhr.response)</div><div class="line">      &#125;</div><div class="line">      break</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://y.com:7001/json&apos;, true)</div><div class="line">xhr.send(null)</div></pre></td></tr></table></figure>
<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>为了保证用户信息的安全，防止恶意的网站窃取数据<br>解决办法：同源策略<br>同源策略是指三个相同：协议相同,域名相同,端口相同<br>以上三个不相同则是非同源，非同源之间相互访问即跨域访问</p>
<p>跨域和ip没有关系</p>
<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>浏览器在阻止跨域,阻止方式可能是在一开始就限制了发起跨站的请求，也可能是跨站请求可以正常发起，但返回结果被浏览器拦截了</p>
<h2 id="为什么要防止跨域"><a href="#为什么要防止跨域" class="headerlink" title="为什么要防止跨域"></a>为什么要防止跨域</h2><p>跨域访问时会受到同源策略的三个限制<br>1、Cookie、LocalStorage 和 IndexDB 无法读取。<br>通过浏览器document.cookie我们可以获取用户登录态,如果cookie可以读取的话，<br>就会出现在A公司网站里可以去B公司网站获取登录信息的事情,这样就容易将用户信息泄露<br>2、DOM 无法获得<br>如果DOM可以获得,现在我是一个假网站，利用iframe套嵌一个目前线上运营的电商网站,那么<br>消费者在输入支付密码时,那我就可以获取input的值,从而获取用户支付密码<br>3、AJAX 请求不能发送<br>如果AJAx可以发送的话，那我们就能将内网东西下载下来发送到外网服务器，从而造成内网信息泄露</p>
<h2 id="如何实现跨域"><a href="#如何实现跨域" class="headerlink" title="如何实现跨域"></a>如何实现跨域</h2><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>原理是利用&lt;script&gt;标签可以在任何域下获取资源的原理，将要跨域获取的接口url放在&lt;script&gt;标签的src里面，<br>然后js将标签放到body里面，其中url包含一个callback参数，用于指向处理response的函数，这个函数我们挂载的window上,<br>即我们在js中定义的的函数</p>
<p>如果在浏览器直接访问接口’<a href="http://x.com:7001/json?callback=xxx" target="_blank" rel="external">http://x.com:7001/json?callback=xxx</a>‘<br>页面会显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/**/ typeof xxx === &apos;function&apos; &amp;&amp; xxx(&#123;&quot;msg&quot;:&quot;hello world&quot;&#125;);</div></pre></td></tr></table></figure></p>
<p>就是说,在请求这个接口时,会去window上找xxx这个对象，看它是不是函数，如果是函数，<br>就将接口定义的response（{“msg”:”hello world”}）作为参数传递给xxx函数,并执行xxx函数</p>
<p>现在在<a href="http://y.com/x.html页面中进行跨域" target="_blank" rel="external">http://y.com/x.html页面中进行跨域</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//json 接口  服务端</div><div class="line"></div><div class="line">module.exports = app =&gt; &#123;</div><div class="line">  class MsgController extends app.Controller &#123;</div><div class="line">    * index(req) &#123;</div><div class="line">      this.ctx.body = &#123; msg: &apos;hello world&apos; &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return MsgController</div><div class="line">&#125;</div><div class="line"></div><div class="line">// js 客户端请求</div><div class="line">//方法一：</div><div class="line"></div><div class="line">//定义相应处理函数</div><div class="line">window.xxx = function (value) &#123;</div><div class="line">  console.log(value)</div><div class="line">&#125;</div><div class="line">//添加script标签</div><div class="line">var script = document.createElement(&apos;script&apos;)</div><div class="line">script.src = &apos;http://x.com:7001/json?callback=xxx&apos;</div><div class="line">document.body.appendChild(script)</div><div class="line"></div><div class="line">//方法二：</div><div class="line">require([&apos;http://x.com:7001/json?callback=define&apos;], function (value) &#123;</div><div class="line">  console.log(value)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>现在访问<a href="http://y.com/x.html,在浏览器console就会打印{&quot;msg&quot;:&quot;hello" target="_blank" rel="external">http://y.com/x.html,在浏览器console就会打印{&quot;msg&quot;:&quot;hello</a> world”}</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>XMLHttpRequest 2.0以后可以使用cors方法进行跨域<br>CORS需要浏览器和服务器同时支持<br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。<br>对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。<br>浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//cors接口 服务端</div><div class="line">module.exports = app =&gt; &#123;</div><div class="line">  class CrosController extends app.Controller &#123;</div><div class="line">    * index(req) &#123;</div><div class="line">      this.ctx.set(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;)//如果不添加则会禁止访问</div><div class="line">      // this.ctx.set(&apos;Access-Control-Allow-Origin&apos;, &apos;http://xx.com&apos;)</div><div class="line">      // 如果我们要 http://*.qq.com 都支持跨域怎么办？</div><div class="line">      this.ctx.body = &#123; msg: &apos;hello world&apos; &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return CrosController</div><div class="line">&#125;</div><div class="line"></div><div class="line">//js应用 客户端</div><div class="line">var xhr = new XMLHttpRequest()</div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">  if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class="line">    console.log(JSON.parse(xhr.responseText).msg)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">xhr.withCredentials = true//在头部添加cookie带到y.stuq,如果不设置，则不带</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://x.com:7001/cros&apos;)</div><div class="line">xhr.send(null)</div></pre></td></tr></table></figure>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">HTTP访问控制（CORS）</a></p>
<p>Access-Control-Allow-Origin 的属性值只允许设置为单个确定域名字符串或者 (<em>),设置</em>的话，最不安全，允许所有域可以访问</p>
<p>在服务器端设置CORS跨域请求中的多域名白名单，可以实现Access-Control-Allow-Origin 允许对某一个或几个网站开放跨域请求权限</p>
<p>原理就是在服务器端判断请求的Header中Origin属性值（req.header.origin）是否在我们的域名白名单列表内。<br>如果在白名单列表内，那么我们就把 Access-Control-Allow-Origin 设置成当前的Origin值，这样就满足了Access-Control-Allow-Origin 的单一域名要求，也能确保当前请求通过访问；如果不在白名单列表内，则返回错误信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">// 判断origin是否在域名白名单列表中</div><div class="line">function isOriginAllowed(origin, allowedOrigin) &#123;</div><div class="line">    if (_.isArray(allowedOrigin)) &#123;</div><div class="line">        for(let i = 0; i &lt; allowedOrigin.length; i++) &#123;</div><div class="line">            if(isOriginAllowed(origin, allowedOrigin[i])) &#123;</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125; else if (_.isString(allowedOrigin)) &#123;</div><div class="line">        return origin === allowedOrigin;</div><div class="line">    &#125; else if (allowedOrigin instanceof RegExp) &#123;</div><div class="line">        return allowedOrigin.test(origin);</div><div class="line">    &#125; else &#123;</div><div class="line">        return !!allowedOrigin;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">const ALLOW_ORIGIN = [  // 域名白名单</div><div class="line">    &apos;*.233.666.com&apos;,</div><div class="line">    &apos;hello.world.com&apos;,</div><div class="line">    &apos;hello..*.com&apos;</div><div class="line">];</div><div class="line"></div><div class="line">app.post(&apos;a/b&apos;, function (req, res, next) &#123;</div><div class="line">    let reqOrigin = req.headers.origin;  // request响应头的origin属性</div><div class="line"></div><div class="line">    // 判断请求是否在域名白名单内</div><div class="line">    if(isOriginAllowed(reqOrigin, ALLOW_ORIGIN)) &#123;</div><div class="line">        // 设置CORS为请求的Origin值</div><div class="line">        res.header(&quot;Access-Control-Allow-Origin&quot;, reqOrigin);</div><div class="line">        res.header(&apos;Access-Control-Allow-Credentials&apos;, &apos;true&apos;);</div><div class="line"></div><div class="line">        // 业务代码逻辑代码 ...</div><div class="line">        // ...</div><div class="line">    &#125; else &#123;</div><div class="line">        res.send(&#123; code: -2, msg: &apos;非法请求&apos; &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>与JSONP的比较:<br>CORS与JSONP的使用目的相同，但是比JSONP更强大。<br>JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p>
<h3 id="iframe-Hash"><a href="#iframe-Hash" class="headerlink" title="iframe-Hash"></a>iframe-Hash</h3><p>Location 对象是 Window 对象的一个部分，可通过 window.location 属性来访问<br>hash是location对象的的一个属性，可以设置或返回从井号 (#) 开始的 URL（锚）</p>
<p>iframe是HTML标签，作用是文档中的文档，或者浮动的框架(FRAME)。iframe元素会创建包含另外一个文档的内联框架（即行内框架）。</p>
<p>原理是在原域页面包装 跨域src的iframe标签，在跨域src的文件里请求跨域的资源(此时二者同域),<br>跨域src文件是可以获取到iframe父类,即我们原域的window对象,<br>通过改变原域的hash值，引发原域onhashchange,从而将资源带回到原域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//原域js</div><div class="line">//包装iframe</div><div class="line">var iframe = document.createElement(&apos;iframe&apos;)</div><div class="line">iframe.src = &apos;http://x.com:7001/public/hash.html&apos;</div><div class="line">document.body.appendChild(iframe)</div><div class="line">//处理请求资源</div><div class="line">window.onhashchange = function () &#123;</div><div class="line">  // 小练习，做个工具方法，取出query的值</div><div class="line">  console.log(location.hash)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//跨域的hash.html文件</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var xhr = new XMLHttpRequest()</div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class="line">        var res = JSON.parse(xhr.responseText)</div><div class="line">        parent.location.href = `http://y.stuq.com:7001/public/3.html#msg=$&#123;res.msg&#125;` //引起原域onhashchange，同时将response带回</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://x.com:7001/json&apos;, true) //请求同域资源</div><div class="line">xhr.send(null)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="iframe-window-name"><a href="#iframe-window-name" class="headerlink" title="iframe-window.name"></a>iframe-window.name</h3><p>原理是利用iframe的window.name,name 值在不同的页面（甚至不同域名）加载后依旧存在（如果没修改则值不会变化），并且可以支持非常长的 name 值（2MB）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//原域js</div><div class="line">var iframe = document.createElement(&apos;iframe&apos;)</div><div class="line">iframe.src = &apos;http://x.com:7001/public/name.html&apos;</div><div class="line">document.body.appendChild(iframe)</div><div class="line"></div><div class="line">var times = 0</div><div class="line">iframe.onload = function () &#123;</div><div class="line">    if (++times === 2) &#123;//第一次打开跨域页面name,第二次加载通知原域iframe改变值</div><div class="line">        console.log(JSON.parse(iframe.contentWindow.name))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//name.html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var xhr = new XMLHttpRequest()</div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class="line">        window.name = xhr.responseText //这里是原域iframe的window,iframe不能跨域读取对象,所以</div><div class="line">        location.href = &apos;http://y.com:7001/public/index.html&apos; //再次加载iframe，通知原域parent，iframe的contentWindow.name需要做更改</div><div class="line">        //href的值,依然是跨域的也可以，这里是加载回原域的一个文件</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://x.com:7001/json&apos;, true)</div><div class="line">xhr.send(null)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="iframe-postMessage"><a href="#iframe-postMessage" class="headerlink" title="iframe-postMessage"></a>iframe-postMessage</h3><p>利用HTML5的postMessage方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//原域js</div><div class="line">var iframe = document.createElement(&apos;iframe&apos;)</div><div class="line">iframe.src = &apos;http://x.stuq.com:7001/public/post.html&apos;</div><div class="line">document.body.appendChild(iframe)</div><div class="line"></div><div class="line">window.addEventListener(&apos;message&apos;, function(e) &#123;</div><div class="line">  console.log(JSON.parse(e.data))</div><div class="line">&#125;, false);</div><div class="line"></div><div class="line">//post.html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var xhr = new XMLHttpRequest()</div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class="line">        parent.postMessage(xhr.responseText, &apos;*&apos;) //拿到父级页面parent,执行postmessage的一个操作，从而引发父级页面的message事件</div><div class="line">        //*代表targetOrigin可以是任何域</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://x.stuq.com:7001/json&apos;, true)</div><div class="line">xhr.send(null)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage" target="_blank" rel="external">Window.postMessage() API</a></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>跨域方法很多<br>选择如何使用可以考虑以下几方面<br>1.场景，选择简单的<br>2.安全，解决问题是否足够安全<br>3.数据来源,如果跨域接口可以传资源给原域，则可以使用iframe代理<br>4.承接第三种情景，如果接口不允许传资源，则只能寄希望于后台，使用反向代理的方法获取</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ajax&quot;&gt;&lt;a href=&quot;#ajax&quot; class=&quot;headerlink&quot; title=&quot;ajax&quot;&gt;&lt;/a&gt;ajax&lt;/h1&gt;&lt;p&gt;ajax全称Asynchronous JavaScript and XML（异步的JavaScript与XML），是网页无需
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Karma test</title>
    <link href="http://yoohannah.github.io/post/knowledge/Karma.html"/>
    <id>http://yoohannah.github.io/post/knowledge/Karma.html</id>
    <published>2017-08-12T15:54:02.000Z</published>
    <updated>2017-08-13T02:02:38.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Karma-test"><a href="#Karma-test" class="headerlink" title="Karma test"></a>Karma test</h1><p>Karma是由Google团队开发的一套前端测试运行框架。它不同于测试框架（例如jasmine，mocha等），运行在这些测试框架之上。主要完成以下工作：<br>Karma启动一个web服务器，生成包含js源代码和js测试脚本的页面；<br>运行浏览器加载页面，并显示测试的结果；<br>如果开启检测，则当文件有修改时，执行继续执行以上过程。</p>
<h1 id="搭建测试环境"><a href="#搭建测试环境" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h1><p>npm install -g karma-cli //让全局都可以运行karma的命令行,命令行工具<br>npm i karma –save-dev //只在当前项目中使用karma<br>npm install //安装项目的依赖 package.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;karma&quot;: &quot;^1.7.0&quot;,</div><div class="line">    &quot;karma-chrome-launcher&quot;: &quot;^2.2.0&quot;,</div><div class="line">    &quot;karma-mocha&quot;: &quot;^1.3.0&quot;,</div><div class="line">    &quot;mocha&quot;: &quot;^3.5.0&quot;,</div><div class="line">    &quot;should&quot;: &quot;^11.2.1&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>karma init //在cmd中运行该命令,构建karma.conf.js文件,运行后会询问相关问题然后生成karma.conf.js文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">Which testing framework do you want to use ?</div><div class="line">Press tab to list possible options. Enter to move to the next question.</div><div class="line">&gt; mocha //选择要使用的框架,不能直接输入,是选择题,点击键盘箭头可更改选项</div><div class="line"></div><div class="line">Do you want to use Require.js ?</div><div class="line">This will add Require.js plugin.</div><div class="line">Press tab to list possible options. Enter to move to the next question.</div><div class="line">&gt; no  //是否add Require.js plugin</div><div class="line"></div><div class="line">Do you want to capture any browsers automatically ?</div><div class="line">Press tab to list possible options. Enter empty string to move to the next quest</div><div class="line">ion.</div><div class="line">&gt; Chrome //选择用哪个浏览器打开测试页，也是选择题，不能输入</div><div class="line">&gt;</div><div class="line"></div><div class="line">What is the location of your source and test files ?</div><div class="line">You can use glob patterns, eg. "js/*.js" or "test/**/*Spec.js".</div><div class="line">Enter empty string to move to the next question.</div><div class="line">&gt; src/*.js  //添加要测试的代码的路径，不是测试用例代码的路径，同时，代码中用到的其他文件也在这里同时添加，</div><div class="line">11 08 2017 15:03:13.822:WARN [init]: There is no file matching this pattern.</div><div class="line"></div><div class="line">&gt; //	回车可以切换下一行继续添加，连续回车进入下一个问题</div><div class="line"></div><div class="line">Should any of the files included by the previous patterns be excluded ?</div><div class="line">You can use glob patterns, eg. "**/*.swp".</div><div class="line">Enter empty string to move to the next question.</div><div class="line">&gt;</div><div class="line"></div><div class="line">Do you want Karma to watch all the files and run the tests on change ?</div><div class="line">Press tab to list possible options.</div><div class="line">&gt; yes //是否跟所有文件自动开启测试</div><div class="line"></div><div class="line"></div><div class="line">Config file generated at "G:\css\homework1\karma.conf.js".</div></pre></td></tr></table></figure></p>
<p>karma.conf.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">module.exports = function(config) &#123;</div><div class="line">  config.set(&#123;</div><div class="line"></div><div class="line">    // base path that will be used to resolve all patterns (eg. files, exclude)</div><div class="line">    basePath: &apos;&apos;,//根路径，后面配置的基本所有相对路径都会根据这个路径来构造。</div><div class="line"></div><div class="line"></div><div class="line">    // frameworks to use 使用到的框架</div><div class="line">    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter</div><div class="line">    frameworks: [&apos;mocha&apos;],</div><div class="line"></div><div class="line"></div><div class="line">    // list of files / patterns to load in the browser  将会在浏览器里面执行的代码</div><div class="line">    files: [</div><div class="line">      &apos;node_modules/should/should.js&apos;,</div><div class="line">      &apos;js/*.js&apos;,</div><div class="line">      &apos;quz/*.js&apos;,</div><div class="line">      &apos;test/*.js&apos;</div><div class="line">    ],</div><div class="line"></div><div class="line"></div><div class="line">    // list of files to exclude 需要从 files 中排除掉的文件</div><div class="line">    exclude: [</div><div class="line">    ],</div><div class="line"></div><div class="line"></div><div class="line">    // preprocess matching files before serving them to the browser需要做预处理的文件，以及这些文件对应的预处理器。</div><div class="line">    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</div><div class="line">    preprocessors: &#123;////此处就可以将 coffee 、 ES6 等代码转换一下。</div><div class="line">        &apos;js/*.js&apos;: [&apos;coverage&apos;],//测试覆盖率</div><div class="line">        &apos;quz/*.js&apos;: [&apos;coverage&apos;]//测试覆盖率</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"></div><div class="line">    // test results reporter to use 测试结果报告器</div><div class="line">    // possible values: &apos;dots&apos;, &apos;progress&apos;</div><div class="line">    // available reporters: https://npmjs.org/browse/keyword/karma-reporter</div><div class="line">    reporters: [&apos;progress&apos;, &apos;coverage&apos;],</div><div class="line"></div><div class="line">     // 覆盖率报告器配置</div><div class="line">    coverageReporter: &#123;</div><div class="line">      type : &apos;lcov&apos;, //html格式会生成html文件，lcov格式可以和coveralls结合生成coveralls徽章</div><div class="line">      dir : &apos;coverage/&apos;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // web server port 服务器端口号</div><div class="line">    port: 9876,</div><div class="line"></div><div class="line"></div><div class="line">    // enable / disable colors in the output (reporters and logs)</div><div class="line">    colors: true,</div><div class="line"></div><div class="line"></div><div class="line">    // level of logging 日志级别</div><div class="line">    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</div><div class="line">    logLevel: config.LOG_INFO,</div><div class="line"></div><div class="line"></div><div class="line">    // enable / disable watching file and executing tests whenever any file changes 启用/禁用监视文件变化重新执行测试的功能</div><div class="line">    autoWatch: true,</div><div class="line"></div><div class="line"></div><div class="line">    // start these browsers 使用的浏览器</div><div class="line">    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</div><div class="line">    browsers: [&apos;Chrome&apos;],</div><div class="line"></div><div class="line"></div><div class="line">    // Continuous Integration mode true测试一次就结束,false测试完一直处于测试状态</div><div class="line">    // if true, Karma captures browsers, runs the tests and exits</div><div class="line">    singleRun: true,</div><div class="line"></div><div class="line">    // Concurrency level</div><div class="line">    // how many browser should be started simultaneous</div><div class="line">    concurrency: Infinity</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="集成测试Travis-CI"><a href="#集成测试Travis-CI" class="headerlink" title="集成测试Travis CI"></a>集成测试Travis CI</h1><p><a href="/post/knowledge/TravishCI.html">Travish CI使用</a><br>通过Travis CI测试我们可以获得一个测试通过的标志<a href="https://travis-ci.org/YooHannah/homework1" target="_blank" rel="external"><img src="https://travis-ci.org/YooHannah/homework1.svg?branch=develop" alt="Build Status"></a>，可以将它放在github仓库readme.md文件里面<br><img src="/image/coverage1.png" alt="coverage1"><br>更改链接中branch的值可以获得对应分支的测试结果</p>
<h1 id="测试代码覆盖率-Coverage"><a href="#测试代码覆盖率-Coverage" class="headerlink" title="测试代码覆盖率 Coverage"></a>测试代码覆盖率 Coverage</h1><p>衡量测试脚本的质量–代码覆盖率:测试中运行到的代码占所有代码的比率</p>
<p>安装测试覆盖率工具<br>npm i –save-dev karma-coverage</p>
<p>修改配置文件karma.conf.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// modified</div><div class="line">preprocessors: &#123;</div><div class="line">    &apos;src/**/*.js&apos;: [&apos;coverage&apos;], //要测试的功能代码路径：[&apos;coverage&apos;]   多个文件夹就逗号隔开，按格式写下去</div><div class="line">    &apos;js/*.js&apos;: [&apos;coverage&apos;],</div><div class="line">    &apos;quz/*.js&apos;: [&apos;coverage&apos;]</div><div class="line">&#125;,</div><div class="line"></div><div class="line">//modified</div><div class="line">reporters: [&apos;progress&apos;, &apos;coverage&apos;],</div><div class="line"></div><div class="line">// add</div><div class="line">coverageReporter: &#123;</div><div class="line">  type : &apos;html&apos;,</div><div class="line">  dir : &apos;coverage/&apos;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>运行karma start,会新增coverage文件夹,里面只有一个浏览器名的文件夹，里面是根据preprocessors添加的路径生成对应的文件夹和其他文件，<br>其他文件里面有index.html文件，是整个测试的测试报告，文件夹里是每个文件的覆盖测试结果和代码具体的覆盖情况</p>
<p>注意：如果不想将测试结果上传github,记得更改.gitignore文件，将coverage文件夹忽略掉</p>
<h1 id="获取覆盖率标志"><a href="#获取覆盖率标志" class="headerlink" title="获取覆盖率标志"></a>获取覆盖率标志</h1><p>github 仓库经常会看到这个标志<br><img src="/image/coverage2.png" alt="coverage2"><br>就是说项目的测试覆盖率是91%，要获取这个标志我们需要将测试覆盖率放到<a href="https://coveralls.io" target="_blank" rel="external">Coveralls</a>上</p>
<p>安装 coveralls方便我们在Travis CI上测试完之后将结果上传<br>npm i coveralls –save-dev</p>
<p>更改karma.conf.js<br>coverageReporter: {<br>  type : ‘lcov’, //将html改为lcov<br>  dir : ‘coverage/‘<br>},<br>接下来操作步骤可以有两种<br>方法一：<br>仅更改 package.json文件,不保留测试命令karma start<br>更改package.json的scripts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;./node_modules/karma/bin/karma start --browsers Firefox --single-run &amp;&amp; find coverage -name lcov.info -print0 | xargs -0 cat | ./node_modules/coveralls/bin/coveralls.js &amp;&amp; rm -rf ./coverage&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>方法二：<br>更改package.json文件,保留测试命令karma start<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">		&quot;test&quot;: &quot;karma start&quot;,</div><div class="line">    &quot;report&quot;: &quot;find coverage -name lcov.info -print0 | xargs -0 cat | ./node_modules/coveralls/bin/coveralls.js &amp;&amp; rm -rf ./coverage&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也要更改.travis.yml文件，添加以下语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">after_success:</div><div class="line">  - &quot;npm run report&quot;</div></pre></td></tr></table></figure></p>
<p>然后push代码，等Travi CI 完成测试后，我们可以在<a href="https://coveralls.io" target="_blank" rel="external">Coveralls</a>上获取标志,<br>在总的测试结果那个页面不是具体某次提交的页面获取<br><img src="/image/coverage3.png" alt="coverage3"><br>点击EMBED可以获取不同格式的标志代码，<br>复制粘贴MARKDOWN 格式可以放在readme.md文件中直接使用</p>
<p>相关链接：<br><a href="https://csbun.github.io/blog/2015/11/karma/" target="_blank" rel="external">使用 Karma 在真实浏览器上测试</a><br><a href="https://segmentfault.com/a/1190000006895064" target="_blank" rel="external">前端单元测试之Karma环境搭建</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Karma-test&quot;&gt;&lt;a href=&quot;#Karma-test&quot; class=&quot;headerlink&quot; title=&quot;Karma test&quot;&gt;&lt;/a&gt;Karma test&lt;/h1&gt;&lt;p&gt;Karma是由Google团队开发的一套前端测试运行框架。它不同于测试框架（
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>断言语句assert</title>
    <link href="http://yoohannah.github.io/post/knowledge/assert.html"/>
    <id>http://yoohannah.github.io/post/knowledge/assert.html</id>
    <published>2017-08-12T15:54:02.000Z</published>
    <updated>2017-08-12T15:54:43.520Z</updated>
    
    <content type="html"><![CDATA[<p>测试用例里面的一种判断语句</p>
<p>在mocha中需要require<br>var assert = require(‘assert’)</p>
<p>参数一般有三个<br>value 待判断的值<br>expected 要和value进行比较的值，看二者是否相等或者不相等,如果没有expected，则是在判断value的值是否为真<br>message 判断结果为错误时,抛出来的错误提醒语句，如果 message 参数为 undefined，则赋予默认的错误信息。</p>
<p>assert(value[, message]) 同assert.ok()<br>assert.ok(value[, message]) value如果不为真值,抛出一个带有 message 属性的 AssertionError</p>
<p>assert.fail(message) 抛出错误信息message</p>
<p>assert.fail(actual, expected, message, operator) 根据参数抛出相应错误信息<br>如果 message 不存在，则错误信息会被设为 actual 的值加分隔符 operator 再加 expected 的值。 否则，错误信息为 message 的值,operator没有的话，默认为!=</p>
<p>assert.ifError(value) 如果 value 为真，则抛出 value,如果为假，则测试通过</p>
<p>assert.equal(actual, expected[, message])      使用相等运算符（==）测试 actual 参数与 expected 参数是否相等。<br>assert.deepEqual(actual, expected[, message])  测试 actual 参数与 expected 参数是否深度相等。 原始值使用 相等运算符（==）比较，只比较可枚举的自身属性。<br>深度相等意味着子对象的可枚举的自身属性也会被比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const obj1 = &#123;</div><div class="line">  a: &#123;</div><div class="line">    b: 1</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">const obj3 = &#123;</div><div class="line">  a: &#123;</div><div class="line">    b: 1</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">const obj4 = Object.create(obj1);</div><div class="line">assert.deepEqual(obj1, obj4);</div><div class="line">// 抛出 AssertionError: &#123; a: &#123; b: 1 &#125; &#125; deepEqual &#123;&#125;</div><div class="line">// 原型会被忽略</div><div class="line">assert.deepEqual(obj1, obj3);</div><div class="line">// 通过，两个对象相等</div></pre></td></tr></table></figure></p>
<p>assert.deepStrictEqual(actual, expected[, message])<br>大多数情况下与 assert.deepEqual() 一样，但有三个例外：</p>
<p>原始值使用 全等运算符（===）比较。使用SameValueZero比较法来比较设置的值及映射的键（也就意味不用考虑caveats）。<br>对象的 原型 也使用 全等运算符 比较。<br>对象的类型标签应该相同。</p>
<p>assert.notEqual(actual, expected[, message])              使用 不等运算符（!=）测试是否不相等。<br>assert.notDeepEqual(actual, expected[, message])          测试是否不深度相等。 与 assert.deepEqual() 相反。<br>assert.notStrictEqual(actual, expected[, message])        使用 不全等运算符（!==）测试是否不全等。<br>assert.notDeepStrictEqual(actual, expected[, message])    测试是否不深度全等。 与 assert.deepStrictEqual() 相反。</p>
<p>assert.throws(block[, error][, message])   期望 block 函数抛出错误error，如果block(function)抛出error的错误，则测试通过<br>error 可以是构造函数、正则表达式、或自定义的验证函数。</p>
<p>assert.doesNotThrow(block[, error][, message])  断言 block 函数不会抛出错误<br>当 assert.doesNotThrow() 被调用时，它会立即调用 block 函数。<br>如果抛出错误且错误类型与 error 参数指定的相同，则抛出 AssertionError。 如果错误类型不相同，或 error 参数是 undefined，则错误会被抛回给调用者。<br>如果block不抛出错误，则测试通过</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试用例里面的一种判断语句&lt;/p&gt;
&lt;p&gt;在mocha中需要require&lt;br&gt;var assert = require(‘assert’)&lt;/p&gt;
&lt;p&gt;参数一般有三个&lt;br&gt;value 待判断的值&lt;br&gt;expected 要和value进行比较的值，看二者是否相等或者
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>变量提升</title>
    <link href="http://yoohannah.github.io/post/knowledge/var.html"/>
    <id>http://yoohannah.github.io/post/knowledge/var.html</id>
    <published>2017-08-09T14:02:37.000Z</published>
    <updated>2017-08-09T14:16:06.895Z</updated>
    
    <content type="html"><![CDATA[<p>一个变量的生成需要经历 创建、初始化、赋值三个阶段<br>let 的「创建」过程被提升了，但是初始化没有提升。<br>var 的「创建」和「初始化」都被提升了。<br>function 的「创建」「初始化」和「赋值」都被提升了。<br>const，其实 const 和 let 只有一个区别，那就是 const 只有「创建」和「初始化」，没有「赋值」过程。<br><a href="https://zhuanlan.zhihu.com/p/28140450" target="_blank" rel="external">let</a><br>1、<br>假设有如下代码：</p>
<p>function fn(){<br>  var x = 1<br>  var y = 2<br>}<br>fn()</p>
<p>在执行 fn 时，会有以下过程（不完全）：</p>
<p>进入 fn，为 fn 创建一个环境。<br>找到 fn 中所有用 var 声明的变量，在这个环境中「创建」这些变量（即 x 和 y）。<br>将这些变量「初始化」为 undefined。<br>开始执行代码<br>x = 1 将 x 变量「赋值」为 1<br>y = 2 将 y 变量「赋值」为 2<br>也就是说 var 声明会在代码执行之前就将「创建变量，并将其初始化为 undefined」。</p>
<p>这就解释了为什么在 var x = 1 之前 console.log(x) 会得到 undefined。</p>
<p>2、<br>fn2()</p>
<p>function fn2(){<br>  console.log(2)<br>}<br>JS 引擎会有一下过程：</p>
<p>找到所有用 function 声明的变量，在环境中「创建」这些变量。<br>将这些变量「初始化」并「赋值」为 function(){ console.log(2) }。<br>开始执行代码 fn2()<br>也就是说 function 声明会在代码执行之前就「创建、初始化并赋值」<br>3、<br>{<br>  let x = 1<br>  x = 2<br>}<br>只看 {} 里面的过程：</p>
<p>找到所有用 let 声明的变量，在环境中「创建」这些变量<br>开始执行代码（注意现在还没有初始化）<br>执行 x = 1，将 x 「初始化」为 1（这并不是一次赋值，如果代码是 let x，就将 x 初始化为 undefined）<br>执行 x = 2，对 x 进行「赋值」<br>这就解释了为什么在 let x 之前使用 x 会报错：</p>
<p>let x = ‘global’<br>{<br>  console.log(x) // Uncaught ReferenceError: x is not defined<br>  let x = 1<br>}<br>原因有两个</p>
<p>console.log(x) 中的 x 指的是下面的 x，而不是全局的 x<br>执行 log 时 x 还没「初始化」，所以不能使用（也就是所谓的暂时死区）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个变量的生成需要经历 创建、初始化、赋值三个阶段&lt;br&gt;let 的「创建」过程被提升了，但是初始化没有提升。&lt;br&gt;var 的「创建」和「初始化」都被提升了。&lt;br&gt;function 的「创建」「初始化」和「赋值」都被提升了。&lt;br&gt;const，其实 const 和 le
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于this</title>
    <link href="http://yoohannah.github.io/post/knowledge/aboutthis.html"/>
    <id>http://yoohannah.github.io/post/knowledge/aboutthis.html</id>
    <published>2017-08-09T14:00:37.000Z</published>
    <updated>2017-08-09T14:00:53.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="普通函数中的this"><a href="#普通函数中的this" class="headerlink" title="普通函数中的this"></a>普通函数中的this</h1><ol>
<li>this总是代表它的直接调用者, 例如 obj.func ,那么func中的this就是obj<br>2.在默认情况(非严格模式下,未使用 ‘use strict’),没找到直接调用者,则this指的是 window<br>3.在严格模式下,没有直接调用者的函数中的this是 undefined<br>4.使用call,apply,bind绑定的,this指的是 绑定的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//window</span></div><div class="line">&#125;</div><div class="line">test();</div><div class="line"></div><div class="line"><span class="number">2</span>、</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//undefined</span></div><div class="line">&#125;</div><div class="line">test();</div><div class="line"></div><div class="line"><span class="number">3</span>、</div><div class="line"><span class="built_in">window</span>.val = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">val</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.val *= <span class="number">2</span>;    <span class="comment">//普通函数，this指向调用者</span></div><div class="line">      val *= <span class="number">2</span>;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.val);</div><div class="line">      <span class="built_in">console</span>.log(val);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  obj.fn();<span class="comment">// 4 2</span></div><div class="line">  <span class="keyword">var</span> func = obj.fn;</div><div class="line">  func(); <span class="comment">//8 8</span></div><div class="line"><span class="comment">//obj.fn()执行时,val 没有在fn的作用域里面定义，则去obj.fn()的作用域里面找,obj.fn()位于window,window.val是1;this指向obj,this.val是2</span></div><div class="line"><span class="comment">//func()执行时，window.val由于执行obj.fn(),现在是2;func()在window作用域下执行,this就是window,所以this.val和val都是window.val</span></div><div class="line"></div><div class="line"><span class="number">4</span>、</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> test = <span class="string">'in the f!'</span>;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//是函数就会建立作用域</span></div><div class="line"> 	 <span class="built_in">console</span>(<span class="string">'inner '</span>+ test) <span class="comment">// inner in the f!</span></div><div class="line">  &#125;, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//以上代码等于</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> test = <span class="string">'in the f!'</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ff</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">'inner '</span> + test) <span class="comment">//test在ff里面没定义，但在f里面进行了定义</span></div><div class="line">    &#125; <span class="comment">// 能访问到f中的test局部变量</span></div><div class="line"></div><div class="line">    setTimeout(ff, <span class="number">0</span>); <span class="comment">// inner in the f!</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">f();</div><div class="line"><span class="number">5</span>、</div><div class="line"><span class="keyword">var</span> lzh = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'lzh'</span>,</div><div class="line">    <span class="attr">say</span>: <span class="function"><span class="keyword">function</span>(<span class="params">something</span>)</span>&#123;</div><div class="line">        alert(something + <span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> iny = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'iny'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">lzh.say.apply(iny, [<span class="string">'hi, I am '</span>]); <span class="comment">// 输出 hi I am iny</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h1><p>默认指向在定义它时,它所处的对象,而不是执行时的对象, 定义它的时候,可能环境是window</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">foo()()()() <span class="comment">//window</span></div><div class="line"><span class="keyword">var</span> f = foo.call(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;);</div><div class="line">f()()() <span class="comment">//&#123;id:1&#125;</span></div><div class="line"><span class="keyword">var</span> t1 = f.call(&#123;<span class="attr">id</span>: <span class="number">2</span>&#125;)()();<span class="comment">//&#123;id:1&#125;</span></div><div class="line"><span class="keyword">var</span> t2 = f().call(&#123;<span class="attr">id</span>: <span class="number">3</span>&#125;)();<span class="comment">//&#123;id:1&#125;</span></div><div class="line"><span class="keyword">var</span> t3 = f()().call(&#123;<span class="attr">id</span>: <span class="number">4</span>&#125;);<span class="comment">//&#123;id:1&#125;</span></div></pre></td></tr></table></figure>
<h1 id="setTimeout中的this"><a href="#setTimeout中的this" class="headerlink" title="setTimeout中的this"></a>setTimeout中的this</h1><p> 普通函数指向window<br> 箭头函数指向定义的对象<br> 引用函数,指向调用对象</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"> 0、</div><div class="line"> var obj = &#123;</div><div class="line">    fn1 : function () &#123;</div><div class="line">        console.log(this);          //obj</div><div class="line">    &#125;,</div><div class="line">    fn2 :　function () &#123;</div><div class="line">        setTimeout(function () &#123;</div><div class="line">            console.log(this);     //window 匿名函数执行在window环境，找不到宿主对象，所以指向window</div><div class="line">        &#125;,0);</div><div class="line">    &#125;,</div><div class="line">    fn3: function () &#123;</div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        console.log(this);         //obj 箭头函数创建在obj上</div><div class="line">      &#125;,100);</div><div class="line">    &#125;</div><div class="line">    fn4: function () &#123;</div><div class="line">      var that = this;</div><div class="line">      setTimeout(function () &#123;</div><div class="line">        console.log(that)          //obj 在setTimeout里面引用obj</div><div class="line">        console.log(this)          //window</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    fn5: function () &#123;</div><div class="line">      var f1 = () =&gt; &#123;</div><div class="line">        console.log(this);         // obj f1定义处在obj里面</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">          console.log(this);       // obj 箭头函数定义处在obj里面</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      f1();</div><div class="line">    &#125;</div><div class="line">    fn6: function () &#123;</div><div class="line">      var f2 = function () &#123;</div><div class="line">        console.log(this);         // window, f2调用时,没有宿主对象,默认是window</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">          console.log(this);      // window 箭头函数定义在f2确定的window里面</div><div class="line">        &#125;)</div><div class="line">      &#125;;</div><div class="line">      f2();</div><div class="line">    &#125;</div><div class="line">    fn7: function () &#123;</div><div class="line">      &apos;use strict&apos;;</div><div class="line">      var f3 = function () &#123;</div><div class="line">        console.log(this); // undefined</div><div class="line">        setTimeout(() =&gt; &#123;</div><div class="line">          console.log(this); // undefined</div><div class="line">        &#125;)</div><div class="line">      &#125;;</div><div class="line">      f3();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.fn1();</div><div class="line">obj.fn2();</div><div class="line">obj.fn3();</div><div class="line">obj.fn4();</div><div class="line">···</div><div class="line"></div><div class="line">1、</div><div class="line">function foo()&#123;</div><div class="line">	setTimeout(function()&#123;</div><div class="line">    console.log(this) //window 匿名函数，找不到宿主对象</div><div class="line">  &#125;, 100);</div><div class="line">  setTimeout(() =&gt; &#123;</div><div class="line">    console.log(this) //window foo挂载在window对象上</div><div class="line">  &#125;, 100);</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line">foo.call(&#123;id:42&#125;); //window &#123;id:42&#125; foo运行时所在的对象，恰好是箭头函数定义时所在的对象</div><div class="line">//call([thisObj[,arg1[, arg2,....]) 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</div><div class="line"></div><div class="line">2、</div><div class="line">function method() &#123;</div><div class="line">  alert(this.value);  // 输出 42  第二个this</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Foo() &#123;</div><div class="line">    this.value = 42;</div><div class="line">    setTimeout(this.method, 500);  // 这里this指向window   第一个this</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo();</div><div class="line">//Foo挂载在window上，当执行Foo时，this指向window,Foo里面的value被挂到window，method本来就挂在window上，所以执行this.method就是调用window.method</div><div class="line">//method执行，它的this指向window,这时window已经挂上value值42</div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/libin-1/p/5814792.html" target="_blank" rel="external">应用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;普通函数中的this&quot;&gt;&lt;a href=&quot;#普通函数中的this&quot; class=&quot;headerlink&quot; title=&quot;普通函数中的this&quot;&gt;&lt;/a&gt;普通函数中的this&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;this总是代表它的直接调用者, 例如 obj.func ,那么
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Travish CI使用</title>
    <link href="http://yoohannah.github.io/post/knowledge/TravishCI.html"/>
    <id>http://yoohannah.github.io/post/knowledge/TravishCI.html</id>
    <published>2017-08-07T21:59:37.000Z</published>
    <updated>2017-08-07T22:00:13.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Travish-CI使用"><a href="#Travish-CI使用" class="headerlink" title="Travish CI使用"></a>Travish CI使用</h1><p>1、使用github 账号登陆<a href="https://www.travis-ci.org/" target="_blank" rel="external">https://www.travis-ci.org/</a><br>2、点击右上角自己的账户名，选择accounts,弹出在github上所有的仓库<br><img src="/image/ci1.png" alt="ci1.png"><br>点击这个按钮重新从github上获取所有仓库<br><img src="/image/ci2.png" alt="ci2.png"><br>3、点击对应仓库按钮，变为对勾，则开启对应仓库的集成化测试,每次提交代码到远程仓库都进行一次测试<br>4、点击仓库名,可进入到测试界面，<br><img src="/image/ci3.png" alt="ci3.png"><br>5、为项目添加.travis.yml文件<br>.travis.yml 文件编写的相关语法可参考<a href="https://docs.travis-ci.com/user/languages/javascript-with-nodejs/" target="_blank" rel="external">https://docs.travis-ci.com/user/languages/javascript-with-nodejs/</a></p>
<p>.travis.yml 文件可以在<a href="https://lint.travis-ci.org/" target="_blank" rel="external">https://lint.travis-ci.org/</a>页面进行检查，是否编写正确</p>
<p>6、push代码,在Travish CI等待测试结果<br>页面图标因为有缓存所以可能出现不能及时更换状态的情况,这个注意看结果就好</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Travish-CI使用&quot;&gt;&lt;a href=&quot;#Travish-CI使用&quot; class=&quot;headerlink&quot; title=&quot;Travish CI使用&quot;&gt;&lt;/a&gt;Travish CI使用&lt;/h1&gt;&lt;p&gt;1、使用github 账号登陆&lt;a href=&quot;https:
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>fork仓库</title>
    <link href="http://yoohannah.github.io/post/knowledge/fork.html"/>
    <id>http://yoohannah.github.io/post/knowledge/fork.html</id>
    <published>2017-08-07T21:58:37.000Z</published>
    <updated>2017-08-19T02:03:14.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h1><p>在页面点击Fork,将被人的仓库复制到自己的远程仓库<br>使用git clone 将远程仓库克隆到本地<br>切换分支到develop git checkout -b develop<br>修改完代码后<br>git add . &amp;&amp; git commit -m ‘test new pull request’<br>git push origin develop<br>然后在github页面找到刚刚fork的仓库,切换branch到develop,<br>点击New pull request进行merge</p>
<h1 id="保持与原仓库同步"><a href="#保持与原仓库同步" class="headerlink" title="保持与原仓库同步"></a>保持与原仓库同步</h1><p>git remote -v<br>查看当前的远程仓库地址，输出如下：</p>
<p>origin  <a href="https://github.com/YooHannah/homework2.git" target="_blank" rel="external">https://github.com/YooHannah/homework2.git</a> (fetch)<br>origin  <a href="https://github.com/YooHannah/homework2.git" target="_blank" rel="external">https://github.com/YooHannah/homework2.git</a> (push)<br>可以看到从自己帐号 clone 下来的仓库，远程仓库地址是与自己的远程仓库绑定的（这不是废话吗）</p>
<p>接下来运行</p>
<p>git remote add upstream <a href="https://github.com/FE-star/homework2.git" target="_blank" rel="external">https://github.com/FE-star/homework2.git</a><br>这条命令就算添加一个别名为 upstream（上游）的地址，指向之前 fork 的原仓库地址。git remote -v 输出如下：</p>
<p>origin  <a href="https://github.com/YooHannah/homework2.git" target="_blank" rel="external">https://github.com/YooHannah/homework2.git</a> (fetch)<br>origin  <a href="https://github.com/YooHannah/homework2.git" target="_blank" rel="external">https://github.com/YooHannah/homework2.git</a> (push)<br>upstream        <a href="https://github.com/FE-star/homework2.git" target="_blank" rel="external">https://github.com/FE-star/homework2.git</a> (fetch)<br>upstream        <a href="https://github.com/FE-star/homework2.git" target="_blank" rel="external">https://github.com/FE-star/homework2.git</a> (push)<br>之后运行下面几条命令，就可以保持本地仓库和上游仓库同步了</p>
<p>git fetch upstream<br>git checkout master 如果本来就在master上就不用切换<br>git merge upstream/master<br>接着就是熟悉的推送本地仓库到远程仓库</p>
<p>git push origin master</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;fork&quot;&gt;&lt;a href=&quot;#fork&quot; class=&quot;headerlink&quot; title=&quot;fork&quot;&gt;&lt;/a&gt;fork&lt;/h1&gt;&lt;p&gt;在页面点击Fork,将被人的仓库复制到自己的远程仓库&lt;br&gt;使用git clone 将远程仓库克隆到本地&lt;br&gt;切换分支到d
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>事件冒泡和事件捕获</title>
    <link href="http://yoohannah.github.io/post/knowledge/eventPopCatch.html"/>
    <id>http://yoohannah.github.io/post/knowledge/eventPopCatch.html</id>
    <published>2017-08-06T08:10:02.000Z</published>
    <updated>2017-08-06T08:32:33.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="addEventListener-attachEvent-element-onclick"><a href="#addEventListener-attachEvent-element-onclick" class="headerlink" title="addEventListener/attachEvent/element.onclick"></a>addEventListener/attachEvent/element.onclick</h1><p>辨别区分addEventListener、attachEvent和element.onclick</p>
<h2 id="attachEvent事件"><a href="#attachEvent事件" class="headerlink" title="attachEvent事件"></a>attachEvent事件</h2><p>attachEvent是ie添加事件处理程序,接收两个参数,其中事件类型名称要加”on”,<br>可以添加多个事件处理程序,按照添加顺序相反的顺序触发</p>
<h2 id="addEventListener事件"><a href="#addEventListener事件" class="headerlink" title="addEventListener事件"></a>addEventListener事件</h2><p>addEventListener是给非ie添加事件处理程序,接收三个参数,第一个是事件名,不需要加“on”,<br>第二个是绑定的函数，第三个参数是一个布尔值,如果是false,就使用传统的冒泡方式,<br>如果为true,就在捕获阶段调用事件处理程序<br>可以添加多个事件处理程序，按照添加顺序触发</p>
<h2 id="onclick"><a href="#onclick" class="headerlink" title="onclick"></a>onclick</h2><p>el.onclick相当于在标签上写onclick</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>1.上下文<br>attachEvent会在全局作用域中运行，this等于window对象<br>addEventLinstener在其依附的元素的作用域中运行,this等于绑定元素对象<br>使this关键字都指向元素处理方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function bind(el, fn, type)&#123;</div><div class="line">        var _fn = function()&#123;</div><div class="line">                fn.apply(el, arguments);</div><div class="line">        &#125;;</div><div class="line">        window.addEventListener ? el.addEventListener(type, _fn, false) : el.attachEvent(&quot;on&quot; + type, _fn);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.绑定<br>el.onclick通过标签的onclick属性输入到文档,然后由文档解析成事件<br>attachEvent和addEventLinstener要在文档解析完成以后,通过文档的dom接口去绑定的事件<br><a href="http://blog.csdn.net/u011700203/article/details/47656857" target="_blank" rel="external">资源加载和页面事件</a></p>
<p>3.取消绑定<br>el.onclick：el.onclick=null;<br>addEventListener：removeEventListener()；<br>attachEvent()：detachEvent()</p>
<p>4.获取event事件<br>非IE:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">el.onclick=function(event)&#123;</div><div class="line">　　alert(event.type);           //&quot;click&quot;</div><div class="line">&#125;;</div><div class="line">el.addEventListener(&quot;click&quot;,function(event)&#123;</div><div class="line">　　alert(event.type);               //&quot;click&quot;</div><div class="line">&#125;,false);</div></pre></td></tr></table></figure></p>
<p>IE:<br>通过el.onclick绑定的事件处理程序中，event对象作为window对象的一个属性存在。<br>el.onclick=function(){<br>　　var event=window.event;<br>　　alert(event.type);              //“click”<br>}<br>如果通过attachEvent()添加事件处理程序时，event对象作为参数被传入事件处理程序，<br>el.attachEvent(“onclick”,function(event){<br>　　alert(event.type);                 //“click”<br>});</p>
<p>标签时一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;Click me&quot; onclick=&quot;alert(event.type)&quot;/&gt;   //&quot;click&quot;</div></pre></td></tr></table></figure></p>
<h1 id="事件捕获、事件冒泡"><a href="#事件捕获、事件冒泡" class="headerlink" title="事件捕获、事件冒泡"></a>事件捕获、事件冒泡</h1><p>二者是指当事件在某一DOM元素被触发时,该DOM元素的父级元素也绑定了触发事件,则触发事件的执行顺序</p>
<h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>事件自下而上依次执行,先执行子元素触发事件，再执行父元素触发事件，<br>addEventListener第三个参数设置为false,参数不设置默认是冒泡执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;parent&quot;&gt;</div><div class="line">　　&lt;div id=&quot;child&quot; class=&quot;child&quot;&gt;您好&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        document.getElementById(&quot;parent&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">            alert(&quot;parent事件被触发，&quot;+this.id);</div><div class="line">        &#125;)</div><div class="line">        document.getElementById(&quot;child&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">            alert(&quot;child事件被触发，&quot;+this.id)</div><div class="line">        &#125;)</div><div class="line">        document.getElementById(&quot;parent&quot;).onclick=function(e)&#123;</div><div class="line">            alert(&quot;parentonclik事件被触发，&quot;+this.id);</div><div class="line">        &#125;</div><div class="line">        document.getElementById(&quot;child&quot;).onclick=function(e)&#123;</div><div class="line">            alert(&quot;childonclik事件被触发，&quot;+this.id);</div><div class="line">        &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">//点击&apos;您好&apos;,弹出顺序:child事件被触发-&gt;childonclik事件被触发-&gt;parent事件被触发-&gt;parentonclik事件被触发</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        document.getElementById(&quot;parent&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">             alert(&quot;parent事件被触发，&quot;+this.id);</div><div class="line">        &#125;,false)</div><div class="line">        document.getElementById(&quot;child&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">            alert(&quot;child事件被触发，&quot;+this.id)</div><div class="line">        &#125;,true)</div><div class="line">&lt;/script&gt;</div><div class="line">//点击&apos;您好&apos;,先弹出child事件被触发,再弹出parent事件被触发</div></pre></td></tr></table></figure></p>
<h2 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h2><p>事件从上到下一次执行,先执行父元素触发事件，再执行子元素触发事件,<br>addEventListener第三个参数设置为true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;parent&quot;&gt;</div><div class="line">　　&lt;div id=&quot;child&quot; class=&quot;child&quot;&gt;您好&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">document.getElementById(&quot;parent&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">    alert(&quot;parent事件被触发，&quot;+this.id);</div><div class="line">&#125;,true)</div><div class="line">document.getElementById(&quot;child&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">    alert(&quot;child事件被触发，&quot;+this.id)</div><div class="line">&#125;,true)</div><div class="line">document.getElementById(&quot;parent&quot;).onclick=function(e)&#123;</div><div class="line">    alert(&quot;parentonclik事件被触发，&quot;+this.id);</div><div class="line">&#125;</div><div class="line">document.getElementById(&quot;child&quot;).onclick=function(e)&#123;</div><div class="line">    alert(&quot;childonclik事件被触发，&quot;+this.id);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">//点击&apos;您好&apos;,弹出顺序:parent事件被触发-&gt;child事件被触发-&gt;childonclik事件被触发-&gt;parentonclik事件被触发</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">document.getElementById(&quot;parent&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">                alert(&quot;parent事件被触发，&quot;+this.id);</div><div class="line">            &#125;,true)</div><div class="line">            document.getElementById(&quot;child&quot;).addEventListener(&quot;click&quot;,function(e)&#123;</div><div class="line">                alert(&quot;child事件被触发，&quot;+this.id)</div><div class="line">            &#125;,false)</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">//点击&apos;您好&apos;,先弹出parent事件被触发,再弹出child事件被触发</div></pre></td></tr></table></figure></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//要求：鼠标放到li上对应的li背景变灰</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;item1&lt;/li&gt;</div><div class="line">    &lt;li&gt;item2&lt;/li&gt;</div><div class="line">    &lt;li&gt;item3&lt;/li&gt;</div><div class="line">    &lt;li&gt;item4&lt;/li&gt;</div><div class="line">    &lt;li&gt;item5&lt;/li&gt;</div><div class="line">    &lt;li&gt;item6&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">//实现一：利用事件冒泡实现,不用遍历所有li节点</div><div class="line">$(&quot;ul&quot;).on(&quot;mouseover&quot;,function(e)&#123;</div><div class="line">    $(e.target).css(&quot;background-color&quot;,&quot;#ddd&quot;).siblings().css(&quot;background-color&quot;,&quot;white&quot;);</div><div class="line">&#125;)</div><div class="line">//实现二：给每个li绑定事件，缺点，动态的加载了一些元素,新增li后，还要再绑定一次事件</div><div class="line">$(&quot;li&quot;).on(&quot;mouseover&quot;,function()&#123;</div><div class="line">    $(this).css(&quot;background-color&quot;,&quot;#ddd&quot;).siblings().css(&quot;background-color&quot;,&quot;white&quot;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="禁止冒泡"><a href="#禁止冒泡" class="headerlink" title="禁止冒泡"></a>禁止冒泡</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function doSomething(e) &#123;</div><div class="line">  if (!e) &#123;//微软模型</div><div class="line">    var e = window.event;</div><div class="line">    e.cancelBubble = true;</div><div class="line">  &#125;</div><div class="line">  if (e.stopPropagation) &#123;//w3c事件模型</div><div class="line">    e.stopPropagation();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;addEventListener-attachEvent-element-onclick&quot;&gt;&lt;a href=&quot;#addEventListener-attachEvent-element-onclick&quot; class=&quot;headerlink&quot; title=&quot;addE
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于Performance API</title>
    <link href="http://yoohannah.github.io/post/knowledge/Performance.html"/>
    <id>http://yoohannah.github.io/post/knowledge/Performance.html</id>
    <published>2017-08-02T22:38:02.000Z</published>
    <updated>2017-08-06T09:17:15.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="load-unload事件"><a href="#load-unload事件" class="headerlink" title="load/unload事件"></a>load/unload事件</h1><h2 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h2><p>当页面完全加载后（包括所有图像、JavaScript文件、CSS文件等外部资源），就会触发window上面的load事件<br>使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//方法一</div><div class="line">var EventUtil = &#123;</div><div class="line">addHandler: function(element, type, handler)&#123;</div><div class="line">	if (element.addEventListener) &#123;</div><div class="line">            element.addEventListener(type, handler, false);</div><div class="line">        &#125; else if (element.attachEvent) &#123;</div><div class="line">            element.attachEvent(&quot;on&quot; + type, handler);</div><div class="line">        &#125; else &#123;</div><div class="line">            element[&quot;on&quot; + type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">EventUtil.addHandler(window,&quot;load&quot;,function(event)&#123;</div><div class="line"> alert(&quot;loaded!&quot;);</div><div class="line"> &#125;);</div><div class="line">//方法二</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;load Event Example&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body onload = &quot;alert(&quot;Loaded!&quot;)&quot;&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>document.ready 监控dom是否加载完毕，dom加载完毕时及资源加载之前触发<br>DOMContentLoaded 当页面的DOM树解析好并且需要等待js执行完才触发</p>
<h2 id="unload事件"><a href="#unload事件" class="headerlink" title="unload事件"></a>unload事件</h2><p>在文档被完全卸载后触发,只要用户切换到另一个页面，就会发生unload事件。<br>利用这个事件最多的情况是清除引用，以避免内存泄漏<br>使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//方法一</div><div class="line">var EventUtil = &#123;</div><div class="line">    getEvent: function (event) &#123;</div><div class="line">        return event ? event : window.event;</div><div class="line">    &#125;,</div><div class="line">    addHandler: function (element, type, handler) &#123;</div><div class="line">        if (element.addEventListener) &#123;</div><div class="line">            element.addEventListener(type, handler, false);</div><div class="line">        &#125; else if (element.attachEvent) &#123;</div><div class="line">            element.attachEvent(&quot;on&quot; + type, handler);</div><div class="line">        &#125; else &#123;</div><div class="line">            element[&quot;on&quot; + type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">EventUtil.addHandler(window, &quot;unload&quot;, function (event) &#123;</div><div class="line">    alert(&quot;Unloaded&quot;);</div><div class="line">&#125;)</div><div class="line">//方法二</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;tilte&gt;卸载（unload）事件&lt;/tile&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body onunload=&quot;alert(&apos;Unload&apos;)&quot;&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h1 id="Performance-API"><a href="#Performance-API" class="headerlink" title="Performance API"></a>Performance API</h1><p>Performance 接口会给出某个页面的与时间相关的性能信息<br>使用方法为 window.performance.属性/方法</p>
<p>Performance API用于精确度量、控制、增强浏览器的性能表现。这个API为测量网站性能，提供以前没有办法做到的精度<br>目前，所有主要浏览器都已经支持performance对象，包括Chrome 20+、Firefox 15+、IE 10+、Opera 15+。</p>
<h2 id="performance-timing"><a href="#performance-timing" class="headerlink" title="performance.timing"></a>performance.timing</h2><p>包含各种与浏览器性能有关的时间数据，提供浏览器处理网页各个阶段的耗时</p>
<ul>
<li>navigationStart：当前浏览器窗口的前一个网页关闭，发生unload事件时的Unix毫秒时间戳。如果没有前一个网页，则等于fetchStart属性。即浏览器处理当前网页的启动时间</li>
<li>unloadEventStart：如果前一个网页与当前网页属于同一个域名，则返回前一个网页的unload事件发生时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。</li>
<li>unloadEventEnd：如果前一个网页与当前网页属于同一个域名，则返回前一个网页unload事件的回调函数结束时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。</li>
<li>redirectStart：返回第一个HTTP跳转开始时的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。</li>
<li>redirectEnd：返回最后一个HTTP跳转结束时（即跳转回应的最后一个字节接受完成时）的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。</li>
<li>fetchStart：返回浏览器准备使用HTTP请求读取文档时的Unix毫秒时间戳。该事件在网页查询本地缓存之前发生。</li>
<li>domainLookupStart：返回域名查询开始时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。</li>
<li>domainLookupEnd：返回域名查询结束时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。</li>
<li>connectStart：返回HTTP请求开始向服务器发送时的Unix毫秒时间戳。如果使用持久连接（persistent connection），则返回值等同于fetchStart属性的值。</li>
<li>connectEnd：返回浏览器与服务器之间的连接建立时的Unix毫秒时间戳。如果建立的是持久连接，则返回值等同于fetchStart属性的值。连接建立指的是所有握手和认证过程全部结束。</li>
<li>secureConnectionStart：返回浏览器与服务器开始安全链接的握手时的Unix毫秒时间戳。如果当前网页不要求安全连接，则返回0。</li>
<li>requestStart：返回浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的Unix毫秒时间戳。</li>
<li>responseStart：返回浏览器从服务器收到（或从本地缓存读取）第一个字节时的Unix毫秒时间戳。</li>
<li>responseEnd：返回浏览器从服务器收到（或从本地缓存读取）最后一个字节时（如果在此之前HTTP连接已经关闭，则返回关闭时）的Unix毫秒时间戳。</li>
<li>domLoading：返回当前网页DOM结构开始解析时（即Document.readyState属性变为“loading”、相应的readystatechange事件触发时）的Unix毫秒时间戳。</li>
<li>domInteractive：返回当前网页DOM结构结束解析、开始加载内嵌资源时（即Document.readyState属性变为“interactive”、相应的readystatechange事件触发时）的Unix毫秒时间戳。</li>
<li>domContentLoadedEventStart：返回当前网页DOMContentLoaded事件发生时（即DOM结构解析完毕、所有脚本开始运行时）的Unix毫秒时间戳。</li>
<li>domContentLoadedEventEnd：返回当前网页所有需要执行的脚本执行完成时的Unix毫秒时间戳。</li>
<li>domComplete：返回当前网页DOM结构生成时（即Document.readyState属性变为“complete”，以及相应的readystatechange事件发生时）的Unix毫秒时间戳。</li>
<li>loadEventStart：返回当前网页load事件的回调函数开始时的Unix毫秒时间戳。如果该事件还没有发生，返回0。</li>
<li>loadEventEnd：返回当前网页load事件的回调函数运行结束时的Unix毫秒时间戳。如果该事件还没有发生，返回0。</li>
</ul>
<p>unloadEventStart 不等于navigationStart，navigationStart比unloadEventStart早<br>domComplete 等于 loadEventStart</p>
<h2 id="performance-now"><a href="#performance-now" class="headerlink" title="performance.now()"></a>performance.now()</h2><p>performance.now方法返回当前网页自从performance.timing.navigationStart到当前时间之间的微秒数（毫秒的千分之一）。</p>
<h2 id="performance-mark"><a href="#performance-mark" class="headerlink" title="performance.mark()"></a>performance.mark()</h2><p>mark方法用于为相应的视点做标记。<br>window.performance.mark(‘mark_fully_loaded’);<br>clearMarks方法用于清除标记，如果不加参数，就表示清除所有标记。<br>window.peformance.clearMarks(‘mark_fully_loaded’);<br>window.performance.clearMarks();</p>
<h2 id="performance-getEntries"><a href="#performance-getEntries" class="headerlink" title="performance.getEntries()"></a>performance.getEntries()</h2><p>浏览器获取网页时，会对网页中每一个对象（脚本文件、样式表、图片文件等等）发出一个HTTP请求。performance.getEntries方法以数组形式，返回这些请求的时间统计信息，有多少个请求，返回数组就会有多少个成员.<br>由于该方法与浏览器处理网页的过程相关，所以只能在浏览器中使用。<br>window.performance.getEntries()[0] //获取第一个HTTP请求（即网页的HTML源码）的时间统计信息</p>
<h2 id="performance-navigation对象"><a href="#performance-navigation对象" class="headerlink" title="performance.navigation对象"></a>performance.navigation对象</h2><p>1、performance.navigation.type<br>该属性返回一个整数值，表示网页的加载来源，可能有以下4种情况：</p>
<ul>
<li>0：网页通过点击链接、地址栏输入、表单提交、脚本操作等方式加载，相当于常数performance.navigation.TYPE_NAVIGATENEXT。</li>
<li>1：网页通过“重新加载”按钮或者location.reload()方法加载，相当于常数performance.navigation.TYPE_RELOAD。</li>
<li>2：网页通过“前进”或“后退”按钮加载，相当于常数performance.navigation.TYPE_BACK_FORWARD。</li>
<li>255：任何其他来源的加载，相当于常数performance.navigation.TYPE_UNDEFINED。</li>
</ul>
<p>2、performance.navigation.redirectCount<br>该属性表示当前网页经过了多少次重定向跳转.<br><a href="https://www.kancloud.cn/kancloud/javascript-standards-reference/46507" target="_blank" rel="external">参考资料</a></p>
<h1 id="页面请求加载过程"><a href="#页面请求加载过程" class="headerlink" title="页面请求加载过程"></a>页面请求加载过程</h1><p>var t = performance.timing;</p>
<p>1、首先，在浏览器地址栏中输入url</p>
<p>2、浏览器先查看浏览器缓存-系统缓存-路由器缓存，如果缓存中有，会直接在屏幕中显示页面内容。若没有，则跳到第三步操作。</p>
<p>3、在发送http请求前，需要域名解析(DNS解析)，解析获取相应的IP地址。<br>     var dns = t.domainLookupEnd - t.domainLookupStart; //域名解析时间<br>4、浏览器向服务器发起tcp连接，与浏览器建立tcp三次握手。<br>     var tcp = t.connectEnd - t.connectStart;//浏览器与服务器之间的连接建立时间<br>5、握手成功后，浏览器向服务器发送http请求，请求数据包。<br>     t.requestStart 浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的时间<br>6、服务器处理收到的请求，将数据返回至浏览器</p>
<p>7、浏览器收到HTTP响应<br>     var ttfb = t.responseStart - t.navigationStart;//读取页面第一个字节之前的耗时<br>8、读取页面内容，浏览器渲染，解析html源码<br>     var getdata = t.responseEnd-t.responseStart;//接收数据时间<br>9、生成Dom树、解析css样式、js交互<br>   var dom = t.domInteractive-t.domLoading; //从构建DOM到页面与用户可以开始交互的时间<br>   var script= t.domContentLoadedEventEnd-t.domContentLoadedEventStart;//脚本运行时间<br>   var load = t.loadEventEnd-t.loadEventStart;//load事件处理时间</p>
<p>10、客户端和服务器交互</p>
<p>11、ajax查询</p>
<p>步骤二详细步骤</p>
<ul>
<li>浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；</li>
<li>操作系统缓存：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统，获取操作系统的记录(保存最近的DNS查询缓存)；</li>
<li>路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；</li>
<li>ISP缓存：若上述均失败，继续向ISP搜索。</li>
</ul>
<p>浏览器渲染步骤</p>
<ul>
<li>解析html以构建dom树 分词器器、解析器</li>
<li>构建render树</li>
<li>布局render树</li>
<li>绘制render树</li>
</ul>
<p>渲染引擎开始解析html，并将标签转化为内容树中的dom节点。接着，它解析外部CSS文件及style标签中的样式信息。这些样式信息以及html中的可见性指令将被用来构建另一棵树——render树。</p>
<p>Render树由一些包含有颜色和大小等属性的矩形组成，它们将被按照正确的顺序显示到屏幕上。</p>
<p>Render树构建好了之后，将会执行布局过程，它将确定每个节点在屏幕上的确切坐标。再下一步就是绘制，即遍历render树，并使用UI后端层绘制每个节点</p>
<p><a href="http://www.uml.org.cn/html/201207184.asp" target="_blank" rel="external">现代浏览器工作原理</a></p>
<h1 id="Navigator-对象"><a href="#Navigator-对象" class="headerlink" title="Navigator 对象"></a>Navigator 对象</h1><p>包含有关浏览器的信息。<br>appCodeName    返回浏览器的代码名<br>appName    返回浏览器的名称<br>appVersion    返回浏览器的平台和版本信息<br>cookieEnabled    返回指明浏览器中是否启用 cookie 的布尔值<br>platform    返回运行浏览器的操作系统平台<br>userAgent    返回由客户机发送服务器的user-agent 头部的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">js 获取操作系统</div><div class="line">function detectOS() &#123;</div><div class="line">    var sUserAgent = navigator.userAgent;</div><div class="line">    var isWin = (navigator.platform == &quot;Win32&quot;) || (navigator.platform == &quot;Windows&quot;);</div><div class="line">    var isMac = (navigator.platform == &quot;Mac68K&quot;) || (navigator.platform == &quot;MacPPC&quot;) || (navigator.platform == &quot;Macintosh&quot;) || (navigator.platform == &quot;MacIntel&quot;);</div><div class="line">    if (isMac) return &quot;Mac&quot;;</div><div class="line">    var isUnix = (navigator.platform == &quot;X11&quot;) &amp;&amp; !isWin &amp;&amp; !isMac;</div><div class="line">    if (isUnix) return &quot;Unix&quot;;</div><div class="line">    var isLinux = (String(navigator.platform).indexOf(&quot;Linux&quot;) &gt; -1);</div><div class="line">    if (isLinux) return &quot;Linux&quot;;</div><div class="line">    if (isWin) &#123;</div><div class="line">        var isWin2K = sUserAgent.indexOf(&quot;Windows NT 5.0&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows 2000&quot;) &gt; -1;</div><div class="line">        if (isWin2K) return &quot;Win2000&quot;;</div><div class="line">        var isWinXP = sUserAgent.indexOf(&quot;Windows NT 5.1&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows XP&quot;) &gt; -1;</div><div class="line">        if (isWinXP) return &quot;WinXP&quot;;</div><div class="line">        var isWin2003 = sUserAgent.indexOf(&quot;Windows NT 5.2&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows 2003&quot;) &gt; -1;</div><div class="line">        if (isWin2003) return &quot;Win2003&quot;;</div><div class="line">        var isWinVista= sUserAgent.indexOf(&quot;Windows NT 6.0&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows Vista&quot;) &gt; -1;</div><div class="line">        if (isWinVista) return &quot;WinVista&quot;;</div><div class="line">        var isWin7 = sUserAgent.indexOf(&quot;Windows NT 6.1&quot;) &gt; -1 || sUserAgent.indexOf(&quot;Windows 7&quot;) &gt; -1;</div><div class="line">        if (isWin7) return &quot;Win7&quot;;</div><div class="line">    &#125;</div><div class="line">    return &quot;other&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">document.writeln(&quot;您的操作系统是：&quot; + detectOS());</div></pre></td></tr></table></figure></p>
<p><a href="http://blog.csdn.net/littleqiang_w/article/details/50463939" target="_blank" rel="external">js判断浏览器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;load-unload事件&quot;&gt;&lt;a href=&quot;#load-unload事件&quot; class=&quot;headerlink&quot; title=&quot;load/unload事件&quot;&gt;&lt;/a&gt;load/unload事件&lt;/h1&gt;&lt;h2 id=&quot;load事件&quot;&gt;&lt;a href=&quot;#loa
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于CDN</title>
    <link href="http://yoohannah.github.io/post/knowledge/cdn.html"/>
    <id>http://yoohannah.github.io/post/knowledge/cdn.html</id>
    <published>2017-08-02T22:37:02.000Z</published>
    <updated>2017-10-06T09:21:15.776Z</updated>
    
    <content type="html"><![CDATA[<p>cdn 是一种从网络层面优化页面访问速度的手段<br>CDN服务商提供一项智能域名解析服务，这种智能DNS服务在浏览器发起域名查询时，会根据用户IP计算并返回离它最近的同网络CDN节点IP，引导浏览器与此节点建立连接以获取资源。<br>不同地区的用户访问同一个域名，依赖CDN服务商提供的智能域名解析服务得到不同CDN节点的IP地址<br>不同地区的用户会访问到离自己最近的相同网络线路上的CDN节点，当请求达到CDN节点后，节点会判断自己的内容缓存是否有效，如果有效，则立即响应缓存内容给用户，从而加快响应速度。如果CDN节点的缓存失效，它会根据服务配置去我们的内容源服务器获取最新的资源响应给用户，并将内容缓存下来以便响应给后续访问的用户。因此，一个地区内只要有一个用户先加载资源，在CDN中建立了缓存，该地区的其他后续用户都能因此而受益。<br>通过将静态资源缓存到离用户很近的相同网络运营商的CDN节点上，不但能提升用户的访问速度，还能节省服务器的带宽消耗，降低负载。<br>好的cdn服务到源服务器获取文件会通过专用的线路，这样就会比用户直接从源服务器获取资源快<br><img src="/image/cdn.png" alt="cdn缓存技术原理"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cdn 是一种从网络层面优化页面访问速度的手段&lt;br&gt;CDN服务商提供一项智能域名解析服务，这种智能DNS服务在浏览器发起域名查询时，会根据用户IP计算并返回离它最近的同网络CDN节点IP，引导浏览器与此节点建立连接以获取资源。&lt;br&gt;不同地区的用户访问同一个域名，依赖CD
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>常见页面布局小结</title>
    <link href="http://yoohannah.github.io/post/knowledge/layouts.html"/>
    <id>http://yoohannah.github.io/post/knowledge/layouts.html</id>
    <published>2017-08-02T22:30:02.000Z</published>
    <updated>2017-08-06T13:02:47.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h1><p>三栏布局,左右两栏宽度固定,中间一栏宽度随屏幕宽度自适应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;header&quot;&gt;#header&lt;/div&gt;</div><div class="line">&lt;div id=&quot;container&quot;&gt;</div><div class="line">  &lt;div id=&quot;center&quot; class=&quot;column&quot;&gt;#center&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;left&quot; class=&quot;column&quot;&gt;#left&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;right&quot; class=&quot;column&quot;&gt;#right&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;footer&quot;&gt;#footer&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">  body &#123;</div><div class="line">  min-width: 550px;      /* 2x LC width + RC width */</div><div class="line">&#125;</div><div class="line">#container &#123;</div><div class="line">  padding-left: 200px;   /* LC width */</div><div class="line">  padding-right: 150px;  /* RC width */</div><div class="line">&#125;</div><div class="line">#container .column &#123;</div><div class="line">  min-height: 200px;/* 高度自适应*/</div><div class="line">  position: relative;/* 让左右两栏进行相对位移，位移到container的内边距位置 */</div><div class="line">  float: left;</div><div class="line">&#125;</div><div class="line">#center &#123;</div><div class="line">  background-color: #e9e9e9;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div><div class="line">#left &#123;</div><div class="line">  background-color: red;</div><div class="line">  width: 200px;          /* LC width */</div><div class="line">  right: 200px;           /*LC width *//*相对于 container 的右边线向左偏移 200px 将自己位移到container内边距 */</div><div class="line">  margin-left: -100%;/*浮动到与中间平行 */</div><div class="line">&#125;</div><div class="line">#right &#123;</div><div class="line">  background-color: blue;</div><div class="line">  width: 150px;          /* RC width */</div><div class="line">  margin-right: -150px;  /* RC width */</div><div class="line">&#125;</div><div class="line">#footer &#123;</div><div class="line">  clear: both;/*清除 footer 的上下环境，以免遭跟上面三栏一起浮动*/</div><div class="line">&#125;</div><div class="line">#header, </div><div class="line">#footer &#123;</div><div class="line">  background-color: #c9c9c9;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p><img src="/image/holy1.png" alt="圣杯1"><br><img src="/image/holy2.png" alt="圣杯2"></p>
<h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><p>效果同圣杯布局，只是写法上DOM在center里面新增加了div,css不再使用relative定位，只是用float和外边距<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;header&quot;&gt;header&lt;/div&gt;</div><div class="line">&lt;div id=&quot;container&quot;&gt;</div><div class="line">  &lt;div id=&quot;center&quot; class=&quot;column&quot;&gt;</div><div class="line">    &lt;div id=&quot;innerCenter&quot;&gt;center&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;div id=&quot;left&quot; class=&quot;column&quot;&gt;left&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;right&quot; class=&quot;column&quot;&gt;right&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;footer&quot;&gt;footer&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">  body &#123;</div><div class="line">    min-width: 351px; /* LC width + RC width +1*/</div><div class="line">  &#125;</div><div class="line">  #container .column &#123;</div><div class="line">    min-height: 200px;</div><div class="line">    float: left;</div><div class="line">  &#125;</div><div class="line">  #center &#123;</div><div class="line">    background-color: #e9e9e9;</div><div class="line">    width: 100%;</div><div class="line">  &#125;</div><div class="line">  #left &#123;</div><div class="line">    background-color: red;</div><div class="line">    width: 200px;</div><div class="line">    margin-left: -100%;</div><div class="line">  &#125;</div><div class="line">  #right &#123;</div><div class="line">    background-color: blue;</div><div class="line">    width: 150px;</div><div class="line">    margin-left: -150px;</div><div class="line">  &#125;</div><div class="line">  #footer &#123;</div><div class="line">    clear: both;</div><div class="line">  &#125;</div><div class="line">  #header, #footer &#123;</div><div class="line">    background-color: #c9c9c9;</div><div class="line">  &#125;</div><div class="line">  #innerCenter &#123; /*代替圣杯container的padding处理*/</div><div class="line">    margin-left: 200px;</div><div class="line">    margin-right: 150px;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p><img src="/image/holy3.png" alt="圣杯3"><br><img src="/image/holy4.png" alt="圣杯4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;圣杯布局&quot;&gt;&lt;a href=&quot;#圣杯布局&quot; class=&quot;headerlink&quot; title=&quot;圣杯布局&quot;&gt;&lt;/a&gt;圣杯布局&lt;/h1&gt;&lt;p&gt;三栏布局,左右两栏宽度固定,中间一栏宽度随屏幕宽度自适应&lt;br&gt;&lt;figure class=&quot;highlight plain
    
    </summary>
    
    
      <category term="css" scheme="http://yoohannah.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>使用QRcode.js生成二维码</title>
    <link href="http://yoohannah.github.io/post/knowledge/qrcode.html"/>
    <id>http://yoohannah.github.io/post/knowledge/qrcode.html</id>
    <published>2017-07-31T23:26:37.000Z</published>
    <updated>2017-07-31T23:26:11.497Z</updated>
    
    <content type="html"><![CDATA[<p>在页面中引入QRcode.js文件，再js部分进行定义<br>var qrcode = new QRCode(document.getElementById(“qrcode0”), { //qrcode0放置二维码容器的id<br>        width : 150,//二维码大小<br>        height : 150<br>});<br>qrcode.makeCode(url);//url,生成二维码的依据</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在页面中引入QRcode.js文件，再js部分进行定义&lt;br&gt;var qrcode = new QRCode(document.getElementById(“qrcode0”), { //qrcode0放置二维码容器的id&lt;br&gt;        width : 150,/
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Angularjs 利用图片更换emoji表情</title>
    <link href="http://yoohannah.github.io/post/knowledge/angularjsfilterEmoji.html"/>
    <id>http://yoohannah.github.io/post/knowledge/angularjsfilterEmoji.html</id>
    <published>2017-07-31T22:46:02.000Z</published>
    <updated>2017-07-31T22:49:19.555Z</updated>
    
    <content type="html"><![CDATA[<p>在某些浏览器中,emoji表情不能正常显示,只能显示原始状态如下<br><img src="/image/emoji1.png" alt="erroremoji"><br>为使表情正常显示，这里利用转码方法将emoji符号用图片替换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对数据$scope.data.remark做表情替换处理,$scope.data.remark是包含emoji符号的字符串</span></div><div class="line">    <span class="keyword">var</span> str=$scope.data.remark;</div><div class="line">    str=str.replace(rep,<span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123; <span class="comment">//code即匹配到的emoji符号,对该符号通过_escapeToUtf32(code)转码,得到对应图片名,然后图片替换</span></div><div class="line">     <span class="keyword">return</span> <span class="string">'&lt;img class="emoji" style="vertical-align:middle" src="assets/img/emoji/'</span>+_escapeToUtf32(code) + <span class="string">'.png"&gt;'</span>;</div><div class="line">    &#125;)</div><div class="line">    $scope.data.remark = str;</div><div class="line"></div><div class="line"><span class="comment">//用emoji符号的unicode码匹配emoji符号,例如270c匹配 victory hand符号</span></div><div class="line"> <span class="keyword">var</span> rep =<span class="regexp">/\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F]|\u270c|\u261d/g</span>;</div><div class="line"></div><div class="line"><span class="comment">//emoji 表情转码</span></div><div class="line">  <span class="function"><span class="keyword">function</span>  <span class="title">_escapeToUtf32</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> escaped = [],</div><div class="line">      unicodeCodes = _convertStringToUnicodeCodePoints(str),</div><div class="line">      i = <span class="number">0</span>,</div><div class="line">      l = unicodeCodes.length,</div><div class="line">      hex;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; i &lt; l; i++) &#123;</div><div class="line">      hex = unicodeCodes[i].toString(<span class="number">16</span>);</div><div class="line">      escaped.push(<span class="string">'0000'</span>.substr(hex.length) + hex);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> escaped.join(<span class="string">'-'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">_convertStringToUnicodeCodePoints</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> surrogate1st = <span class="number">0</span>,</div><div class="line">      unicodeCodes = [],</div><div class="line">      i = <span class="number">0</span>,</div><div class="line">      l = str.length;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; i &lt; l; i++) &#123;</div><div class="line">      <span class="keyword">var</span> utf16Code = str.charCodeAt(i);</div><div class="line">      <span class="keyword">if</span> (surrogate1st != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (utf16Code &gt;= <span class="number">0xDC00</span> &amp;&amp; utf16Code &lt;= <span class="number">0xDFFF</span>) &#123;</div><div class="line">          <span class="keyword">var</span> surrogate2nd = utf16Code,</div><div class="line">            unicodeCode = (surrogate1st - <span class="number">0xD800</span>) * (<span class="number">1</span> &lt;&lt; <span class="number">10</span>) + (<span class="number">1</span> &lt;&lt; <span class="number">16</span>) + (surrogate2nd - <span class="number">0xDC00</span>);</div><div class="line">          unicodeCodes.push(unicodeCode);</div><div class="line">        &#125;</div><div class="line">        surrogate1st = <span class="number">0</span>;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (utf16Code &gt;= <span class="number">0xD800</span> &amp;&amp; utf16Code &lt;= <span class="number">0xDBFF</span>) &#123;</div><div class="line">        surrogate1st = utf16Code;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        unicodeCodes.push(utf16Code);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> unicodeCodes;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">//Angularjs对字符串里面的html标签不会按照HTML去解析,会当做字符串显示,</span></div><div class="line"><span class="comment">//所以这里需要对字符串进行过滤，使字符串里面的标签能按照html解析</span></div><div class="line"></div><div class="line"><span class="comment">//新建过滤器trust2Html,这里使用$sce方法</span></div><div class="line">app.filter(<span class="string">'trust2Html'</span>, [<span class="string">'$sce'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$sce</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> $sce.trustAsHtml(val);</div><div class="line">    &#125;;</div><div class="line">&#125;])</div><div class="line"></div><div class="line"><span class="comment">//在页面里面显示经过图片替换的含emoji符号的字符串</span></div><div class="line">&lt;label ng-bind-html=<span class="string">"data.remark|trust2Html"</span>&gt;&lt;/label&gt;</div></pre></td></tr></table></figure></p>
<p>替换后结果<br><img src="/image/emoji2.png" alt="exactemoji"><br><a href="https://apps.timwhitlock.info/emoji/tables/unicode#block-6a-additional-emoticons" target="_blank" rel="external">Emoji Unicode Tables</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在某些浏览器中,emoji表情不能正常显示,只能显示原始状态如下&lt;br&gt;&lt;img src=&quot;/image/emoji1.png&quot; alt=&quot;erroremoji&quot;&gt;&lt;br&gt;为使表情正常显示，这里利用转码方法将emoji符号用图片替换&lt;br&gt;&lt;figure class=&quot;hi
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>探究jQuery.data</title>
    <link href="http://yoohannah.github.io/post/knowledge/JQuery_data.html"/>
    <id>http://yoohannah.github.io/post/knowledge/JQuery_data.html</id>
    <published>2017-07-30T05:43:02.000Z</published>
    <updated>2017-07-30T09:18:39.229Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery.data用于处理标签数据绑定</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>1.赋值</p>
<p>a.使用js<br>$(‘’).data(key,value); 一次赋值一个，value可以是任意js数据类型,包括Array 或者 Object<br>$(‘’).data(obj);一次赋值多个或者更新多个或者新增多个</p>
<p>b.使用HTML标签属性<br>利用H5 标签的’data-‘属性添加键值对<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div data-role=&quot;page&quot; data-last-value=&quot;43&quot; data-hidden=&quot;true&quot; data-options=&apos;&#123;&quot;name&quot;:&quot;John&quot;&#125;&apos;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>2.取值<br>$(‘’).data(key);获取key对应的数据值<br>$(‘’).data(); 一次性获取绑定在$(‘’)上的所有数据对象</p>
<p>3.删除<br>$(‘’).removeData(key);</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>a. &lt;object&gt;（除非是Flash插件），&lt;applet&gt; 或 &lt;embed&gt;&gt; 三个标签不能使用.data方法</p>
<p>b. 通过”data-“属性建立的标签数据，获取时注意<br>data-last-value=”43” ==&gt; $(‘div’).data(‘lastValue’)<br>data-options=’{“name”:”John”}’ ==&gt; $(“div”).data(“options”).name -&gt;John<br>取到的值会自动转化为js的数据类型</p>
<p>c. $(‘’).data()被赋值到js变量A后，之后对$(‘’)进行数据处理，A的内容会进行同步变动，<br>如果更改A的内容，$(‘’).data()也会同步更改<br>但如果$(‘’).data()的值被用到了html里面,HTML里面的值不会变动</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;style&gt;</div><div class="line">  div &#123; color:blue; &#125;</div><div class="line">  span &#123; color:red; &#125;</div><div class="line">  &lt;/style&gt;</div><div class="line">  &lt;script src="http://cdn.bootcss.com/jquery/1.11.2/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    The values stored were</div><div class="line">    &lt;span&gt;&lt;/span&gt;</div><div class="line">    and</div><div class="line">    &lt;span&gt;&lt;/span&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">$("div").data("test", &#123; first: 16, last: "pizza!" &#125;);</div><div class="line">$("span:first").text($("div").data("test").first);</div><div class="line">$("span:last").text($("div").data("test").last);</div><div class="line">//页面输出 The values stored were 16 and pizza!</div><div class="line">  var temp = $("div").data();</div><div class="line">  console.log(temp);</div><div class="line">  $("div").data(&#123; first: 25, last: "pizza!" ,test:&#123;last:'fruit'&#125;&#125;);</div><div class="line">  // $("span:first").text($("div").data("first"));</div><div class="line">  // $("span:last").text($("div").data("test").last); </div><div class="line">  //如果没有以上两句页面不会发生任何变化，添加后</div><div class="line">  //页面输出 The values stored were 25 and fruit</div><div class="line">  console.log(temp);//temp与$("div").data()保持一致</div><div class="line">  console.log($("div").data())</div><div class="line">  temp.child = 'Jack';</div><div class="line">  console.log($("div").data()) //增加一项&#123;child: "Jack"&#125;</div><div class="line">  $("div").removeData("blah");//删除没有的属性不会报错</div><div class="line">  $("div").removeData("child");</div><div class="line">   console.log(temp);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/YooHannah/algorithm/blob/master/plugin/data.js" target="_blank" rel="external">JQuery.data源码解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery.data用于处理标签数据绑定&lt;/p&gt;
&lt;h1 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h1&gt;&lt;p&gt;1.赋值&lt;/p&gt;
&lt;p&gt;a.使用js&lt;br&gt;$(‘’).data(
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>angular样式绑定ng-class</title>
    <link href="http://yoohannah.github.io/post/knowledge/ng-class.html"/>
    <id>http://yoohannah.github.io/post/knowledge/ng-class.html</id>
    <published>2017-06-25T14:00:37.000Z</published>
    <updated>2017-07-30T07:06:49.430Z</updated>
    
    <content type="html"><![CDATA[<p>ng-class命令可用于绑定不同的样式<br>使用方法即先在js中,定义样式集合<br>$scope.STATUS_NAME = [<br>  {‘labelClass’: ‘label1’},<br>  {‘labelClass’: ‘label2’},<br>  {‘labelClass’: ‘label3’},<br>  {‘labelClass’: ‘label4’}<br> ];<br> 对绑定对象赋值<br> angular.forEach($scope.data, function(data){<br>     //对数组中每一项，根据status属性赋给labelclass属性样式集合中的值<br>   data.labelClass = $scope.STATUS_NAME[data.status].labelClass;<br> });<br>在html中定义不同的样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	.label1&#123;</div><div class="line">    background-color:#87CEFA</div><div class="line">  &#125;</div><div class="line">  .label2&#123;</div><div class="line">    background-color:#90EE90</div><div class="line">  &#125;</div><div class="line">  .label3&#123;</div><div class="line">    background-color:#d2cd93</div><div class="line">  &#125;</div><div class="line">  .label4&#123;</div><div class="line">    background-color:#D3D3D3</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p> 在html中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;tr role=&quot;row&quot; ng-repeat=&quot;item in data track by $index&quot;&gt;</div><div class="line">	&lt;td&gt;&lt;span class=&quot;label&quot; ng-class=&quot;item.labelClass&quot;&gt;&#123;&#123;item.status_desc&#125;&#125;&lt;/span&gt;&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ng-class命令可用于绑定不同的样式&lt;br&gt;使用方法即先在js中,定义样式集合&lt;br&gt;$scope.STATUS_NAME = [&lt;br&gt;  {‘labelClass’: ‘label1’},&lt;br&gt;  {‘labelClass’: ‘label2’},&lt;br&gt;  {‘
    
    </summary>
    
    
      <category term="angular" scheme="http://yoohannah.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>cookie和session</title>
    <link href="http://yoohannah.github.io/post/php/CookieAndSession.html"/>
    <id>http://yoohannah.github.io/post/php/CookieAndSession.html</id>
    <published>2017-05-26T13:38:37.000Z</published>
    <updated>2017-07-30T07:23:31.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>设置cookie<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">bool setcookie  (</div><div class="line">	string $名字</div><div class="line">	[, string $值]</div><div class="line">	[, int $过期时间  = 0]</div><div class="line">	[, string $路径]</div><div class="line">	[, string $域名]</div><div class="line">	[, bool $安全  = false]</div><div class="line">	[, bool $http只读  = false]</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p> 参数 描述<br>$名字 必需。规定 cookie 的名称。<br>$值 可选。规定 cookie 的值。<br>$有效期 可选。规定 cookie 的有效期。<br>$路径 可选。规定 cookie 的服务器路径。<br>$域名 可选。规定 cookie 的域名。<br>$安全 可选。规定是否通过安全的 HTTPS 连接来传输 cookie。<br>$http安读 可选。如果true，那么js就无法读取改cookie，增加安全性。</p>
<p>在服务端通过$_COOKIE[‘name’] 来读取cookie了。</p>
<p><a href="https://github.com/YooHannah/algorithm/tree/master/php/cookie" target="_blank" rel="external">使用cookie例子</a></p>
<h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><p> session_start(); //开启session<br> $_SESSION[‘userName’] = ‘wang’; //添加session数据<br> $userName = $_SESSION[‘userName’]; //读取session数据<br> unset($_SESSION[‘XXX’]);//销毁单个session数据<br> $_SESSION = array();//销毁全部session数据<br> session_destory();//这个函数会销毁当前会话中的全部数据，并结束当前会话,但是不会重置当前会话所关联的全局变量，也不会重置会话 cookie</p>
<p> 在php.ini配置文件中有这么一行 session.save_handler = files,<br> files,说明了php默认的是用文件读写的方式来保存session的<br> session.save_path = “/tmp”, “/tmp”即存储路径</p>
<p><a href="https://github.com/YooHannah/algorithm/tree/master/php/shoppingcart" target="_blank" rel="external">使用session例子</a></p>
<h1 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="comment">//初始化</span></div><div class="line">$ch = curl_init();</div><div class="line"><span class="comment">//设置选项，包括URL</span></div><div class="line">curl_setopt($ch, CURLOPT_URL, <span class="string">"http://www.php.cn"</span>);</div><div class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</div><div class="line"><span class="comment">//执行并获取HTML文档内容</span></div><div class="line">$output = curl_exec($ch);</div><div class="line"><span class="comment">//释放curl句柄</span></div><div class="line">curl_close($ch);</div><div class="line"><span class="comment">//打印获得的数据</span></div><div class="line">print_r($output);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>函数    curl_setopt<br>参数1    curl资源变量<br>参数2    curl参数选项<br>参数3    curl参数值</p>
<p>CURLOPT_URL           这个参数选项规定了请求的url地址。<br>CURLOPT_RETURNTRANSFER   curl请求后返回对应的结果 若需要返回值即为1。不需请求后返回的结果可设置为0。</p>
<p>如果是get请求，我们不需要设置发送的参数。在post等请求的时候，我们需要设置发送方法为post方法。并设置发送的数据。<br>CURLOPT_POST    值设为1是使用POST方法，0为不使用POST方法<br>CURLOPT_POSTFIELDS  设置传递的数据<br>//声明使用POST方式来进行发送<br>    curl_setopt($ch, CURLOPT_POST, 1);<br>//发送什么数据呢<br>curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</p>
<p>如果是https有的时候需要忽略https的安全证书。</p>
<p>CURLOPT_SSL_VERIFYPEER和CURLOPT_SSL_VERIFYHOST 两个参数改为false即忽略了证书。<br>curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);<br>curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);<br>CURLOPT_HEADER  决定是是否处理http的头信息，不接收处理的话可将这个值设置为0。<br>CURLOPT_TIMEOUT 设置请求的超时时间</p>
<p>$output = curl_exec($ch); 如果执行的结果有数据。使用curl_exec执行后，会将结果返回给$output变量。<br>curl_close($ch); 关闭curl资源。<br><a href="https://github.com/YooHannah/algorithm/blob/master/php/curl1.php" target="_blank" rel="external">curlget 截取页面例子</a><br><a href="https://github.com/YooHannah/algorithm/blob/master/php/curlpost.php" target="_blank" rel="external">curlpost例子</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h1&gt;&lt;p&gt;设置cookie&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
    
      <category term="php" scheme="http://yoohannah.github.io/tags/php/"/>
    
  </entry>
  
</feed>
