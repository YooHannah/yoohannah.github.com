<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Little World</title>
  <subtitle>learn and share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoohannah.github.io/"/>
  <updated>2017-04-08T09:04:19.540Z</updated>
  <id>http://yoohannah.github.io/</id>
  
  <author>
    <name>YooHannah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>平衡二叉排序树</title>
    <link href="http://yoohannah.github.io/post/algorithm/blancesortbtree.html"/>
    <id>http://yoohannah.github.io/post/algorithm/blancesortbtree.html</id>
    <published>2017-04-08T06:51:37.000Z</published>
    <updated>2017-04-08T09:04:19.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><p>首先得是一颗二叉排序树<br>左子树与右子树都是平衡二叉树<br>每个结点左子树与右子树的深度差的绝对值不能大于1<br>结点左子树深度减右子树深度的差叫做平衡因子BF，即|BF|&lt;=1，BF=-1/1/0<br>平衡二叉树就是一颗二叉树上所有结点的平衡因子的绝对值小于等于1 的树</p>
<h1 id="关键操作"><a href="#关键操作" class="headerlink" title="关键操作"></a>关键操作</h1><p>左子树bf大于右子树bf，右旋<br>左子树bf小于右子树bf，左旋<br>左旋的子树的右子树若存在左子树，将该左子树做左旋子树根结点的右子树，左旋子树根结点做其右子树的左子树<br>右旋的子树的左子树若存在右子树，将该右子树做右旋子树根结点的左结点，右旋子树根结点做其左子树的右子树</p>
<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>现用以下数据构建平衡二叉树<br>3,2,1,4,5,6,7,10,9,8<br><img src="/image/balancebtree.png" alt="balance"><br>按照大于父节点做右子树小于父结点做左子树原则,将3,2,1构建树，当1进入树之后3的左子树深度2减右子树深度0大于1，以2为中心进行右旋，如图1<br>继续添加4和5，当5进入树之后，3的左右子树深度差为-2，断开2,3链接，将3,4,5,以4为中心左旋，再与2相连，如图2<br>继续添加6，当6进入树之后,这时2的bf为-2，以2的右子树根结点为中心左旋，此时1,2和3均为4的左子树，则将4的原左子树做新左子树的右子树，如图3<br>添加7,当7进入树之后,5的bf为-2，断开4,5链接，以6为中心左旋，再与4相连，如图4<br>添加10、9,当9进入树之后,6的bf为-2,断开6、7，因为10有左结点，先将9、10关系转换，让10做9孩子结点，然后以9为中心左旋，再与6相连,如图5<br>添加8,4、6的bf又变为-2,断开4、6,9的bf为1，因为将来要对6左旋，所以先将9右旋，使9的bf变成0或负值，再对6以7为中心左旋，如图6<br>最终结果如图7<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/balancebtree.js" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;特征&quot;&gt;&lt;a href=&quot;#特征&quot; class=&quot;headerlink&quot; title=&quot;特征&quot;&gt;&lt;/a&gt;特征&lt;/h1&gt;&lt;p&gt;首先得是一颗二叉排序树&lt;br&gt;左子树与右子树都是平衡二叉树&lt;br&gt;每个结点左子树与右子树的深度差的绝对值不能大于1&lt;br&gt;结点左子树深度减右
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>二叉排序树</title>
    <link href="http://yoohannah.github.io/post/algorithm/sortbtree.html"/>
    <id>http://yoohannah.github.io/post/algorithm/sortbtree.html</id>
    <published>2017-04-03T08:51:37.000Z</published>
    <updated>2017-04-08T06:20:02.969Z</updated>
    
    <content type="html"><![CDATA[<p>将无序的数组，把首项当做根结点开始，按照比双亲结点小的做左子树，比双亲结点大的做右子树的规则<br>建立一颗二叉树，对二叉树进行中序遍历，即得到无序数组从小到大的排序<br>二叉排序树特点<br>—- 若它的左子树不为空，则左子树上所有结点的值均小于它的根结构的值<br>—- 若它的右子树不为空，则右子树上所有结点的值均大于它的根结构的值<br>—- 它的左右子树也分别为二叉排序树(递归)<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/SortingBtree.js" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将无序的数组，把首项当做根结点开始，按照比双亲结点小的做左子树，比双亲结点大的做右子树的规则&lt;br&gt;建立一颗二叉树，对二叉树进行中序遍历，即得到无序数组从小到大的排序&lt;br&gt;二叉排序树特点&lt;br&gt;—- 若它的左子树不为空，则左子树上所有结点的值均小于它的根结构的值&lt;br&gt;—
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>线性索引查找</title>
    <link href="http://yoohannah.github.io/post/algorithm/indexsearch.html"/>
    <id>http://yoohannah.github.io/post/algorithm/indexsearch.html</id>
    <published>2017-04-03T08:38:37.000Z</published>
    <updated>2017-04-03T08:38:46.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="稠密索引"><a href="#稠密索引" class="headerlink" title="稠密索引"></a>稠密索引</h1><p><img src="/image/index1.png" alt="index1"><br>索引表与数据表一对一，索引表的关键码是对应目标数据的提取，索引表有序，数据表无序</p>
<h1 id="分块索引"><a href="#分块索引" class="headerlink" title="分块索引"></a>分块索引</h1><p><img src="/image/index2.png" alt="index2"><br>将整个数据表分块，取每块数据中最大值建立索引表，块间有序，块内无序</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;稠密索引&quot;&gt;&lt;a href=&quot;#稠密索引&quot; class=&quot;headerlink&quot; title=&quot;稠密索引&quot;&gt;&lt;/a&gt;稠密索引&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/image/index1.png&quot; alt=&quot;index1&quot;&gt;&lt;br&gt;索引表与数据表一对一，索引表的关
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>查找</title>
    <link href="http://yoohannah.github.io/post/algorithm/search.html"/>
    <id>http://yoohannah.github.io/post/algorithm/search.html</id>
    <published>2017-04-02T11:24:37.000Z</published>
    <updated>2017-04-03T08:10:05.111Z</updated>
    
    <content type="html"><![CDATA[<p>静态查找: 数据集合稳定，不需要添加，删除元素的查找操作<br>– 组织数据宜用线性表结构<br>– 如果要对关键字排序，折半查找算法或斐波那契查找算法<br>动态查找：数据集合在查找过程中需要同时添加或删除元素的查找操作<br>– 二叉排序树，散列表结构</p>
<h1 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h1><p>顺序查找/线性查找:从第一个(或者最后一个)记录开始，逐个进行记录的关键字和给定值进行比较，若某个记录的关键字和给定值相等，则查找成功。<br>—如果查找了所有的记录仍然找不到与给定值相等的关键字，则查找不成功<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式一</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">array,key</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> i;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;= array.length;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(a[i] == key)&#123;</div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//方式二</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">array,key</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> i= array.length;</div><div class="line">	a[<span class="number">0</span>] = key;</div><div class="line">	<span class="keyword">while</span>(a[i] != key)&#123;</div><div class="line">	  i--</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> i;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="插值查找-按比例查找"><a href="#插值查找-按比例查找" class="headerlink" title="插值查找(按比例查找)"></a>插值查找(按比例查找)</h1><p>查找方法类似于折半查找，只不过mid的值不再取low和high的中间值，<br>而是根据查找值在low和hight中间的大概位置确定mid<br>var mid = low +(high-low)*(num-list[low])/(list[high]-list[low]);<br>因此插值查找适用于有一定顺序规律的数组<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/Interpolationsearch.js" target="_blank" rel="external">代码链接</a></p>
<h1 id="斐波那契查找-黄金查找"><a href="#斐波那契查找-黄金查找" class="headerlink" title="斐波那契查找(黄金查找)"></a>斐波那契查找(黄金查找)</h1><p>同样适用于有一定顺序规律的数组<br>在折半查找的基础上根据斐波那契数列进行分割。<br>在斐波那契数列找一个等于略大于查找表中元素个数的数F[k]，<br>将原查找表扩展为长度为F[k]-1(如果要补充元素，则补充重复最后一个元素，直到满足F[k]-1个元素)<br>进行斐波那契分割，即F[k]-1个元素分割为前半部分F[k-1]-1个元素，后半部分F[n-2]-1个元素，剩一个做mid<br>找出要查找的元素在那一部分并递归，直到找到。<br><img src="/image/fiobsearch.png" alt="fiobsearch"><br><a href="https://github.com/YooHannah/algorithm/blob/master/js/FibonacciSearch.js" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;静态查找: 数据集合稳定，不需要添加，删除元素的查找操作&lt;br&gt;– 组织数据宜用线性表结构&lt;br&gt;– 如果要对关键字排序，折半查找算法或斐波那契查找算法&lt;br&gt;动态查找：数据集合在查找过程中需要同时添加或删除元素的查找操作&lt;br&gt;– 二叉排序树，散列表结构&lt;/p&gt;
&lt;h1 
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关键路径</title>
    <link href="http://yoohannah.github.io/post/algorithm/keypath.html"/>
    <id>http://yoohannah.github.io/post/algorithm/keypath.html</id>
    <published>2017-04-02T11:15:37.000Z</published>
    <updated>2017-04-02T11:16:00.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h1><p>AOE网：在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，<br>这种有向图的边表示活动的网，我们称之为AOE网(Activity On Edge Network)<br>始点/源点:AOE网中没有入边的顶点<br>终点/汇点:AOE网中没有出边的顶点<br><img src="/image/keypath.png" alt="keypath"><br>etv:时间最早发生时间,顶点的最早发生时间<br>ltv:事件最晚发生时间，每个顶点对应事件最晚需要开始的时间，如果超出此时间将会延误着整个工期<br>ete:活动最早开工时间，弧的最早发生时间<br>lte:活动最晚发生时间，不推迟工期的最晚开工时间<br>关键路径的目的是在规划工程各项活动执行的顺序时，找出关键的活动，保证工程不延期<br><img src="/image/keypath1.png" alt="keypath1"><br><img src="/image/keypath2.png" alt="keypath2"><br><a href="https://github.com/YooHannah/algorithm/blob/master/js/CriticalPath.js" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关键路径&quot;&gt;&lt;a href=&quot;#关键路径&quot; class=&quot;headerlink&quot; title=&quot;关键路径&quot;&gt;&lt;/a&gt;关键路径&lt;/h1&gt;&lt;p&gt;AOE网：在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，&lt;br&gt;这种有向图
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序</title>
    <link href="http://yoohannah.github.io/post/algorithm/TopologySorting.html"/>
    <id>http://yoohannah.github.io/post/algorithm/TopologySorting.html</id>
    <published>2017-04-02T11:14:37.000Z</published>
    <updated>2017-04-02T11:14:47.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>DAG(Directed Acyclic)图/无环图：无环的有向图<br>‘活动’：所有的工程或者某种流程都可以分为的若干个小的工程或者阶段<br>AOV(Active On Vertex Network)网：在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系<br>这样的有向图为顶点表示活动的网即AOV网<br>拓扑序列：设G=(V,E)是一个具有n个顶点的有向图，V中的顶点序列V1，V2，……Vn满足若从顶点Vi到Vj有一条路径，则在顶点序列中顶点Vi必在顶点Vj之前,我们称这样的顶点序列为一个拓扑序列,<br>拓扑排序：所谓的拓扑排序，其实就是对一个有向图构造拓扑序列的过程,保证活动是按一定顺序进行<br><img src="/image/tuopu1.png" alt="tuopu1"></p>
<h1 id="对AOV网进行拓扑排序的方法和步骤"><a href="#对AOV网进行拓扑排序的方法和步骤" class="headerlink" title="对AOV网进行拓扑排序的方法和步骤"></a>对AOV网进行拓扑排序的方法和步骤</h1><p>——从AOV网中选择一个没有前驱的顶点(入度为0的顶点),并且输出它；<br>——从网中删去该顶点，并且删去从该顶点发出的全部有向边(将有向边终点入度减一)<br>——重复上述两步，直到剩余网中不再没有前驱的顶点为止。<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/TopologicalSort.js" target="_blank" rel="external">代码链接</a></p>
<h1 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h1><p>对一个具有n个顶点，e条边的网来说，初始建立入度为0的顶点栈，要检查所有顶点一次，执行时间为O(n);<br>排序中，若AOV网无回路，则每个顶点入、出栈各一次，每个表结点被检查一次，因而执行时间是O(n+e);<br>因此整个算法时间复杂度是O(n+e)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;DAG(Directed Acyclic)图/无环图：无环的有向图&lt;br&gt;‘活动’：所有的工程或者某种流程都可以分为的若干个小的工程或者阶段
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>最短路径</title>
    <link href="http://yoohannah.github.io/post/algorithm/shortestpath.html"/>
    <id>http://yoohannah.github.io/post/algorithm/shortestpath.html</id>
    <published>2017-04-02T11:12:37.000Z</published>
    <updated>2017-04-02T11:12:41.152Z</updated>
    
    <content type="html"><![CDATA[<p>网图：两个顶点经过的边上权值之和最少的路径<br>非网图：两个顶点之间经过的边数最少的路径<br>源点：路径起始的第一个顶点<br>终点：最后一个顶点<br><img src="/image/shortestpath1.png" alt="shortestpath1"></p>
<h1 id="迪杰斯特拉-Dijkstra-算法"><a href="#迪杰斯特拉-Dijkstra-算法" class="headerlink" title="迪杰斯特拉(Dijkstra)算法"></a>迪杰斯特拉(Dijkstra)算法</h1><p>一个顶点到所有顶点的最短路径<br>主要思路：一步步求出它们之间顶点的最短路径，过程中都是基于已经求出的最短路径的基础上，求得更远顶点的最短路径<br>编程思路：类似于最小生成树普里姆算法<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/ShortestPath_Dijkstra.js" target="_blank" rel="external">代码链接</a></p>
<h1 id="佛洛依德-Floyd-算法"><a href="#佛洛依德-Floyd-算法" class="headerlink" title="佛洛依德(Floyd)算法"></a>佛洛依德(Floyd)算法</h1><p>扩展版迪杰斯特拉(Dijkstra)算法，求图中所有结点到所有结点的最大路径，结果由二维数组展现<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/ShortestPath_Floyd.js" target="_blank" rel="external">代码链接</a><br><img src="/image/shortestpath2.png" alt="shortestpath2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网图：两个顶点经过的边上权值之和最少的路径&lt;br&gt;非网图：两个顶点之间经过的边数最少的路径&lt;br&gt;源点：路径起始的第一个顶点&lt;br&gt;终点：最后一个顶点&lt;br&gt;&lt;img src=&quot;/image/shortestpath1.png&quot; alt=&quot;shortestpath1&quot;&gt;&lt;/
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="http://yoohannah.github.io/post/algorithm/MinimumTree.html"/>
    <id>http://yoohannah.github.io/post/algorithm/MinimumTree.html</id>
    <published>2017-03-30T13:10:37.000Z</published>
    <updated>2017-03-30T14:16:44.892Z</updated>
    
    <content type="html"><![CDATA[<p>图的各结点连线间存在权值，寻找一种访问路径,使得访问各结点最终的路径的权值和最小，<br>最终访问路径和结点形成树的结构，即最小生成树</p>
<h1 id="普里姆算法"><a href="#普里姆算法" class="headerlink" title="普里姆算法"></a>普里姆算法</h1><p><img src="/image/plim.png" alt="plim"><br>主要思路：研究对象为结点，以某顶点为起点，逐步找各个顶点上最小权值的边来构建最小生成树<br>编程思路：新建一数组，初始化为起点(最小生成树的根结点)在邻接矩阵所在行的权值<br>找到该组权值最小值,最小权值下标即要选择路径的终点，同时也是接下来要比较的邻接矩阵权值行的行号，<br>将该最小权值置0，然后将新建数组与矩阵权值行比较，<br>相同位置，矩阵行若小于新建数组值，就将新建数组值替换为矩阵行的值，<br>再次寻找新建数组中的最小权值，重复以上步骤<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/MinimumTreeofPlim.js" target="_blank" rel="external">代码链接</a></p>
<h1 id="克鲁斯卡尔算法"><a href="#克鲁斯卡尔算法" class="headerlink" title="克鲁斯卡尔算法"></a>克鲁斯卡尔算法</h1><p><img src="/image/kluse.png" alt="kluse"><br>主要思路：研究对象为边，将边集数组从小到大排序，依次取边集数组的元素，判断边与边是否形成环路，不会形成则选择该边构建最小树<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/MinimumTreeofKruskal.js" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图的各结点连线间存在权值，寻找一种访问路径,使得访问各结点最终的路径的权值和最小，&lt;br&gt;最终访问路径和结点形成树的结构，即最小生成树&lt;/p&gt;
&lt;h1 id=&quot;普里姆算法&quot;&gt;&lt;a href=&quot;#普里姆算法&quot; class=&quot;headerlink&quot; title=&quot;普里姆算法&quot;&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于commonjs、MVC、模板引擎</title>
    <link href="http://yoohannah.github.io/post/knowledge/commonjs.html"/>
    <id>http://yoohannah.github.io/post/knowledge/commonjs.html</id>
    <published>2017-03-21T14:16:37.000Z</published>
    <updated>2017-03-21T14:16:41.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="commonjs理解"><a href="#commonjs理解" class="headerlink" title="commonjs理解"></a>commonjs理解</h1><p>是一种编写API的标准，根据该标准写的API可以在任何支持JavaScript的环境中使用，尤其是可以满足服务端的应用<br>四个个关键词<br>modules：模块，外部用 JavaScript 封装，具有对外接口并有一定功能作用的一个文件<br>packages：包，多个module的集合，相当于提供了一些固定接口的函数库，提供更高层的的抽象<br>exports：模块对外的接口对象，在模块文件中编写的功能函数作为它的属性函数，不同写法，使用规则不一样<br>require：当我们要使用某个模块时，用来获取/加载模块接口的对象,获取模块的 exports 对象。</p>
<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>MODEL-VIEW-CONTROLL，模型-视图-控制器，是一种软件的设计模式<br>模型:对象及其数据结构的实现，通常包含数据库的操作<br>视图：表示用户界面，在网站中通常就是HTML的组织结构<br>控制器：用于处理用户请求和数据流，复杂模型，将输出传递给视图<br><img src="/image/noun2.png" alt="noun2"></p>
<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p>是一个生成HTML的工具<br>其功能是将页面模板和要显示的数据结合起来生成HTML页面<br>既可以运行在服务端又可以运行在客户端，<br>大多数时候它都在服务器端直接被解析为HTML，解析完后再传输给客户端<br>有时候也可以运行在客户端，即浏览器中<br>MVC架构中，模板引擎包含在服务器端，流程如下：<br>控制器得到用户请求后，从模型(原来页面)获取数据，调用模板引擎<br>模板引擎以数据(经过后台处理，要传递给客户端的)和页面模板为输入，生成HTML页面<br>返回给控制器，由控制器交会回给客户端<br><img src="/image/noun1.png" alt="noun1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;commonjs理解&quot;&gt;&lt;a href=&quot;#commonjs理解&quot; class=&quot;headerlink&quot; title=&quot;commonjs理解&quot;&gt;&lt;/a&gt;commonjs理解&lt;/h1&gt;&lt;p&gt;是一种编写API的标准，根据该标准写的API可以在任何支持JavaScrip
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yoohannah.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB使用</title>
    <link href="http://yoohannah.github.io/post/knowledge/mongoDB.html"/>
    <id>http://yoohannah.github.io/post/knowledge/mongoDB.html</id>
    <published>2017-03-19T13:45:37.000Z</published>
    <updated>2017-03-20T14:02:52.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>cmd到mongoDB的bin文件夹,执行<br>mongod –dbpath data文件夹路径（例：D:\MongoDB\data）//运行<br>再打开一个cmd,同样切目录到bin文件夹下,执行<br>mongo //连接到数据库</p>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>use dbname    //名为dbname的数据库若存在就将当前数据库切换到该数据库，若不存在，则新建该数据库并切换至该数据库<br>db   //查看当前数据库<br>show dbs    //查看所有数据库,新建的库，在插入数据后才会显示<br>db.dropDatabase() //删除当前数据库,但用db查看当前库，还是被删的这个库<br>db.tablename.drop() //删除数据库中名为tablename的集合<br>db.tablename.insert({“key”:”value”}) //创建名为objectname的表(对象),并插入数据,批量操作时可以直接在shell里面写for循环<br>show tables //查看该库中所有表(对象)<br>db.tablename.find() //在仓库中查找名为tablename的表，如果有就会将表中内容打印出来<br>db.tablename.find({“key”:”value”}) //在tablename表中查找具体数据，注意格式<br><img src="/image/mongodb1.png" alt="mongodb1"><br>db.tablename.update({查找值},{替换值}) //将查找值所在的集合替换为替换值<br><img src="/image/mongodb2.png" alt="mongodb2"><br>db.tablename.remove({查找值}) //删除查找值所在对象的全部数据，若为空，则将整表清空<br><img src="/image/mongodb3.png" alt="mongodb3"></p>
<h2 id="条件查找"><a href="#条件查找" class="headerlink" title="条件查找"></a>条件查找</h2><p>1.比较查询<br>将查找条件放在value部分，用{}括起来<br>下图查询条件为age大于”$gt”22, 大于等于”$gte”22, 小于”$lt”22, 小于等于”$lte”22, 不等于”$ne”20,等于20的查询格式<br><img src="/image/mongodb4.png" alt="mongodb4"><br>使用正则表达式匹配时同样将正则表达式放在value的位置，而且不用{}或者””包括，直接/开始/结束<br>2.逻辑查询<br>下图查询条件分别为且，或者$or,在氛围内$in,不在范围内$nin<br><img src="/image/mongodb5.png" alt="mongodb5"></p>
<h2 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h2><p>$inc 属性不存在就创建并赋值，如果存在，就在原来的基础上增加要修改的值<br>$set 仅修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; db.person.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;58ccdcb002efa48d7589f2ae&quot;), &quot;name&quot; : &quot;jack&quot;, &quot;age&quot; : 20 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;58ccdcb502efa48d7589f2af&quot;), &quot;name&quot; : &quot;joe&quot;, &quot;age&quot; : 25 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;58ccdcd302efa48d7589f2b0&quot;), &quot;name&quot; : &quot;mark&quot;, &quot;age&quot; : 15 &#125;</div><div class="line">&gt; db.person.update(&#123;&quot;name&quot;:&quot;jack&quot;&#125;,&#123;$inc:&#123;&quot;age&quot;:10&#125;&#125;)</div><div class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class="line">&gt; db.person.update(&#123;&quot;name&quot;:&quot;mark&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:10&#125;&#125;)</div><div class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</div><div class="line">&gt; db.person.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;58ccdcb002efa48d7589f2ae&quot;), &quot;name&quot; : &quot;jack&quot;, &quot;age&quot; : 30 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;58ccdcb502efa48d7589f2af&quot;), &quot;name&quot; : &quot;joe&quot;, &quot;age&quot; : 25 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;58ccdcd302efa48d7589f2b0&quot;), &quot;name&quot; : &quot;mark&quot;, &quot;age&quot; : 10 &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>特殊情况：update的第一个参数不存在，即查找值不在person中，可以如下设置，将其新增<br>db.person.update({“name”:”jackson”},{$inc:{“age”:10}},true)<br>注意：update默认仅更新匹配得到的第一个集合，如果想更新全部匹配得到的结果，<br>可以将第四个参数设为true</p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>1.计数<br>db.person.count()  //获取person中数据条数<br>db.person.count({“age”:20}) // 获取person中age等于20的数据条数<br>2.统计<br>db.person.distinct(“age”) //获取person中所有age的值，重复的值只取一次<br>3.分组<br>db.person.group({<br>    “key”:{“age”:true},//按age分组，age相同的分一组<br>    “initial”:{“person”:[]}, //分组内容<br>    “$reduce”:function(cur,prev){ //符合分组条件，将该条数据放入该组集合中，cur指当前处理的该条数据，prev指上次函数的累计对象，第一次为initial的值。<br>        prev.person.push(cur.name);<br>    },<br>  “finalize”:function(out){//将一条数据划分到一组后执行的处理<br>  out.count = out.person.length;<br>  },<br>  “condition”:{“age”:{$lt:25}}//分组条件，对什么样的数据进行分组<br>})<br>4.映射<br>通过map对集合进行分组，通过reduce对分组结果进行处理，理解为复杂的重组处理，最后会生成一个全新的集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var map = function()&#123;</div><div class="line">	emit(this.name,&#123;count:1&#125;);  //集合按照name分组，分组内容均为&#123;count：1&#125;</div><div class="line">&#125;</div><div class="line">var reduce = function(key,value)&#123;  //对分组结果进行处理</div><div class="line">	var result = &#123;count:0&#125;;</div><div class="line">	for(var i = 0;i&lt;value.length;i++)&#123;</div><div class="line">		result.count +=value[i].count;</div><div class="line">	&#125;</div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line">db.person.mapReduce(map,reduce,&#123;&quot;out&quot;:&quot;collection&quot;&#125;)</div><div class="line">db.collection.find()</div></pre></td></tr></table></figure></p>
<p>5.循环处理<br>可以将集合赋值给一个变量然后进行循环处理，<br>var list = db.person.find();<br>list.forEach(function(x){<br>    print(x.name):<br>})</p>
<p>6.可以多操作查询<br>对person集合数据按name排序然后分页<br>var single=db.person.find().sort({“name”,1}).skip(2).limit(2);</p>
<p>7.索引查询<br>建立索引：<br>db.person.ensureIndex({“name”:1}) //建立按照name进行排序的索引，1为升序，-1为降序<br>db.person.ensureIndex({“name”:1},{“unique”:true}) //建立唯一索引，集合中不能出现重复键值对<br>db.person.ensureIndex({“name”:1,”birthday”:1}) //组合索引<br>查询优化器做出的选择往往是最优的，因为我们做查询时，查询优化器会使用我们建立的这些索引来创建查询方案，<br>如果某一个先执行完则其他查询方案被close掉，这种方案会被mongodb保存起来，当然如果非要用自己指定的查询方案，这也是可以的，在mongodb中给我们提供了hint方法让我们可以暴力执行。<br>db.person.find({“name”:”jack”,”birthday”:”1998-3-2”}).hint({“name”:1,”birthday”:1})</p>
<p>删除索引：<br>db.person.dropIndexes(“name_1”)</p>
<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><p>将数据库数据复制到多台服务器上，防止因为一台服务器死机而导致数据无法使用的问题出现<br>将安装文件复制到其他磁盘上，模拟不同的服务器<br>启动H盘上的mongodb，把该数据库指定为主数据库<br>H:\mongoDB\bin&gt;mongod –dbpath H:\mongoDB\data –master<br>启动D盘上的mongodb，把该数据库指定为从属数据库<br>D:\mongoDB\bin&gt;mongod –dbpath D:\mongoDB\data –port 8888 –slave –source=127.0.0.1:27017<br>更换端口为8888，source表示主数据库地址<br>2017-03-20T10:12:17.424+0800 I REPL     [replslave] syncing from host:127.0.0.1:<br>27017<br>然后分别打开主shell(mongo 127.0.0.1:27017)和从shell(mongo 127.0.0.1:8888)查看所有集合<br>show dbs<br>因为从服务器上的数据库是不允许进行读写操作,所以从shell中会报错<br><img src="/image/mongodb7.png" alt="mongodb7"><br>解决，先执行：rs.slaveOk()<br>现在主shell中更改数据，在从shell中查看，看是否进行了同步<br>但有可能因为服务连接状态问题导致数据内容不同<br><img src="/image/mongodb8.png" alt="mongodb8"></p>
<h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><p>不设定特定主数据库，如果哪个数据库死机了，集群就会推选一个从属数据库作为主数据库顶上，实现自动修复的效果<br>1.建立集群，命名集群名为shopex,replSet让服务器知道shopex下有端口为3333的另一个数据库服务器<br>新打开cmd<br>H:\mongoDB\bin&gt;mongod –dbpath H:\mongoDB\data –port 2222 –replSet shopex/127.0.0.1:3333<br>2.打开端口为3333的另一个数据库服务器<br>新打开cmd<br>D:\mongoDB\bin&gt;mongod –dbpath D:\mongoDB\data –port 3333 –replSet shopex/127.0.0.1:2222<br>3.在admin集合中初始化“副本集”<br>新打开cmd,开启shell<br>H:\mongoDB\bin&gt;mongo 127.0.0.1:2222/admin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; db.runCommand(&#123;&quot;replSetInitiate&quot;:&#123;</div><div class="line">... &quot;_id&quot;:&quot;shopex&quot;,</div><div class="line">... &quot;members&quot;:[</div><div class="line">... &#123;</div><div class="line">... &quot;_id&quot;:1,</div><div class="line">... &quot;host&quot;:&quot;127.0.0.1:2222&quot;</div><div class="line">... &#125;,</div><div class="line">... &#123;</div><div class="line">... &quot;_id&quot;:2,</div><div class="line">... &quot;host&quot;:&quot;127.0.0.1:3333&quot;</div><div class="line">... &#125;</div><div class="line">... ]&#125;&#125;)</div><div class="line">&#123; &quot;ok&quot; : 1 &#125;</div></pre></td></tr></table></figure></p>
<p>4.设置仲裁服务器<br>新打开cmd,开启服务<br>D:\mongoDB\bin&gt;mongod –dbpath F:\mongoDB\data –port 4444 –replSet shopex/127.0.0.1:2222<br>开启shell,设置及产看结果<br>H:\mongoDB\bin&gt;mongo 127.0.0.1:2222/admin<br>shopex:PRIMARY&gt; rs.addArb(“127.0.0.1:4444”)<br>{ “ok” : 1 }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">shopex:PRIMARY&gt; rs.status()</div><div class="line">&#123;</div><div class="line">        &quot;set&quot; : &quot;shopex&quot;,</div><div class="line">        &quot;date&quot; : ISODate(&quot;2017-03-20T05:55:12.742Z&quot;),</div><div class="line">        &quot;myState&quot; : 1,</div><div class="line">        &quot;term&quot; : NumberLong(1),</div><div class="line">        &quot;heartbeatIntervalMillis&quot; : NumberLong(2000),</div><div class="line">        &quot;optimes&quot; : &#123;</div><div class="line">                &quot;lastCommittedOpTime&quot; : &#123;</div><div class="line">                        &quot;ts&quot; : Timestamp(1489989307, 1),</div><div class="line">                        &quot;t&quot; : NumberLong(1)</div><div class="line">                &#125;,</div><div class="line">                &quot;appliedOpTime&quot; : &#123;</div><div class="line">                        &quot;ts&quot; : Timestamp(1489989307, 1),</div><div class="line">                        &quot;t&quot; : NumberLong(1)</div><div class="line">                &#125;,</div><div class="line">                &quot;durableOpTime&quot; : &#123;</div><div class="line">                        &quot;ts&quot; : Timestamp(1489989307, 1),</div><div class="line">                        &quot;t&quot; : NumberLong(1)</div><div class="line">                &#125;</div><div class="line">        &#125;,</div><div class="line">        &quot;members&quot; : [</div><div class="line">                &#123;</div><div class="line">                        &quot;_id&quot; : 1,</div><div class="line">                        &quot;name&quot; : &quot;127.0.0.1:2222&quot;,</div><div class="line">                        &quot;health&quot; : 1,</div><div class="line">                        &quot;state&quot; : 1,</div><div class="line">                        &quot;stateStr&quot; : &quot;PRIMARY&quot;,</div><div class="line">                        &quot;uptime&quot; : 596,</div><div class="line">                        &quot;optime&quot; : &#123;</div><div class="line">                                &quot;ts&quot; : Timestamp(1489989307, 1),</div><div class="line">                                &quot;t&quot; : NumberLong(1)</div><div class="line">                        &#125;,</div><div class="line">                        &quot;optimeDate&quot; : ISODate(&quot;2017-03-20T05:55:07Z&quot;),</div><div class="line">                        &quot;electionTime&quot; : Timestamp(1489989026, 1),</div><div class="line">                        &quot;electionDate&quot; : ISODate(&quot;2017-03-20T05:50:26Z&quot;),</div><div class="line">                        &quot;configVersion&quot; : 2,</div><div class="line">                        &quot;self&quot; : true</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                        &quot;_id&quot; : 2,</div><div class="line">                        &quot;name&quot; : &quot;127.0.0.1:3333&quot;,</div><div class="line">                        &quot;health&quot; : 1,</div><div class="line">                        &quot;state&quot; : 2,</div><div class="line">                        &quot;stateStr&quot; : &quot;SECONDARY&quot;,</div><div class="line">                        &quot;uptime&quot; : 296,</div><div class="line">                        &quot;optime&quot; : &#123;</div><div class="line">                                &quot;ts&quot; : Timestamp(1489989307, 1),</div><div class="line">                                &quot;t&quot; : NumberLong(1)</div><div class="line">                        &#125;,</div><div class="line">                        &quot;optimeDurable&quot; : &#123;</div><div class="line">                                &quot;ts&quot; : Timestamp(1489989307, 1),</div><div class="line">                                &quot;t&quot; : NumberLong(1)</div><div class="line">                        &#125;,</div><div class="line">                        &quot;optimeDate&quot; : ISODate(&quot;2017-03-20T05:55:07Z&quot;),</div><div class="line">                        &quot;optimeDurableDate&quot; : ISODate(&quot;2017-03-20T05:55:07Z&quot;),</div><div class="line">                        &quot;lastHeartbeat&quot; : ISODate(&quot;2017-03-20T05:55:11.766Z&quot;),</div><div class="line">                        &quot;lastHeartbeatRecv&quot; : ISODate(&quot;2017-03-20T05:55:10.786Z&quot;</div><div class="line">),</div><div class="line">                        &quot;pingMs&quot; : NumberLong(0),</div><div class="line">                        &quot;syncingTo&quot; : &quot;127.0.0.1:2222&quot;,</div><div class="line">                        &quot;configVersion&quot; : 2</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                        &quot;_id&quot; : 3,</div><div class="line">                        &quot;name&quot; : &quot;127.0.0.1:4444&quot;,</div><div class="line">                        &quot;health&quot; : 1,</div><div class="line">                        &quot;state&quot; : 7,</div><div class="line">                        &quot;stateStr&quot; : &quot;ARBITER&quot;,</div><div class="line">                        &quot;uptime&quot; : 44,</div><div class="line">                        &quot;lastHeartbeat&quot; : ISODate(&quot;2017-03-20T05:55:11.765Z&quot;),</div><div class="line">                        &quot;lastHeartbeatRecv&quot; : ISODate(&quot;2017-03-20T05:55:07.948Z&quot;</div><div class="line">),</div><div class="line">                        &quot;pingMs&quot; : NumberLong(0),</div><div class="line">                        &quot;configVersion&quot; : 2</div><div class="line">                &#125;</div><div class="line">        ],</div><div class="line">        &quot;ok&quot; : 1</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在如果关掉2222端口服务器，再打开，在执行rs.status(),可以看到2222的“stateStr”变成”SECONDARY”<br>“3333”的变成”PRIMARY”<br><a href="http://www.cnblogs.com/huangxincheng/archive/2012/02/29/2372699.html" target="_blank" rel="external">相关链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h1&gt;&lt;p&gt;cmd到mongoDB的bin文件夹,执行&lt;br&gt;mongod –dbpath data文件夹路径（例：D:\MongoDB\data）//
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yoohannah.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>开发小结</title>
    <link href="http://yoohannah.github.io/post/knowledge/prehensive.html"/>
    <id>http://yoohannah.github.io/post/knowledge/prehensive.html</id>
    <published>2017-03-15T13:42:51.000Z</published>
    <updated>2017-03-15T13:50:19.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对于路由的理解"><a href="#对于路由的理解" class="headerlink" title="对于路由的理解"></a>对于路由的理解</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">官方定义：</div><div class="line">路由是指如何定义应用的端点（URIs）以及如何响应客户端的请求。</div><div class="line">路由是由一个 URI、HTTP 请求（GET、POST等）和若干个句柄组成，它的结构如下： app.METHOD(path, [callback...], callback)， app 是 express 对象的一个实例， METHOD 是一个 HTTP 请求方法， path 是服务器上的路径， callback 是当路由匹配时要执行的函数。</div></pre></td></tr></table></figure>
<p>当浏览器向服务器发过来一个http请求时，会携带请求路径和请求方法,服务器根据发过来的路径和请求方法进行匹配,二者都匹配的话，就执行对应的回调函数<br>请求的目的在客户端看来可能多种多样，比如单纯的访问页面，重新获取页面数据，向后台传递数据，但是在服务端看来都是一样的处理方法，匹配路径和方法，进行回调函数，<br>即通过匹配执行相应的动作，比如<br>客户端想访问一个页面，回调函数就执行渲染页面的操作<br>客户端要传递数据给数据库，回调函数就获取传递的数据然后给到数据库<br>作用就像一个指南针，根据客户端不同的请求，执行不同的操作<br>但涉及到的具体操作（数据处理）可能会通过其他文件的处理函数来实现<br><a href="http://www.expressjs.com.cn/guide/routing.html" target="_blank" rel="external">官方文档</a></p>
<h1 id="对于中间件的理解"><a href="#对于中间件的理解" class="headerlink" title="对于中间件的理解"></a>对于中间件的理解</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">官方定义</div><div class="line">中间件（Middleware） 是一个函数，它可以访问请求对象（request object (req)）, 响应对象（response object (res)）, 和 web 应用中处于请求-响应循环流程中的中间件，一般被命名为 next 的变量。</div><div class="line">中间件的功能包括：</div><div class="line">执行任何代码。</div><div class="line">修改请求和响应对象。</div><div class="line">终结请求-响应循环。</div><div class="line">调用堆栈中的下一个中间件。</div><div class="line">如果当前中间件没有终结请求-响应循环，则必须调用 next() 方法将控制权交给下一个中间件，否则请求就会挂起。</div></pre></td></tr></table></figure>
<p>粗浅的理解为功能处理函数，比如路由匹配里的回调函数，根据功能和使用方式不同分成多种<br>1.应用级中间件， app.use() 和 app.METHOD()的回调函数<br>2.路由级中间件，var router = express.Router()， router.use() 或 router.VERB() 的回调函数<br>3.错误处理中间件，进行错误处理的的函数，参数与其他不同<br>4.内置中间件, express.static<br>5.第三方中间件,通过npm安装的模块，即我们使用的模块也算是中间件<br><a href="http://www.expressjs.com.cn/guide/using-middleware.html#middleware.application" target="_blank" rel="external">官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对于路由的理解&quot;&gt;&lt;a href=&quot;#对于路由的理解&quot; class=&quot;headerlink&quot; title=&quot;对于路由的理解&quot;&gt;&lt;/a&gt;对于路由的理解&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
    
      <category term="knowledge" scheme="http://yoohannah.github.io/tags/knowledge/"/>
    
  </entry>
  
  <entry>
    <title>对于一些模块的探究</title>
    <link href="http://yoohannah.github.io/post/knowledge/Middleware.html"/>
    <id>http://yoohannah.github.io/post/knowledge/Middleware.html</id>
    <published>2017-03-15T13:32:51.000Z</published>
    <updated>2017-03-15T13:52:41.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express-session"><a href="#express-session" class="headerlink" title="express-session"></a>express-session</h1><p>用来提供会话支持，获取用户的会话对象,用来维护用户相关信息<br>当浏览器访问服务器并发送第一次请求时，服务器端会创建一个session对象，生成一个类似于key,value的键值对， 然后将key(cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带key(cookie)，找到对应的session(value)。 客户的信息都保存在session中。<br>当客户访问其他页面时，可以判断客户的登录状态，做出提示，相当于登录拦截。<br>session可以和Redis或者数据库等结合做持久化操作，当服务器挂掉时也不会导致某些客户信息（购物车）丢失。</p>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数:"></a>常用参数:</h2><p>secret: 一个String类型的字符串，作为服务器端生成session的签名。<br>name: 返回客户端的key的名称，默认为connect.sid,也可以自己设置。<br>resave: (是否允许)当客户端并行发送多个请求时，其中一个请求在另一个请求结束时对session进行修改覆盖并保存。</p>
<p>默认为true。但是(后续版本)有可能默认失效，所以最好手动添加。</p>
<p>saveUninitialized: 初始化session时是否保存到存储。默认为true， 但是(后续版本)有可能默认失效，所以最好手动添加。</p>
<p>cookie: 设置返回到前端key的属性，默认值为{ path: ‘/’, httpOnly: true, secure: false, maxAge: null }。</p>
<h2 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法:"></a>一些方法:</h2><p>Session.destroy():删除session，当检测到客户端关闭时调用。</p>
<p>Session.reload():当session有修改时，刷新session。</p>
<p>Session.regenerate()：将已有session初始化。</p>
<p>Session.save()：保存session。</p>
<h1 id="connect-flash"><a href="#connect-flash" class="headerlink" title="connect-flash"></a>connect-flash</h1><p>官方解释<br>The flash is a special area of the session used for storing messages. Messages are written to the flash and cleared after being displayed to the user. The flash is typically used in combination with redirects, ensuring that the message is available to the next page that is to be rendered.</p>
<p>即一个在session中存放临时信息的地方，显示给用户后,在渲染下一个页面前被清空</p>
<h2 id="函数用法："><a href="#函数用法：" class="headerlink" title="函数用法："></a>函数用法：</h2><p>(1)如果传入的参数多于两个，那么首先获取第二个以及以后的参数，然后对第二个以后的参数进行format操作，最后把数据封装到req.session.flash中，同时返回<br>req.flash(‘info’, ‘email has been sent to %s.’, userName);<br>(2)如果传入的第二个参数是一个数组，那么把这个数组每一个元素封装到req.session.flash中，然后返回特定type的数据的长度<br>(3)如果仅仅传入了type则返回指定类型的数据，并把数据从req.session.flash中删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">req.flash(&apos;info&apos;, &apos;email re-sent&apos;);</div><div class="line">req.flash(&apos;info&apos;);// =&gt; [&apos;email sent&apos;, &apos;email re-sent&apos;]</div><div class="line">req.flash(&apos;info&apos;);// =&gt; []这时候info已经清空了</div></pre></td></tr></table></figure></p>
<p>(4)如果用户没有传入任何参数那么返回的原来的局部变量保存到的req.session.flash对象,清空req.session.flash域</p>
<h2 id="实际使用："><a href="#实际使用：" class="headerlink" title="实际使用："></a>实际使用：</h2><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install express-session //flash放在session中</div><div class="line">$ npm install connect-flash</div></pre></td></tr></table></figure></p>
<p>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var flash = require(&apos;connect-flash&apos;);</div><div class="line">var session = require(&apos;express-session&apos;);</div><div class="line">app.use(session(&#123; //一些参数配置</div><div class="line">  secret: params1,</div><div class="line">  key: params2,</div><div class="line">  cookie: &#123;maxAge: 60000&#125;,</div><div class="line">  resave: false,</div><div class="line">  saveUninitialized: true</div><div class="line">&#125;));</div><div class="line">app.use(flash());</div></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">router.post(&apos;/login&apos;, function(req, res, next) &#123;</div><div class="line">  User.get(req.body.username,function(err,user)&#123;</div><div class="line">      if(!user || user.name === &apos;&apos;)&#123;</div><div class="line">        req.flash(&apos;error&apos;,&apos;用户不存在&apos;);</div><div class="line">        return res.redirect(&apos;login&apos;);</div><div class="line">      &#125;</div><div class="line">      if(req.body.password != user.password)&#123;</div><div class="line">        req.flash(&apos;error&apos;,&apos;密码不对&apos;);</div><div class="line">        return res.redirect(&apos;login&apos;);</div><div class="line">      &#125;</div><div class="line">      req.flash(&apos;info&apos;,&apos;登录成功&apos;);</div><div class="line">      res.redirect(&apos;login&apos;);</div><div class="line">  &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>一般和redirect一起使用，保证在渲染下一个页面的时候数据可用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;express-session&quot;&gt;&lt;a href=&quot;#express-session&quot; class=&quot;headerlink&quot; title=&quot;express-session&quot;&gt;&lt;/a&gt;express-session&lt;/h1&gt;&lt;p&gt;用来提供会话支持，获取用户的会话对象
    
    </summary>
    
    
      <category term="knowledge" scheme="http://yoohannah.github.io/tags/knowledge/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客步骤</title>
    <link href="http://yoohannah.github.io/post/knowledge/step.html"/>
    <id>http://yoohannah.github.io/post/knowledge/step.html</id>
    <published>2017-03-12T13:33:37.000Z</published>
    <updated>2017-03-19T13:37:07.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>如果全局安装express 使用npm install -g express 语句安装后，无法使用express命令<br>则先执行npm install express-generator -g<br>express在4.0之后，需要安装the executable（执行器express-generator）才能执行express命令<br>express –view=ejs microblog //在当前文件夹创建文件夹microblog，并在里面部署express<br>cd microblog //进入microblog<br>npm install //安装nodejs包<br>DEBUG=microblog:* npm start //运行<br>npm install -g supervisor //安装supervisor，监视代码改动<br>supervisor ./bin/www //运行，会提示输入rs重新开始，输入’rs’回车即可，<br>//这里就不用每次改完都去手动中断进程再重新开始</p>
<h1 id="路由初步配置"><a href="#路由初步配置" class="headerlink" title="路由初步配置"></a>路由初步配置</h1><h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><p>打开app.js文件<br>var index = require(‘./routes/index’); //引入不同访问路径的回调函数所在文件<br>app.use(‘/‘, index); //为回调函数配置访问路径</p>
<p>如果要建立分支路径，可以在回调函数文件中配置相应分支路径的回调函数<br>假如我想访问<a href="http://localhost:3000/users/111" target="_blank" rel="external">http://localhost:3000/users/111</a> 和 <a href="http://localhost:3000/users/id/111" target="_blank" rel="external">http://localhost:3000/users/id/111</a><br>首先在app.js中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var users = require(&apos;./routes/users&apos;);</div><div class="line">app.use(&apos;/users&apos;, users);</div></pre></td></tr></table></figure></p>
<p>然后配置routes路径下的users.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"></div><div class="line"><span class="comment">/* GET users listing. */</span></div><div class="line">router.get(<span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'USER:'</span>+req.params.id);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(<span class="string">'/id/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'USERID:'</span>+req.params.id);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure></p>
<p>注意路径参数id的获取，在app.js配置时是访问路径的共有前缀，在users.js中获取的是分支前缀<br><a href="http://www.expressjs.com.cn/guide/using-middleware.html" target="_blank" rel="external">深入链接</a></p>
<h2 id="控制权转移"><a href="#控制权转移" class="headerlink" title="控制权转移"></a>控制权转移</h2><p>express 处理路由规则时，会优先匹配先定义的陆游规则，后面的规则被屏蔽<br>通过调用回调函数的第三个参数next,可以将控制权转移到后面的规则<br>即执行完先定义的规则后会继续执行后面定义的规则<br><img src="/image/node1.png" alt="node1"></p>
<h1 id="手动安装片段视图"><a href="#手动安装片段视图" class="headerlink" title="手动安装片段视图"></a>手动安装片段视图</h1><p>由于网站中多页面head和footer相同,所以要建立模板文件，然后让其他页面文件来来填充基于这种处理方法<br>express 4.x需要手动安装partials<br>npm install express-partials<br>在app.js中注册<br>var partials = require(‘express-partials’);<br>app.use(partials());</p>
<h1 id="引入bootstrap-和-JQuery"><a href="#引入bootstrap-和-JQuery" class="headerlink" title="引入bootstrap 和 JQuery"></a>引入bootstrap 和 JQuery</h1><p>从<a href="http://twitter.github.com/bootstrap/下载bootstrap.zip" target="_blank" rel="external">http://twitter.github.com/bootstrap/下载bootstrap.zip</a>,<br>将 img 目录复制到工程 public 目录下，<br>将 bootstrap.css、bootstrap-responsive.css 复制到 public/stylesheets 中，<br>将 bootstrap.js 复制到 public/javascripts 目录中，<br>然后从<a href="http://jquery.com/下载一份最新版的" target="_blank" rel="external">http://jquery.com/下载一份最新版的</a> jquery.js 也放入 public/javascripts 目录中。</p>
<h1 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h1><p>用.ejs文件当html文件,<br>ejs 的标签系统只有以下3种标签。<br> &lt;% code %&gt;： JavaScript 代码。<br> &lt;%= code %&gt;：显示替换过 HTML 特殊字符的内容。<br> &lt;%- code %&gt;：显示原始 HTML 内容。<br>新建layout.ejs 做模板文件 ，调整index.ejs内容做首页填充内容，访问 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a> 查看效果</p>
<h1 id="MongoDB-数据库"><a href="#MongoDB-数据库" class="headerlink" title="MongoDB 数据库"></a>MongoDB 数据库</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>选用 MongoDB 作为网站的数据库系统<br>在<a href="http://dl.mongodb.org/dl/win32/x86_64" target="_blank" rel="external">http://dl.mongodb.org/dl/win32/x86_64</a> 可下载安装包<br>遇到该步骤时，<br><img src="/image/mongodb.png" alt="mongodb.png"><br>选择custom可以自定义安装路径<br>安装完成后，在bin所在的文件夹，与bin同级建立data文件夹，然后cmd到bin文件夹，执行<br>mongod –dbpath data文件夹路径（例：D:\MongoDB\data）<br>执行完最后一行出现：<br>2017-03-12T13:16:29.286+0800 I NETWORK  [thread1] waiting for connections on por<br>t 27017<br>浏览器输入 <a href="http://localhost:27017/" target="_blank" rel="external">http://localhost:27017/</a> 可以看到显示信息为<br>It looks like you are trying to access MongoDB over HTTP on the native driver port.<br>说明安装完成</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>修改package.json,dependencies中增加  “mongodb”: “&gt;= 0.9.9”<br>npm install  //更新依赖模块<br>在与app.js同级目录下新建settings.js,内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">cookieSecret</span>: <span class="string">'microblogYooHannah'</span>,</div><div class="line">  <span class="attr">db</span>: <span class="string">'microblog'</span>,</div><div class="line">  <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>新建models文件夹，并在里面新建文件db.js,内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> settings = <span class="built_in">require</span>(<span class="string">'../settings'</span>),</div><div class="line">    Db = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).Db,</div><div class="line">    Connection = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).Connection,</div><div class="line">    Server = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).Server;</div><div class="line">    <span class="built_in">module</span>.exports = <span class="keyword">new</span> Db(settings.db, <span class="keyword">new</span> Server(settings.host, Connection.DEFAULT_PORT, &#123;&#125;), &#123;<span class="attr">safe</span>: <span class="literal">true</span>&#125;);</div></pre></td></tr></table></figure></p>
<p>修改package.json,dependencies中增加  “connect-mongo”: “&gt;= 0.1.7”<br>npm install更新依赖模块<br>修改app.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MongoStore = <span class="built_in">require</span>(<span class="string">'connect-mongo'</span>);</div><div class="line"><span class="keyword">var</span> settings = <span class="built_in">require</span>(<span class="string">'./settings'</span>);</div><div class="line"></div><div class="line">app.use(express.session(&#123;</div><div class="line">  <span class="attr">secret</span>: settings.cookieSecret,</div><div class="line">  <span class="attr">store</span>: <span class="keyword">new</span> MongoStore(&#123;</div><div class="line">  <span class="attr">db</span>: settings.db</div><div class="line">  &#125;)</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<p>由于session不再绑定在express上，这里会报错，所以要单独安装session<br>npm install express-session<br>修改app.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> session    = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</div><div class="line"><span class="keyword">var</span> MongoStore = <span class="built_in">require</span>(<span class="string">'connect-mongo'</span>)(session);</div><div class="line"><span class="keyword">var</span> settings = <span class="built_in">require</span>(<span class="string">'./settings'</span>);</div><div class="line"></div><div class="line"></div><div class="line">app.use(session(&#123;</div><div class="line">  <span class="attr">secret</span>: settings.cookieSecret,</div><div class="line">  <span class="attr">store</span>: <span class="keyword">new</span> MongoStore(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'mongodb://localhost/db'</span><span class="comment">//链接数据库地址  </span></div><div class="line">  &#125;)</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<p>如出现错误：<br>MongoError: failed to connect to server [localhost:27017] on first connect<br>可能是没有运行刚才安装的MongoDB,这时要回到cmd,执行<br>mongod –dbpath data文件夹路径（例：D:\MongoDB\data）<br>如出现以下提醒：<br>express-session deprecated undefined resave option;<br>express-session deprecated undefined saveUninitialized option;<br>则补充上这两个配置参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.use(session(&#123;</div><div class="line">  resave: false, //添加 resave 选项  </div><div class="line">  saveUninitialized: true, //添加 saveUninitialized 选项  </div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<h1 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h1><p>在view中新建reg.ejs,内容如下；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;form class=&quot;form-horizontal&quot; method=&quot;post&quot;&gt;</div><div class="line">  &lt;fieldset&gt;</div><div class="line">    &lt;legend&gt;用户注册&lt;/legend&gt;</div><div class="line">    &lt;div class=&quot;control-group&quot;&gt;</div><div class="line">      &lt;label class=&quot;control-label&quot; for=&quot;username&quot;&gt;用户名&lt;/label&gt;</div><div class="line">      &lt;div class=&quot;controls&quot;&gt;</div><div class="line">        &lt;input type=&quot;text&quot; class=&quot;input-xlarge&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</div><div class="line">        &lt;p class=&quot;help-block&quot;&gt;你的账户名称，用于登录和显示。 &lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;control-group&quot;&gt;</div><div class="line">      &lt;label class=&quot;control-label&quot; for=&quot;password&quot;&gt;口令&lt;/label&gt;</div><div class="line">      &lt;div class=&quot;controls&quot;&gt;</div><div class="line">        &lt;input type=&quot;password&quot; class=&quot;input-xlarge&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;control-group&quot;&gt;</div><div class="line">      &lt;label class=&quot;control-label&quot; for=&quot;password-repeat&quot;&gt;重复输入口令&lt;/label&gt;</div><div class="line">      &lt;div class=&quot;controls&quot;&gt;</div><div class="line">        &lt;input type=&quot;password&quot; class=&quot;input-xlarge&quot; id=&quot;password-repeat&quot; name=&quot;password-repeat&quot;&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;form-actions&quot;&gt;</div><div class="line">      &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;注册&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/fieldset&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>在app.js和routes/index中增加访问路径和响应函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.js</span></div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);<span class="comment">//路由</span></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.use(<span class="string">'/'</span>, router);</div><div class="line">app.use(<span class="string">'/reg'</span>,router );</div><div class="line"></div><div class="line"><span class="comment">//routes/index.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"></div><div class="line"><span class="comment">/* GET home page. */</span></div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'首页'</span> &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(<span class="string">'/reg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  res.render(<span class="string">'reg'</span>, &#123; <span class="attr">title</span>: <span class="string">'用户注册'</span> &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.post(<span class="string">'/reg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line"><span class="comment">//检验用户两次输入的口令是否一致</span></div><div class="line">  <span class="keyword">if</span> (req.body[<span class="string">'password-repeat'</span>] != req.body[<span class="string">'password'</span>]) &#123;</div><div class="line">    req.flash(<span class="string">'error'</span>, <span class="string">'两次输入的口令不一致'</span>);</div><div class="line">    <span class="keyword">return</span> res.redirect(<span class="string">'/reg'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//生成口令的散列值</span></div><div class="line">  <span class="keyword">var</span> md5 = crypto.createHash(<span class="string">'md5'</span>);</div><div class="line">  <span class="keyword">var</span> password = md5.update(req.body.password).digest(<span class="string">'base64'</span>);</div><div class="line">  <span class="keyword">var</span> newUser = <span class="keyword">new</span> User(&#123;</div><div class="line">    <span class="attr">name</span>: req.body.username,</div><div class="line">    <span class="attr">password</span>: password,</div><div class="line">  &#125;);</div><div class="line"><span class="comment">//检查用户名是否已经存在</span></div><div class="line">  User.get(newUser.name, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (user)</div><div class="line">      err = <span class="string">'Username already exists.'</span>;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      req.flash(<span class="string">'error'</span>, err);</div><div class="line">      <span class="keyword">return</span> res.redirect(<span class="string">'/reg'</span>);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//如果不存在则新增用户</span></div><div class="line">    newUser.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        req.flash(<span class="string">'error'</span>, err);</div><div class="line">        <span class="keyword">return</span> res.redirect(<span class="string">'/reg'</span>);</div><div class="line">      &#125;</div><div class="line">      req.session.user = newUser;</div><div class="line">      req.flash(<span class="string">'success'</span>, <span class="string">'注册成功'</span>);</div><div class="line">      res.redirect(<span class="string">'/'</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure></p>
<p>响应函数中的User是用户模型,在models中创建user.js，再引入到routes/index<br>响应函数会出现<br>1.title is not defined的问题<br>解决办法就是将views/layout.ejs的title换成locals.title<br>2.req.flash会报错说req.flash is not a function，则<br>npm install connect-flash<br>app.js修改：<br>var flash = require(‘connect-flash’);<br>app.use(flash());<br>这样所有的req就可以使用flash()函数<br>3.crypto没有被定义<br>npm install crypto<br>routes/index.js引入<br>var crypto = require(‘crypto’);</p>
<h1 id="视图交互"><a href="#视图交互" class="headerlink" title="视图交互"></a>视图交互</h1><p>实现不同登录状态下页面呈现不同内容的功能，创建动态视图助手<br>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app.use(function(req,res,next)&#123;</div><div class="line">  res.locals.user=req.session.user;</div><div class="line"></div><div class="line">  var err = req.flash(&apos;error&apos;);</div><div class="line">  var success = req.flash(&apos;success&apos;);</div><div class="line"></div><div class="line">  res.locals.error = err.length ? err : null;</div><div class="line">  res.locals.success = success.length ? success : null;</div><div class="line"></div><div class="line">  next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>放在路由配置前面<br>接下来，修改 layout.ejs中的导航栏部分,为已登入用户和未登入用户显示不同的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;nav&quot;&gt;</div><div class="line">&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;% if (!user) &#123; %&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/login&quot;&gt;登入&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/reg&quot;&gt;注册&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;% &#125; else &#123; %&gt;</div><div class="line">&lt;li&gt;&lt;a href=&quot;/logout&quot;&gt;登出&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;% &#125; %&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>在 container 中，&lt;%- body %&gt;之前加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;% if (success) &#123; %&gt;</div><div class="line">&lt;div class=&quot;alert alert-success&quot;&gt;</div><div class="line">&lt;%= success %&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div><div class="line">&lt;% if (error) &#123; %&gt;</div><div class="line">&lt;div class=&quot;alert alert-error&quot;&gt;</div><div class="line">&lt;%= error %&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<p>它的功能是页面通知。</p>
<h1 id="登录登出操作-状态判断-建立微博模型，处理微博发表操作"><a href="#登录登出操作-状态判断-建立微博模型，处理微博发表操作" class="headerlink" title="登录登出操作,状态判断;建立微博模型，处理微博发表操作"></a>登录登出操作,状态判断;建立微博模型，处理微博发表操作</h1><p>同样建立连接路由，写响应函数</p>
<h1 id="处理首页登录前后状态"><a href="#处理首页登录前后状态" class="headerlink" title="处理首页登录前后状态"></a>处理首页登录前后状态</h1><p>省略步骤可参考书籍<br><a href="https://github.com/YooHannah/NodejsofMicroblog" target="_blank" rel="external">代码详见</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建&quot;&gt;&lt;a href=&quot;#搭建&quot; class=&quot;headerlink&quot; title=&quot;搭建&quot;&gt;&lt;/a&gt;搭建&lt;/h1&gt;&lt;p&gt;如果全局安装express 使用npm install -g express 语句安装后，无法使用express命令&lt;br&gt;则先执行npm 
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yoohannah.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>同步/异步和使用</title>
    <link href="http://yoohannah.github.io/post/knowledge/sync.html"/>
    <id>http://yoohannah.github.io/post/knowledge/sync.html</id>
    <published>2017-03-11T01:31:15.000Z</published>
    <updated>2017-03-11T01:47:56.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h1><p>同步读取一个文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//readfile.js</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'file.txt'</span>,<span class="string">'utf-8'</span>);</div><div class="line"><span class="built_in">console</span>.log(data);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'end.'</span>);</div><div class="line"><span class="comment">//执行</span></div><div class="line">$node readfile.js</div><div class="line">contents <span class="keyword">of</span> the file.</div><div class="line">end.</div></pre></td></tr></table></figure></p>
<p>异步读取一个文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//readfile.js</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">fs.readFile(<span class="string">'file.txt'</span>,<span class="string">'utf-8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (err) &#123;</div><div class="line">	  <span class="built_in">console</span>.log(err);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	  <span class="built_in">console</span>.log(data);</div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'end.'</span>);</div><div class="line"><span class="comment">//执行</span></div><div class="line">$node readfile.js</div><div class="line">end.</div><div class="line">contents <span class="keyword">of</span> the file.</div></pre></td></tr></table></figure></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="node的REPL模式"><a href="#node的REPL模式" class="headerlink" title="node的REPL模式"></a>node的REPL模式</h2><p>即输入代码回车立即执行的模式<br>在command prompt中直接输入node进入该模式，连续两次Ctrl+C可退出</p>
<h2 id="监视代码改动"><a href="#监视代码改动" class="headerlink" title="监视代码改动"></a>监视代码改动</h2><p>npm install -g supervisor //安装supervisor<br>supervisor app.js //代替node app.js，修改代码后自动终止进程并重启</p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>把文件夹封装为一个模块，即所谓的包，包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于一些固定接口的函数库<br>包安装：作为工程运行，通过本地安装;如果要在命令行下使用,则使用全局模式安装</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;同步-异步&quot;&gt;&lt;a href=&quot;#同步-异步&quot; class=&quot;headerlink&quot; title=&quot;同步/异步&quot;&gt;&lt;/a&gt;同步/异步&lt;/h1&gt;&lt;p&gt;同步读取一个文件&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js理解</title>
    <link href="http://yoohannah.github.io/post/knowledge/jssummary.html"/>
    <id>http://yoohannah.github.io/post/knowledge/jssummary.html</id>
    <published>2017-03-11T00:23:09.000Z</published>
    <updated>2017-03-15T13:55:26.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>不通过花括号来界定，通过函数来定义，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">	<span class="keyword">var</span> somevar = <span class="string">"value"</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(somevar);<span class="comment">//value</span></div></pre></td></tr></table></figure></p>
<p>在访问未定义的变量或定义了但没有初始化的变量时都会获得undefined<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scope = <span class="string">"1111"</span>;</div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(scope); <span class="comment">//undefined</span></div><div class="line">	<span class="keyword">var</span> scope = <span class="string">'f'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>作用域的嵌套关系在定义时确定，不在调用时确定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scope = <span class="string">"top"</span>;</div><div class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(scope);</div><div class="line">&#125;;</div><div class="line">f1();<span class="comment">//top</span></div><div class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> scope = <span class="string">'f2'</span>;</div><div class="line">	f1();</div><div class="line">&#125;;</div><div class="line">f2(); <span class="comment">//top</span></div></pre></td></tr></table></figure></p>
<p>全局作用域是个对象，这个对象叫全局对象，nodejs是global对象，浏览器是window对象，包括<br>在最外层定义的变量<br>全局对象的属性<br>未用var定义直接赋值的变量</p>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>由函数(环境)及其封闭的自由变量组成的集合体，<br>可以想象成一个容器，里面包括一个函数和它用到的变量，每当想使用一次这个容器里的函数，就将这个容器复制一次给调用者：<br>1.不通调用者得到的容器相互隔离，没有关系，<br>2.被复制到调用者的函数，会自己形成一个独立的运行环境，每次调用完会根据变量性质，更新变量值,不会释放变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> generateClosuer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    count++;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> get;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> counter1 = generateClosuer();</div><div class="line"><span class="keyword">var</span> counter2 = generateClosuer();</div><div class="line"><span class="built_in">console</span>.log(counter1()); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(counter1()); <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(counter2()); <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(counter1()); <span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>上下文对象即this指针，即被调用函数所处的环境，<br>上下文对象的作用是在一个函数内部引用调用它的对象本身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name,url</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.url = url;</div><div class="line">	<span class="keyword">this</span>.diaplay = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> someuser = <span class="keyword">new</span> User(<span class="string">'byvoid'</span>,<span class="string">'http://www.byvoid.com'</span>);</div></pre></td></tr></table></figure></p>
<p>创建someuser对象时，构造函数的this指调用它的someuser<br>函数类型的变量指向这个函数实体的一个引用，在引用之间赋值不会对对象产生复制行为。<br>我们可以通过函数的任何一个引用调用这个函数，但该函数的上下文即this不同<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someuser = &#123;</div><div class="line">	<span class="attr">name</span>:<span class="string">'byvoid'</span>,</div><div class="line">	<span class="attr">func</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">	<span class="attr">name</span>:<span class="string">'foobar'</span></div><div class="line">&#125;;</div><div class="line">someuser.func();<span class="comment">//byvoid</span></div><div class="line">foo.func = someuser.func; <span class="comment">//引用someuser.func这个函数实体，其实就是someuser.func的代码内容</span></div><div class="line">foo.func();<span class="comment">//foobar this是foo</span></div><div class="line"></div><div class="line">name = <span class="string">'global'</span>;</div><div class="line">func = someuser.func;</div><div class="line">func();<span class="comment">//global</span></div></pre></td></tr></table></figure></p>
<h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h2><p>让其他对象调用本对象的方法<br>A对象名.函数属性名.call(B对象名,函数参数表(逗号隔开)); //B调用A的方法<br>A对象名.函数属性名.apply(B对象名,函数参数数组);//B调用A的方法</p>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>永久绑定函数的上下文，使其无论被谁调用，上下文都是固定的<br>A对象名.函数属性名.bind(B对象名,函数参数表(逗号隔开));<br>bind方法返回上下文为B对象的A对象的函数<br>如果在使用bind时，绑定了参数表，则在调用返回函数时，只需要传入未绑定的参数即可<br>注意不能重复绑定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someuser = &#123;</div><div class="line">	<span class="attr">name</span>:<span class="string">'byvoid'</span>,</div><div class="line">	<span class="attr">func</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line"> &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> foo = &#123;</div><div class="line">	<span class="attr">name</span>:<span class="string">'foobar'</span></div><div class="line">&#125;;</div><div class="line">func = someuser.func.bind(foo);</div><div class="line">func();<span class="comment">//foobar</span></div><div class="line"></div><div class="line">func2 = func.bind(someuser);</div><div class="line">func2();<span class="comment">//foobar;</span></div></pre></td></tr></table></figure></p>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>构造函数创建属性<br>除非必须用构造函数闭包，否则尽量用原型定义成员函数<br>原型定义的成员是多个实例共享的，因此尽量在构造函数内定义一般成员尤其是对象或数组<br>原型链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function Foo()&#123;</div><div class="line">&#125;</div><div class="line">object.prototype.name = &apos;my object&apos;;</div><div class="line">Foo.prototype.name = &apos;Bar&apos;;</div><div class="line">var obj = new object();</div><div class="line">var foo = new Foo();</div><div class="line">console.log(obj.name);//my object</div><div class="line">console.log(foo.name);//Bar</div><div class="line">console.log(foo.__proto__.name);//Bar</div><div class="line">console.log(foo.__proto__.__proto__.name);//my object</div><div class="line">console.log(foo.__proto__.constructor.prototype.name);//Bar</div></pre></td></tr></table></figure></p>
<p><img src="/image/typeof.png" alt="typeof"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h1&gt;&lt;p&gt;不通过花括号来界定，通过函数来定义，&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>深度广度优先遍历+马踏棋盘算法</title>
    <link href="http://yoohannah.github.io/post/algorithm/MapTraversal.html"/>
    <id>http://yoohannah.github.io/post/algorithm/MapTraversal.html</id>
    <published>2017-03-07T13:06:37.000Z</published>
    <updated>2017-04-02T11:09:27.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度优先遍历-深度优化搜索DFS"><a href="#深度优先遍历-深度优化搜索DFS" class="headerlink" title="深度优先遍历/深度优化搜索DFS"></a>深度优先遍历/深度优化搜索DFS</h1><p><img src="/image/Traversal1.png" alt="Traversal1"><br>右手原则：在没有碰到重复顶点的1情况下，分叉路口始终是向右手边走，没路过一个顶点就做一个记号</p>
<p>主要思路是右手原则，把自己想象成从一个顶点出发的小人,每次选择下一步要走的路径时，就选择右手方向的路径，并给自己即将离开的顶点做一个已经遍历过的标记，直到碰到右手选择的路径将要到达的顶点是已经遍历过的顶点，这时则判断从右手方向开始的路径的终点顶点是否已遍历，若没有遍历，则选择该路径继续往下，若碰到所有路径终点顶点都是已经遍历过的，则沿到达该顶点的路径返回上一个顶点，检查上一顶点的其他路径顶点是否已经遍历，未遍历的话，则沿该路径走下去，即碰到所有路径顶点都遍历过则返回上一顶点，以此类推，直到返回起点顶点</p>
<p>整个图的遍历过程算法上是一个递归的过程，遍历方式上类似于树的前序遍历<br><img src="/image/Traversal2.png" alt="Traversal2"><br>看蓝色的路径即顶点遍历过程<br>A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;G-&gt;H (往回走，看红色路径顶点都已遍历过)-&gt;G-&gt;F-&gt;E-&gt;D-&gt;I-&gt;D-&gt;C-&gt;B-&gt;A</p>
<p>编程思路：<br>遍历图的邻接矩阵，邻接矩阵建立时注意选择是使用右手原则还是左手原则，从起点开始遍历该顶点所在行，便利到非0值且对应的列顶点未访问过就开始遍历该列顶点对应顶点所在的行，同样遍历非0未遍历过的顶点，如果该行所有顶点都遍历过则返回上一顶点继续重复遍历找未遍历的顶点，直到返回起点位置<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/MapDeepTraversal.js" target="_blank" rel="external">代码链接</a></p>
<h1 id="马踏棋盘问题"><a href="#马踏棋盘问题" class="headerlink" title="马踏棋盘问题"></a>马踏棋盘问题</h1><p>国际象棋的棋盘为8*8的方格棋盘，现将“马”放在任意指定的方格中，按照“马”走棋的规则将“马”进行移动<br>要求每个方格只能进入一次，最终使得“马”走遍棋盘64个方格</p>
<p>一个位置最多有八种选择，如下<br><img src="/image/chess.png" alt="chess"><br><a href="https://github.com/YooHannah/algorithm/blob/master/C/checkerboard.c" target="_blank" rel="external">代码链接</a></p>
<h1 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h1><p>主要思路：树的层序遍历<br>结构：队列<br>原则：右手原则<br>将复杂的图调整结构为层的形状，从最上一层结点唯一结点出发，入队列<br>遍历第二层，从与上一层结点相连的右手边的结点开始遍历，先将上一层相连的结点出队列，然后第二层结点入队列<br>以此类推，即在本层遍历时，先将与将要遍历的结点的上层结点出队列，然后将本层结点入队列，<br>遍历完一个上层结点的本层连接点，先将上层下一个结点出队列，在将上层下一个节点的本层链接点入队列<br>出队列顺序即遍历顺序<br><img src="/image/tug1.png" alt="tug1"><br>选定一个起点结点(A)，依次遍历与该结点相连结点(B、F)，每个结点遍历完后添加遍历标记，<br>再依次遍历刚刚遍历过的结点(先B后F)的相连结点(CIG、E),同样遍历完要加标记<br>以此类推，再遍历C的连接点D，G的连接点H<br><img src="/image/BreadthMaptraversal2.png" alt="BreadthMaptraversal2"><br>编程思路：<br>将每次遍历的结点入队列，每遍历完一层，出一次队列，出队列顺序即遍历顺序<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/BreadthMaptraversal.js" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深度优先遍历-深度优化搜索DFS&quot;&gt;&lt;a href=&quot;#深度优先遍历-深度优化搜索DFS&quot; class=&quot;headerlink&quot; title=&quot;深度优先遍历/深度优化搜索DFS&quot;&gt;&lt;/a&gt;深度优先遍历/深度优化搜索DFS&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/ima
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://yoohannah.github.io/post/knowledge/es6.html"/>
    <id>http://yoohannah.github.io/post/knowledge/es6.html</id>
    <published>2017-03-05T23:12:37.000Z</published>
    <updated>2017-03-05T23:12:23.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="let"><a href="#let" class="headerlink" title="let"></a>let</h1><p>1.let 声明的变量在let 命令所在的代码快内有效<br>2.不声明直接用变量或者先用再声明都会报错<br>3.暂时性死区:在变量声明之前就使用变量的代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</div></pre></td></tr></table></figure></p>
<p>4.不允许在同一级别块域内重复声明一个变量<br>5.let 声明的变量,外层代码块不受内层代码块的影响<br>—-外层作用域无法读取内层作用域的变量<br>—-内层作用域可以定义外层作用域的同名变量<br>6.块级作用域内声明的函数，行为类似于var声明的变量,仅在所在的代码块内有效</p>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>1.声明的同时进行复制<br>2.作用域特征同let<br>3.当声明的变量为对象或者数组时，只可以改变对象属性或数组元素的值，但不可以将变量重新赋值</p>
<p>ES6 6种声明变量的方法：var、function、let、const、import、class<br>var命令和function命令声明的全局变量，依旧是顶层对象的属性;let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。</p>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>1.‘模式匹配’，左右对应相等，变量取值由位置决定<br>2.当右边的数据量大于左边变量数，如果是单层数组，则依次匹配，多余形成数组赋给最后一个变量<br>—-如果变量组成多层数组，则依次匹配，剩余的舍弃<br>3.当右边小于左边变量数，多余的变量的值就等于undefined<br>4.可以提前给变量赋默认值，默认值可以是已声明的其他变量，<br>–注意给变量赋‘undefined’的值的时候，如果变量原来的值不严格等于‘===’undefined，将不会被赋值为undefined</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>1.对象的属性没有次序，变量必须与属性同名，才能取到正确的值，属性是匹配的标志<br>2.若变量与属性名不一致，则先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者(变量)，而不是前者(属性)<br>3.如果在声明对象变量的时候为属性值的变量赋值，则相当于同时声明属性值的变量<br>4.进行套嵌赋值时，注意分清属性名和变量名，被赋值的是变量名，不是属性名<br>5.进行默认值赋值规则同数组，赋空不会生效<br>6.属性名表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let arr = [1, 2, 3];</div><div class="line">let &#123;0 : first, [arr.length - 1] : last&#125; = arr;</div><div class="line">first // 1</div><div class="line">last // 3</div></pre></td></tr></table></figure></p>
<p>数组arr的0键对应的值是1，[arr.length - 1]就是2键，对应的值是3</p>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>类似数组，但注意下面两种写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function move(&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123;</div><div class="line">  return [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;x: 3, y: 8&#125;); // [3, 8]</div><div class="line">move(&#123;x: 3&#125;); // [3, 0]</div><div class="line">move(&#123;&#125;); // [0, 0]</div><div class="line">move(); // [0, 0]</div></pre></td></tr></table></figure></p>
<p>为变量x和y赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function move(&#123;x, y&#125; = &#123; x: 0, y: 0 &#125;) &#123;</div><div class="line">  return [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;x: 3, y: 8&#125;); // [3, 8]</div><div class="line">move(&#123;x: 3&#125;); // [3, undefined]</div><div class="line">move(&#123;&#125;); // [undefined, undefined]</div><div class="line">move(); // [0, 0]</div></pre></td></tr></table></figure></p>
<p>为x,y的默认值赋值</p>
<h2 id="字符串、数字、布尔"><a href="#字符串、数字、布尔" class="headerlink" title="字符串、数字、布尔"></a>字符串、数字、布尔</h2><p>字符串：字符串被转换成数组<br>数字/布尔：先转换成对象</p>
<h1 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h1><table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:right">es5/js</th>
<th style="text-align:center">es6</th>
<th>2017</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unicode表示法</td>
<td style="text-align:right">只限于\u0000——\uFFFF之间的字符</td>
<td style="text-align:center">只要将码点放入大括号，就能正确解读该字符</td>
<td></td>
</tr>
<tr>
<td>charCodeAt</td>
<td style="text-align:right">只会正确返回16位的UTF-16字符的码点</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>codePointAt</td>
<td style="text-align:right"></td>
<td style="text-align:center">会正确返回32位的UTF-16字符的码点</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>String.fromCharCode</td>
<td style="text-align:right">只会识别16位的UTF-16字符</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>String.fromCodePoint</td>
<td style="text-align:right"></td>
<td style="text-align:center">会会识别32位的UTF-16字符</td>
<td></td>
</tr>
<tr>
<td>for</td>
<td style="text-align:right">不可以识别大于0xFFFF的码点</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>for…of</td>
<td style="text-align:right"></td>
<td style="text-align:center">可以识别大于0xFFFF的码点</td>
<td></td>
</tr>
<tr>
<td>charAt</td>
<td style="text-align:right">不能识别码点大于0xFFFF的字符</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>at</td>
<td style="text-align:right"></td>
<td style="text-align:center">能识别码点大于0xFFFF的字符</td>
<td></td>
</tr>
<tr>
<td>normalize</td>
<td style="text-align:right">‘\u01D1’===’\u004F\u030C’ //false</td>
<td style="text-align:center">‘\u01D1’.normalize() === ‘\u004F\u030C’.normalize()// true</td>
<td></td>
</tr>
<tr>
<td>indexOf</td>
<td style="text-align:right">确定一个字符串是否包含在另一个字符串中</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>includes()</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回布尔值，表示是否找到了参数字符串</td>
<td></td>
</tr>
<tr>
<td>startsWith</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回布尔值，表示参数字符串是否在源字符串的头部</td>
<td></td>
</tr>
<tr>
<td>endsWith</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回布尔值，表示参数字符串是否在源字符串的尾部</td>
<td></td>
</tr>
<tr>
<td>repeat(n)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回一个新字符串，表示将原字符串重复n次。</td>
<td></td>
</tr>
<tr>
<td>padStart()，padEnd()</td>
<td style="text-align:right"></td>
<td style="text-align:center"></td>
<td>padStart()用于头部补全，padEnd()用于尾部补全</td>
</tr>
<tr>
<td>模板字符串</td>
<td style="text-align:right"></td>
<td style="text-align:center">反引号(`),保留空格和换行,变量名写在${}中</td>
</tr>
</tbody>
</table>
<h1 id="数值处理方法"><a href="#数值处理方法" class="headerlink" title="数值处理方法"></a>数值处理方法</h1><table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:right">es5/js</th>
<th style="text-align:center">es6</th>
<th>2017</th>
</tr>
</thead>
<tbody>
<tr>
<td>二进制和八进制表示法</td>
<td style="text-align:right">在严格模式之中，八进制就不再允许使用前缀0表示</td>
<td style="text-align:center">二进制0b或0B、八进制0o或0O</td>
<td></td>
</tr>
<tr>
<td>isFinite()/isNaN()</td>
<td style="text-align:right">先调用Number()将非数值的值转为数值，再进行判断</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>Number.isFinite()</td>
<td style="text-align:right"></td>
<td style="text-align:center">检查一个数值是否为有限的,非数值一律返回false。</td>
<td></td>
</tr>
<tr>
<td>Number.isNaN()</td>
<td style="text-align:right"></td>
<td style="text-align:center">检查一个值是否为NaN,非数值一律返回false。</td>
<td></td>
</tr>
<tr>
<td>parseInt()、parseFloat()</td>
<td style="text-align:right"></td>
<td style="text-align:center">移植到Number对象上面，行为完全保持不变。</td>
<td></td>
</tr>
<tr>
<td>Number.isInteger()</td>
<td style="text-align:right"></td>
<td style="text-align:center">判断一个值是否为整数</td>
<td></td>
</tr>
<tr>
<td>Number.EPSILON</td>
<td style="text-align:right"></td>
<td style="text-align:center">极小的常量,为浮点数计算设置一个误差范围</td>
<td></td>
</tr>
<tr>
<td>Number.isSafeInteger</td>
<td style="text-align:right"></td>
<td style="text-align:center">判断一个整数是否落在整数范围之内</td>
<td></td>
</tr>
<tr>
<td>Number.MAX_SAFE_INTEGER、Number.MIN_SAFE_INTEGER</td>
<td style="text-align:right"></td>
<td style="text-align:center">表示整数范围的上下限</td>
<td></td>
</tr>
<tr>
<td>Math.trunc</td>
<td style="text-align:right"></td>
<td style="text-align:center">去除一个数的小数部分，返回整数部分</td>
<td></td>
</tr>
<tr>
<td>Math.sign</td>
<td style="text-align:right"></td>
<td style="text-align:center">判断一个数到底是正数、负数、还是零</td>
<td></td>
</tr>
<tr>
<td>Math.cbrt</td>
<td style="text-align:right"></td>
<td style="text-align:center">计算一个数的立方根</td>
<td></td>
</tr>
<tr>
<td>Math.clz32</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回一个数的32位无符号整数形式有多少个前导0</td>
<td></td>
</tr>
<tr>
<td>Math.imul</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。</td>
<td></td>
</tr>
<tr>
<td>Math.fround</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回一个数的单精度浮点数形式</td>
<td></td>
</tr>
<tr>
<td>Math.hypot</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回所有参数的平方和的平方根</td>
<td></td>
</tr>
<tr>
<td>Math.expm1(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回Math.exp(x) - 1</td>
<td></td>
</tr>
<tr>
<td>Math.log1p(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回1 + x的自然对数</td>
<td></td>
</tr>
<tr>
<td>Math.log10(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回以10为底的x的对数</td>
<td></td>
</tr>
<tr>
<td>Math.log2(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回以2为底的x的对数</td>
<td></td>
</tr>
<tr>
<td>Math.sign()</td>
<td style="text-align:right"></td>
<td style="text-align:center">判断一个值的正负</td>
<td></td>
</tr>
<tr>
<td>指数运算符(**)</td>
<td style="text-align:right"></td>
<td style="text-align:center">指数运算符与Math.pow的实现不相同</td>
<td></td>
</tr>
<tr>
<td>Math.sinh(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回x的双曲正弦</td>
<td></td>
</tr>
<tr>
<td>Math.cosh(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回x的双曲余弦</td>
<td></td>
</tr>
<tr>
<td>Math.tanh(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回x的双曲正切</td>
<td></td>
</tr>
<tr>
<td>Math.asinh(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回x的反双曲正弦</td>
<td></td>
</tr>
<tr>
<td>Math.acosh(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回x的反双曲余弦</td>
<td></td>
</tr>
<tr>
<td>Math.atanh(x)</td>
<td style="text-align:right"></td>
<td style="text-align:center">返回x的反双曲正切</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h1&gt;&lt;p&gt;1.let 声明的变量在let 命令所在的代码快内有效&lt;br&gt;2.不声明直接用变量或者先用再声明都会报错&lt;br&gt;3.暂时性死区:在变
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoohannah.github.io/post/knowledge/ze.html"/>
    <id>http://yoohannah.github.io/post/knowledge/ze.html</id>
    <published>2017-03-05T23:05:37.000Z</published>
    <updated>2017-03-05T23:06:06.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断邮箱格式"><a href="#判断邮箱格式" class="headerlink" title="判断邮箱格式"></a>判断邮箱格式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if($scope.supplier.email ==&quot;&quot; || ( $scope.supplier.email!=&quot;&quot; &amp;&amp; !/.+@.+\.[a-zA-Z]&#123;2,4&#125;$/.test($scope.supplier.email) ))&#123;</div><div class="line">         toastr.warning(&apos;请输入正确的E-Mail地址!&apos;,&apos;警告&apos;);</div><div class="line">         return;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<h1 id="输入框input只允许输入数字"><a href="#输入框input只允许输入数字" class="headerlink" title="输入框input只允许输入数字"></a>输入框input只允许输入数字</h1><p>在input标签里添加：<br>onKeyUp=”value=value.replace(/[^\d]/g,’’)”</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;判断邮箱格式&quot;&gt;&lt;a href=&quot;#判断邮箱格式&quot; class=&quot;headerlink&quot; title=&quot;判断邮箱格式&quot;&gt;&lt;/a&gt;判断邮箱格式&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>图的存储结构</title>
    <link href="http://yoohannah.github.io/post/algorithm/graphstruct.html"/>
    <id>http://yoohannah.github.io/post/algorithm/graphstruct.html</id>
    <published>2017-03-01T13:59:30.000Z</published>
    <updated>2017-03-01T14:22:41.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-邻接矩阵"><a href="#1-邻接矩阵" class="headerlink" title="1.邻接矩阵"></a>1.邻接矩阵</h1><h2 id="1-无向图"><a href="#1-无向图" class="headerlink" title="1.无向图"></a>1.无向图</h2><p><img src="/image/graph1.png" alt="graph1"><br>一个一维数组存储图中顶点信息，</p>
<table>
<thead>
<tr>
<th>顶点数组</th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>一个二维数组(邻接矩阵)存储图中边或弧的信息<br>0表示不存在顶点间的边，1表示顶点间存在边</p>
<table>
<thead>
<tr>
<th></th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td>v0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>v1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>v2</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>v3</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>无向图构成的邻接矩阵为对称矩阵，对角线值为0<br>—–顶点Vi在邻接矩阵中第i行(或第i列)的元素之和为该顶点的度<br>—–扫描矩阵中第i行元素，元素为1的列为顶点Vi的邻接点</p>
<h2 id="2-有向图"><a href="#2-有向图" class="headerlink" title="2.有向图"></a>2.有向图</h2><p><img src="/image/graph2.png" alt="graph2"><br>一个一维数组存储图中顶点信息，</p>
<table>
<thead>
<tr>
<th>顶点数组</th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>坐标[Vi][Vj]的值，1表示Vi指向Vj的弧存在，0表示不存在</p>
<table>
<thead>
<tr>
<th></th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td>v0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>v1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>v2</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>v3</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>第Vi列的元素之和为顶点Vi的入度<br>第Vi行的元素之和为顶点Vi的出度</p>
<h2 id="3-网"><a href="#3-网" class="headerlink" title="3.网"></a>3.网</h2><p><img src="/image/tu3.png" alt="tu3"><br>邻接矩阵各元素的值不再用0/1表示，而是用权表示<br>顶点间若不存在弧，则用\infty无穷表示,顶点自己到自己的权为0</p>
<table>
<thead>
<tr>
<th></th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td>v0</td>
<td>0</td>
<td>\infty</td>
<td>\infty</td>
<td>18</td>
</tr>
<tr>
<td>v1</td>
<td>8</td>
<td>0</td>
<td>2</td>
<td>\infty</td>
</tr>
<tr>
<td>v2</td>
<td>4</td>
<td>\infty</td>
<td>0</td>
<td>\infty</td>
</tr>
<tr>
<td>v3</td>
<td>\infty</td>
<td>\infty</td>
<td>\infty</td>
<td>0</td>
</tr>
</tbody>
</table>
<h1 id="2-邻接表"><a href="#2-邻接表" class="headerlink" title="2.邻接表"></a>2.邻接表</h1><h2 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h2><p>顶点用一个一维数组存储<br>每个顶点Vi的所有邻接点构成一个线性表，由于个数不确定，用单链表来表示<br><img src="/image/tu4.png" alt="tu4"><br><img src="/image/tu5.png" alt="tu5"></p>
<h2 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h2><p>把顶点当弧尾建立邻接表，邻接表长度就是该顶点出度<br><img src="/image/tu6.png" alt="tu6"><br>把顶点当弧头建的表叫逆邻接表，邻接表长度就是该顶点入度<br><img src="/image/tu7.png" alt="tu7"></p>
<h2 id="网"><a href="#网" class="headerlink" title="网"></a>网</h2><p>在边表结点定义中再增加一个数据域来存储权值<br><img src="/image/tu8.png" alt="tu8"></p>
<h1 id="3-十字链表-有向图"><a href="#3-十字链表-有向图" class="headerlink" title="3.十字链表(有向图)"></a>3.十字链表(有向图)</h1><p>顶点表结构</p>
<p>|data|firstIn|firstOut|<br>data：顶点数据<br>firstIn:第一个入边表的指针<br>firstOut:第一个出边表的指针</p>
<p>边表结点结构 表示以条边</p>
<table>
<thead>
<tr>
<th>tailVex</th>
<th>headVex</th>
<th>headLink</th>
<th>tailLink</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>tailVex:该弧起点的顶点在顶点表的下标<br>headVex:该弧终点的顶点在顶点表的下标<br>headLink:指向headVex的弧的指针<br>tailLink: 从tailVex出发的弧的指针<br><img src="/image/graph2.png" alt="graph2"><br><img src="/image/tu9.png" alt="tu9"></p>
<h1 id="4-邻接多重表-无向表"><a href="#4-邻接多重表-无向表" class="headerlink" title="4.邻接多重表(无向表)"></a>4.邻接多重表(无向表)</h1><p>关注对象是图中的表不是顶点<br>|iVex|iLink|jVex|jLink|<br>iVex和jVex是与某条边依附的两个顶点在顶点表中的下标<br>iLink：指向依附顶点iVex的下一条边，<br>jLink：指向依附顶点jVex的下一条边，<br><img src="/image/tu10.png" alt="tu10"></p>
<h1 id="5-边集数组"><a href="#5-边集数组" class="headerlink" title="5.边集数组"></a>5.边集数组</h1><p>由两个一维数组构成<br>一个是存储顶点的信息<br>另一个存储边的信息<br>边数组的每个数据元素由一条边的起点下标(begin)、终点下标(end)和权(weight)组成</p>
<p><img src="/image/tu11.png" alt="tu11"></p>
<table>
<thead>
<tr>
<th>顶点数组</th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>边数组</th>
<th>begin</th>
<th>end</th>
<th>weight</th>
</tr>
</thead>
<tbody>
<tr>
<td>edges[0]</td>
<td>0</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>edges[1]</td>
<td>1</td>
<td>0</td>
<td>4</td>
</tr>
<tr>
<td>edges[2]</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>edges[3]</td>
<td>2</td>
<td>0</td>
<td>8</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-邻接矩阵&quot;&gt;&lt;a href=&quot;#1-邻接矩阵&quot; class=&quot;headerlink&quot; title=&quot;1.邻接矩阵&quot;&gt;&lt;/a&gt;1.邻接矩阵&lt;/h1&gt;&lt;h2 id=&quot;1-无向图&quot;&gt;&lt;a href=&quot;#1-无向图&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>日期格式兼容</title>
    <link href="http://yoohannah.github.io/post/knowledge/compatible_date.html"/>
    <id>http://yoohannah.github.io/post/knowledge/compatible_date.html</id>
    <published>2017-02-26T13:14:37.000Z</published>
    <updated>2017-02-26T13:24:56.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IE11-chrome-360-火狐兼容日期格式兼容"><a href="#IE11-chrome-360-火狐兼容日期格式兼容" class="headerlink" title="IE11/chrome/360/火狐兼容日期格式兼容"></a>IE11/chrome/360/火狐兼容日期格式兼容</h1><p> $scope.date= new Date().toLocaleDateString().replace(/\//g,’-‘);<br> 获取到的”year-month-day”格式支持/chrome/360/火狐，但到了IE11就变成”year年month月day”</p>
<p> var date = new Date();<br> var y = date.getFullYear();<br> var m = date.getMonth()+1;<br> var d = date.getDate();<br> var day = date.getDay();<br> var dateString=y+”-“+m+”-“+d;<br> $scope.date= dateString;</p>
<p> 这样获取的”year-month-day”格式支持以上四种浏览器</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IE11-chrome-360-火狐兼容日期格式兼容&quot;&gt;&lt;a href=&quot;#IE11-chrome-360-火狐兼容日期格式兼容&quot; class=&quot;headerlink&quot; title=&quot;IE11/chrome/360/火狐兼容日期格式兼容&quot;&gt;&lt;/a&gt;IE11/chr
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
</feed>
