<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Little World</title>
  <subtitle>learn and share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoohannah.github.io/"/>
  <updated>2018-12-04T13:19:58.893Z</updated>
  <id>http://yoohannah.github.io/</id>
  
  <author>
    <name>YooHannah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拖拽</title>
    <link href="http://yoohannah.github.io/post/react/drag.html"/>
    <id>http://yoohannah.github.io/post/react/drag.html</id>
    <published>2018-12-04T13:19:37.000Z</published>
    <updated>2018-12-04T13:19:58.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-React-实现拖放的技术要点"><a href="#使用-React-实现拖放的技术要点" class="headerlink" title="使用 React 实现拖放的技术要点"></a>使用 React 实现拖放的技术要点</h1><p>1.如何使用 React 的鼠标事件系统<br>2.如何判断拖放开始和拖放结束<br>3.如何实现拖放元素的位置移动 (可分为两种，一种是直接拖着具体要被移动的dom移动；另外一种是具体dom留在原位，拖着具体dom的影子移动，确定位置后，再将具体的dom放过去)<br>4.拖放状态在组件中如何维护</p>
<p>鼠标移动可能会超出要移动的组件和他的父组件，除了在document上监听，还可以在一个全局透明遮罩层上监听MouseMove和MouseUp好处：拖放过程不会选中其他任何元素，防止点击到其他组件</p>
<p>其他情景思考：<br>每个条目高度不一致，如何确定移动位置？<br>条目所在的列表有折叠，存在滚动条，如何根据滚动条确定位置？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import React, &#123; Component &#125; from &quot;react&quot;;</div><div class="line"></div><div class="line">require(&quot;./DndSample.css&quot;);</div><div class="line"></div><div class="line">const list = [];</div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">  list.push(`Item $&#123;i + 1&#125;`);</div><div class="line">&#125;</div><div class="line"></div><div class="line">const move = (arr, startIndex, toIndex) =&gt; &#123;</div><div class="line">  arr = arr.slice();</div><div class="line">  arr.splice(toIndex, 0, arr.splice(startIndex, 1)[0]);</div><div class="line">  return arr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const lineHeight = 42;</div><div class="line">class DndSample extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state.list = list;</div><div class="line">  &#125;</div><div class="line">  state = &#123;</div><div class="line">    dragging: false,</div><div class="line">    draggingIndex: -1,</div><div class="line">    startPageY: 0,</div><div class="line">    offsetPageY: 0,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  handleMounseDown = (evt, index) =&gt; &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      dragging: true,</div><div class="line">      startPageY: evt.pageY,</div><div class="line">      currentPageY: evt.pageY,</div><div class="line">      draggingIndex: index,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  handleMouseUp = () =&gt; &#123;</div><div class="line">    this.setState(&#123; dragging: false, startPageY: 0, draggingIndex: -1 &#125;);</div><div class="line">  &#125;;</div><div class="line">  //如果往下滑，就一次把下一条数据交换位置，如果往上移动，就一次把上一条数据交换位置，</div><div class="line">  handleMouseMove = evt =&gt; &#123;</div><div class="line">    let offset = evt.pageY - this.state.startPageY;</div><div class="line">    const draggingIndex = this.state.draggingIndex;</div><div class="line">    if (offset &gt; lineHeight &amp;&amp; draggingIndex &lt; this.state.list.length - 1) &#123;</div><div class="line">      // move down</div><div class="line">      offset -= lineHeight;</div><div class="line">      this.setState(&#123;</div><div class="line">        list: move(this.state.list, draggingIndex, draggingIndex + 1),</div><div class="line">        draggingIndex: draggingIndex + 1,</div><div class="line">        startPageY: this.state.startPageY + lineHeight,</div><div class="line">      &#125;);</div><div class="line">    &#125; else if (offset &lt; -lineHeight &amp;&amp; draggingIndex &gt; 0) &#123;</div><div class="line">      // move up</div><div class="line">      offset += lineHeight;</div><div class="line">      this.setState(&#123;</div><div class="line">        list: move(this.state.list, draggingIndex, draggingIndex - 1),</div><div class="line">        draggingIndex: draggingIndex - 1,</div><div class="line">        startPageY: this.state.startPageY - lineHeight,</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    this.setState(&#123; offsetPageY: offset &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  getDraggingStyle(index) &#123;</div><div class="line">    if (index !== this.state.draggingIndex) return &#123;&#125;;</div><div class="line">    return &#123;</div><div class="line">      backgroundColor: &quot;#eee&quot;,</div><div class="line">      transform: `translate(10px, $&#123;this.state.offsetPageY&#125;px)`,</div><div class="line">      opacity: 0.5,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;dnd-sample&quot;&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">          &#123;this.state.list.map((text, i) =&gt; (</div><div class="line">            &lt;li</div><div class="line">              key=&#123;text&#125;</div><div class="line">              onMouseDown=&#123;evt =&gt; this.handleMounseDown(evt, i)&#125;</div><div class="line">              style=&#123;this.getDraggingStyle(i)&#125;</div><div class="line">            &gt;</div><div class="line">              &#123;text&#125;</div><div class="line">            &lt;/li&gt;</div><div class="line">          ))&#125;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &#123;this.state.dragging &amp;&amp; ( //在一个遮罩层上监听MouseMove和MouseUp</div><div class="line">          &lt;div</div><div class="line">            className=&quot;dnd-sample-mask&quot;</div><div class="line">            onMouseMove=&#123;this.handleMouseMove&#125;</div><div class="line">            onMouseUp=&#123;this.handleMouseUp&#125;</div><div class="line">          /&gt;</div><div class="line">        )&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default DndSample;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">.dnd-sample ul &#123;</div><div class="line">  display: inline-block;</div><div class="line">  margin: 0;</div><div class="line">  padding: 0;</div><div class="line">  background-color: #eee;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.dnd-sample li &#123;</div><div class="line">  cursor: default;</div><div class="line">  list-style: none;</div><div class="line">  border-bottom: 1px solid #ddd;</div><div class="line">  padding: 10px;</div><div class="line">  margin: 0;</div><div class="line">  width: 300px;</div><div class="line">  background-color: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.dnd-sample-mask &#123;</div><div class="line">  position: fixed;</div><div class="line">  left: 0;</div><div class="line">  right: 0;</div><div class="line">  top: 0;</div><div class="line">  bottom: 0;</div><div class="line">  background: rgba(0, 0, 0, 0.1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用-React-实现拖放的技术要点&quot;&gt;&lt;a href=&quot;#使用-React-实现拖放的技术要点&quot; class=&quot;headerlink&quot; title=&quot;使用 React 实现拖放的技术要点&quot;&gt;&lt;/a&gt;使用 React 实现拖放的技术要点&lt;/h1&gt;&lt;p&gt;1.如何使用
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>对话框</title>
    <link href="http://yoohannah.github.io/post/react/dialog.html"/>
    <id>http://yoohannah.github.io/post/react/dialog.html</id>
    <published>2018-12-04T13:18:37.000Z</published>
    <updated>2018-12-04T13:19:02.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用React-Portals"><a href="#使用React-Portals" class="headerlink" title="使用React Portals"></a>使用React Portals</h1><p>React 16.3 新引入的 API<br>可以将虚拟 DOM 映射到任何真实 DOM 节点<br>解决了漂浮层的问题,比如Dialog,Tooltip 等</p>
<p>主要思路使用ReactDOM.createPortal将自定义dialog利用id挂到根标签上，dialog样式(包括悬浮)自己需要通过css定义,弹窗的显示和隐藏通过state操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">mport React from &quot;react&quot;;</div><div class="line">import ReactDOM from &quot;react-dom&quot;;</div><div class="line">import &#123; Button &#125; from &quot;antd&quot;;</div><div class="line">import &quot;./PortalSample.css&quot;;</div><div class="line"></div><div class="line">export default class PortalSample extends React.PureComponent &#123;</div><div class="line">  state = &#123; visible: false &#125;;</div><div class="line">  renderButton() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Button type=&quot;primary&quot; onClick=&#123;() =&gt; this.setState(&#123; visible: true &#125;)&#125;&gt;</div><div class="line">        打开对话框</div><div class="line">      &lt;/Button&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  renderDialog() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;portal-sample&quot;&gt;</div><div class="line">        &lt;div&gt;这是一个对话框！&lt;/div&gt;</div><div class="line">        &lt;br /&gt;</div><div class="line">        &lt;Button</div><div class="line">          type=&quot;primary&quot;</div><div class="line">          onClick=&#123;() =&gt; this.setState(&#123; visible: false &#125;)&#125;</div><div class="line">        &gt;</div><div class="line">          关闭对话框</div><div class="line">        &lt;/Button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    if (!this.state.visible) return this.renderButton();</div><div class="line">    return ReactDOM.createPortal(</div><div class="line">      this.renderDialog(),</div><div class="line">      document.getElementById(&quot;dialog-container&quot;),//在APP组件中定义</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.portal-sample &#123;</div><div class="line">  position: absolute;</div><div class="line">  padding: 20px;</div><div class="line">  width: 500px;</div><div class="line">  height: 300px;</div><div class="line">  left: 50%;</div><div class="line">  top: 50%;</div><div class="line">  transform: translate(-50%, -50%);</div><div class="line">  background-color: #fff;</div><div class="line">  border-radius: 10px;</div><div class="line">  border: 1px solid #ddd;</div><div class="line">  box-shadow: 0px 0px 20px 2px #ddd;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="使用UI组件库"><a href="#使用UI组件库" class="headerlink" title="使用UI组件库"></a>使用UI组件库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import ReactDOM from &quot;react-dom&quot;;</div><div class="line">import &#123; Button, Modal &#125; from &quot;antd&quot;;</div><div class="line">import &quot;./PortalSample.css&quot;;</div><div class="line"></div><div class="line">export default class PortalSample extends React.PureComponent &#123;</div><div class="line">  state = &#123; visible: false &#125;;</div><div class="line">  renderButton() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Button type=&quot;primary&quot; onClick=&#123;() =&gt; this.setState(&#123; visible: true &#125;)&#125;&gt;</div><div class="line">        打开对话框</div><div class="line">      &lt;/Button&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  renderDialog() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Modal</div><div class="line">        visible=&#123;this.state.visible&#125;</div><div class="line">        onCancel=&#123;() =&gt; this.setState(&#123; visible: false &#125;)&#125;</div><div class="line">      &gt;</div><div class="line">        &lt;div&gt;这是一个对话框！&lt;/div&gt;</div><div class="line">      &lt;/Modal&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;this.renderButton()&#125;</div><div class="line">        &#123;this.renderDialog()&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用React-Portals&quot;&gt;&lt;a href=&quot;#使用React-Portals&quot; class=&quot;headerlink&quot; title=&quot;使用React Portals&quot;&gt;&lt;/a&gt;使用React Portals&lt;/h1&gt;&lt;p&gt;React 16.3 新引入的 AP
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>表单 &amp; 列表</title>
    <link href="http://yoohannah.github.io/post/react/layout.html"/>
    <id>http://yoohannah.github.io/post/react/layout.html</id>
    <published>2018-12-04T13:17:37.000Z</published>
    <updated>2018-12-04T13:17:48.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现布局的几种方式"><a href="#实现布局的几种方式" class="headerlink" title="实现布局的几种方式"></a>实现布局的几种方式</h1><p>1.从0开始用 CSS实现<br>2.使用 CSS Grid 系统 （通过class实现，无需关心布局如何实现,同时可以适应不同屏幕的尺寸）<br>3.使用组件库,例如 antd（通过组件标签实现）</p>
<p>布局常见场景:侧边栏宽度可调整<br>1.手动实现拖放逻辑<br>2.使用 local storage 存储宽度位置</p>
<h2 id="上中下结构-中间高度随父级高度自适应，头部和底部高度固定"><a href="#上中下结构-中间高度随父级高度自适应，头部和底部高度固定" class="headerlink" title="上中下结构,中间高度随父级高度自适应，头部和底部高度固定"></a>上中下结构,中间高度随父级高度自适应，头部和底部高度固定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div className=&quot;app-layout1&quot;&gt;</div><div class="line">    &lt;div className=&quot;header&quot;&gt;Header&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;content&quot;&gt;content&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;footer&quot;&gt;Footer&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.app-layout1 &#123;</div><div class="line">  width: 500px;</div><div class="line">  height: 400px;</div><div class="line">  position: relative;</div><div class="line">  background-color: #eee;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.app-layout1 .header &#123;</div><div class="line">  line-height: 60px;</div><div class="line">  border-bottom: 2px solid #fff;</div><div class="line">&#125;</div><div class="line">.app-layout1 .content &#123;</div><div class="line">  position: absolute;</div><div class="line">  bottom: 60px;</div><div class="line">  top: 60px;</div><div class="line">  left: 0;</div><div class="line">  right: 0;</div><div class="line">&#125;</div><div class="line">.app-layout1 .footer &#123;</div><div class="line">  border-top: 2px solid #fff;</div><div class="line">  line-height: 60px;</div><div class="line">  bottom: 0;</div><div class="line">  left: 0;</div><div class="line">  right: 0;</div><div class="line">  position: absolute;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h2 id="导航布局，左边是导航栏，右边上中下结构"><a href="#导航布局，左边是导航栏，右边上中下结构" class="headerlink" title="导航布局，左边是导航栏，右边上中下结构"></a>导航布局，左边是导航栏，右边上中下结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div className=&quot;app-layout2&quot;&gt;</div><div class="line">    &lt;div className=&quot;header&quot;&gt;Header&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;sider&quot;&gt;Sider&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;content&quot;&gt;Content&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;footer&quot;&gt;Footer&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">.app-layout2 &#123;</div><div class="line">  width: 500px;</div><div class="line">  height: 400px;</div><div class="line">  position: relative;</div><div class="line">  background-color: #eee;</div><div class="line">  text-align: center;</div><div class="line">  padding-left: 150px;</div><div class="line">  line-height: 60px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.app-layout2 .header &#123;</div><div class="line">  border-bottom: 2px solid #fff;</div><div class="line">&#125;</div><div class="line">.app-layout2 .content &#123;</div><div class="line">  position: absolute;</div><div class="line">  bottom: 60px;</div><div class="line">  top: 60px;</div><div class="line">  left: 150px;</div><div class="line">  right: 0;</div><div class="line">&#125;</div><div class="line">.app-layout2 .sider &#123;</div><div class="line">  width: 150px;</div><div class="line">  position: absolute;</div><div class="line">  border-right: 2px solid #fff;</div><div class="line">  top: 0;</div><div class="line">  left: 0;</div><div class="line">  bottom: 0;</div><div class="line">&#125;</div><div class="line">.app-layout2 .footer &#123;</div><div class="line">  border-top: 2px solid #fff;</div><div class="line">  bottom: 0;</div><div class="line">  left: 150px;</div><div class="line">  right: 0;</div><div class="line">  position: absolute;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="导航栏随鼠标滑动调整宽度"><a href="#导航栏随鼠标滑动调整宽度" class="headerlink" title="导航栏随鼠标滑动调整宽度"></a>导航栏随鼠标滑动调整宽度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; Button &#125; from &quot;antd&quot;;</div><div class="line">import &quot;./LayoutResize.css&quot;;</div><div class="line"></div><div class="line">export default class LayoutResize extends React.PureComponent &#123;</div><div class="line">  state = &#123;</div><div class="line">    dragging: false,</div><div class="line">    startPageX: 0,</div><div class="line">    siderWidth: 150,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  handleMouseDown = evt =&gt; &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      dragging: true,</div><div class="line">      startPageX: evt.pageX,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  handleMouseUp = () =&gt; &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      dragging: false,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  handleMouseMove = evt =&gt; &#123;</div><div class="line">    let siderWidth = this.state.siderWidth + evt.pageX - this.state.startPageX;</div><div class="line">    if (siderWidth &lt; 20 || siderWidth &gt; 300) return;</div><div class="line">    this.setState(&#123;</div><div class="line">      siderWidth,</div><div class="line">      startPageX: evt.pageX,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; dragging, siderWidth &#125; = this.state;</div><div class="line">    const pxWidth = `$&#123;siderWidth&#125;px`;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;app-layout-resize&quot; style=&#123;&#123; paddingLeft: pxWidth &#125;&#125;&gt;</div><div class="line">        &lt;div className=&quot;header&quot;&gt;Header&lt;/div&gt;</div><div class="line">        &lt;div className=&quot;sider&quot; style=&#123;&#123; width: pxWidth &#125;&#125;&gt;</div><div class="line">          Sider</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div className=&quot;content&quot; style=&#123;&#123; left: pxWidth &#125;&#125;&gt;</div><div class="line">          Content</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div className=&quot;footer&quot; style=&#123;&#123; left: pxWidth &#125;&#125;&gt;</div><div class="line">          Footer</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div</div><div class="line">          className=&quot;sider-resizer&quot;</div><div class="line">          style=&#123;&#123; left: pxWidth &#125;&#125;</div><div class="line">          onMouseDown=&#123;this.handleMouseDown&#125;</div><div class="line">        /&gt;</div><div class="line">        &#123;dragging &amp;&amp; (</div><div class="line">          &lt;div</div><div class="line">            className=&quot;resize-mask&quot;</div><div class="line">            onMouseMove=&#123;this.handleMouseMove&#125;</div><div class="line">            onMouseUp=&#123;this.handleMouseUp&#125;</div><div class="line">          /&gt;</div><div class="line">        )&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">.app-layout-resize &#123;</div><div class="line">  width: 500px;</div><div class="line">  height: 400px;</div><div class="line">  position: relative;</div><div class="line">  background-color: #eee;</div><div class="line">  text-align: center;</div><div class="line">  padding-left: 150px;</div><div class="line">  line-height: 60px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.app-layout-resize .header &#123;</div><div class="line">  border-bottom: 2px solid #fff;</div><div class="line">&#125;</div><div class="line">.app-layout-resize .content &#123;</div><div class="line">  position: absolute;</div><div class="line">  bottom: 60px;</div><div class="line">  top: 60px;</div><div class="line">  left: 0;</div><div class="line">  right: 0;</div><div class="line">&#125;</div><div class="line">.app-layout-resize .sider &#123;</div><div class="line">  width: 150px;</div><div class="line">  position: absolute;</div><div class="line">  border-right: 2px solid #fff;</div><div class="line">  top: 0;</div><div class="line">  left: 0;</div><div class="line">  bottom: 0;</div><div class="line">&#125;</div><div class="line">.app-layout-resize .footer &#123;</div><div class="line">  border-top: 2px solid #fff;</div><div class="line">  bottom: 0;</div><div class="line">  left: 150px;</div><div class="line">  right: 0;</div><div class="line">  position: absolute;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.app-layout-resize .sider-resizer &#123;</div><div class="line">  position: absolute;</div><div class="line">  left: 148px;</div><div class="line">  width: 6px;</div><div class="line">  top: 0;</div><div class="line">  bottom: 0;</div><div class="line">  cursor: col-resize;</div><div class="line">&#125;</div><div class="line">.app-layout-resize .resize-mask &#123;</div><div class="line">  background: rgba(0, 0, 0, 0);</div><div class="line">  position: fixed;</div><div class="line">  left: 0;</div><div class="line">  top: 0;</div><div class="line">  right: 0;</div><div class="line">  bottom: 0;</div><div class="line">  cursor: col-resize;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现布局的几种方式&quot;&gt;&lt;a href=&quot;#实现布局的几种方式&quot; class=&quot;headerlink&quot; title=&quot;实现布局的几种方式&quot;&gt;&lt;/a&gt;实现布局的几种方式&lt;/h1&gt;&lt;p&gt;1.从0开始用 CSS实现&lt;br&gt;2.使用 CSS Grid 系统 （通过class
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>表单 &amp; 列表</title>
    <link href="http://yoohannah.github.io/post/react/formList.html"/>
    <id>http://yoohannah.github.io/post/react/formList.html</id>
    <published>2018-12-04T13:12:37.000Z</published>
    <updated>2018-12-04T13:18:21.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表单功能点"><a href="#表单功能点" class="headerlink" title="表单功能点"></a>表单功能点</h1><ol>
<li>初始数据，提交和跳转<br>表单各项配置的优化，可以通过对UI框架的API进行封装成高阶组件，然后在使用时，通过配置高阶组件的属性，将需要的配置项传递给UI框架API，减少代码冗余，配置清晰</li>
</ol>
<p>提交后状态通过中间件返回promise判断接下来操作</p>
<p>2.<br>错误处理（可依靠UI框架进行判断）<br>动态表单元素（在传入高阶组件属性时采用函数返回值形式动态加载表单元素，在函数中处理要不要显示表单元素）<br>内容动态加载（在componentDidMount中进行数据请求，以及初始状态处理）</p>
<h1 id="列表页功能点"><a href="#列表页功能点" class="headerlink" title="列表页功能点"></a>列表页功能点</h1><h2 id="搜索，数据缓存和分页"><a href="#搜索，数据缓存和分页" class="headerlink" title="搜索，数据缓存和分页"></a>搜索，数据缓存和分页</h2><p>开发列表也要考虑的技术要点<br>1.如何翻页 (数据来自服务器还是客户端缓存)<br>2.如何进行内容搜索 （当前页面数据搜索还是服务器端数据搜索）<br>3.如何缓存数据<br>4.何时进行页面刷新</p>
<p>列表页数据通过store拿数据渲染，翻页，查找，刷新通过触发action然后从服务器拿到数据后，更新store,从而组件重新渲染</p>
<p>store 模型<br>listItems:当前页id集合数组[id1,id2]<br>byId:{id1:{id:id1,name:xxx},id2:{id:id2,name:xxx}}<br>keyword:关键字string<br>page:number 页数<br>fetchListPending:bool是否正在加载数据<br>FetchListError:OBJECT数据加载出错<br>listNeedReload:bool是否需要重新加载（做判断条件，例如编辑之后，设为true,在列表页拿到判断为true则重新获取列表数据）</p>
<p>URL设计<br>将页数和关键字当做路由参数传递在componentDidupdated中获取参数判断是否重新获取数据</p>
<h2 id="缓存更新，加载状态，错误处理"><a href="#缓存更新，加载状态，错误处理" class="headerlink" title="缓存更新，加载状态，错误处理"></a>缓存更新，加载状态，错误处理</h2><p>通过store模型中的相关数据进行判断展示</p>
<h1 id="页面数据需要来源多个请求的处理"><a href="#页面数据需要来源多个请求的处理" class="headerlink" title="页面数据需要来源多个请求的处理"></a>页面数据需要来源多个请求的处理</h1><p>页面数据来自多个请求<br>1.请求之间无依赖关系，可以并发进行<br>2.请求有依赖，需要依次进行 （promise）<br>3.请求完成之前，页面显示 Loading 状态<br>loading数据状态由当前数据推导确定</p>
<h1 id="内容页的加载和缓存"><a href="#内容页的加载和缓存" class="headerlink" title="内容页的加载和缓存"></a>内容页的加载和缓存</h1><p>内容页和列表页的数据关系<br>1.简单业务：列表页数据包含内容页的数据 （注意页面刷新情况数据的获取）<br>2.复杂业务：内容页数据需要额外获取 （每次进来都重新获取）<br>3.内容页数据的缓存（将数据放在store中，在store中拿数据）</p>
<h1 id="基于React-Router-实现分步操作"><a href="#基于React-Router-实现分步操作" class="headerlink" title="基于React Router 实现分步操作"></a>基于React Router 实现分步操作</h1><p>向导页面需要考虑的技术要点<br>1.使用 URL进行导航的好处 （可以直接刷新其中一个步骤）</p>
<ol>
<li>表单内容存放的位置 </li>
<li>页面状态如何切换</li>
</ol>
<p>将表单元素放在一个统一的form中，通过路由判断第几步，进而显示不同的表单元素，需要注意的是，切换下一步时，当前组件消失，配置的数据也会消失，需要将当前所填数据进行保存，以便在返回上一步时有数据</p>
<h1 id="集成第三方-JS-库的技术要点"><a href="#集成第三方-JS-库的技术要点" class="headerlink" title="集成第三方 JS 库的技术要点"></a>集成第三方 JS 库的技术要点</h1><p>1.使用 ref 获取原生 DOM 节点引用<br>2.手动将组件状态更新到 DOM 节点<br>(对于数据驱动UI展示的情况,第一次渲染和之后更新需要手动操作DOM的过程，将数据注入过程隔离出来，单独处理成一个函数，再当react 部分操作导致需要重新渲染时，再调用，将react状态映射到第三方DOM中)<br>3.组件销毁时移除原生节点 DOM 事件</p>
<h1 id="基于路由实现菜单导航"><a href="#基于路由实现菜单导航" class="headerlink" title="基于路由实现菜单导航"></a>基于路由实现菜单导航</h1><p>1.菜单导航只是改变 URL 状态<br>2.根据当前 URL 显示菜单的当前状态(使用navLink标签实现，注意react-router和redux一起使用时，url发生变化，组建要重新render时，必须要让组件绑定到router的store上，即让react-router也一起渲染)</p>
<h1 id="如何避免应用出现性能问题"><a href="#如何避免应用出现性能问题" class="headerlink" title="如何避免应用出现性能问题"></a>如何避免应用出现性能问题</h1><p>1.了解常见的性能问题场景 （键盘输入，鼠标移动是否卡顿）<br>2.时刻注意代码的潜在性能问题 （何时拆分组件，有优化空间；能否高效更新，组件拆分是否够细，足够细的话，组件越接近纯函数，就越可能减少参与到diff操作的可能性，从而提高渲染速度）<br>3.注重可重构的代码 （代码耦合性低，几乎不依赖外界，也不被外界依赖，对于有重构可能性的代码保留重构空间，当其他优先级较高的性能问题解决后，再进行代码重构）<br>4.了解如何使用工具定位性能问题</p>
<h1 id="网络性能优化：自动化按需加载"><a href="#网络性能优化：自动化按需加载" class="headerlink" title="网络性能优化：自动化按需加载"></a>网络性能优化：自动化按需加载</h1><p>1.什么是按需加载 (切换页面时才加载相应页面，而不是一开始就将所有页面加载进来)<br>2.使用 Webpack 的 import API<br>3.使用 react-loadable 库实现 React 异步加载<br>利用分包加载,在配置路由时实现,在总路由中删除，防止打包到总包中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import loadable from &apos;react-loadable&apos;</div><div class="line">const listPage = loadable(&#123;</div><div class="line">    loader:()=&gt;import (&apos;./listPage&apos;),</div><div class="line">    loading:()=&gt;&lt;div&gt;loading...&lt;/div&gt;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>listPage页面在加载该页时，会自动加载listPage的独立打包文件</p>
<p>使用 reselect 避免重复计算<br>reselect 可以创建自动缓存的数据处理流程，通过保存计算结果，避免重复计算</p>
<h1 id="异步渲染的两个部分"><a href="#异步渲染的两个部分" class="headerlink" title="异步渲染的两个部分"></a>异步渲染的两个部分</h1><p>时间分片<br>DOM操作的优先级低于浏览器原生行为，例如键盘和鼠标输入，从而保证操作的流畅。<br>（setstate导致的重新render等页面行为（滚动，输入）结束后再执行）<br>1.虚拟 DOM 的 diff 操作可以分片进行 （对操作进行序列化，然后进行合并或者优先级处理）<br>2.React 新 API: unstatble_deferredUpdates（低级别的setstate）<br>3.Chrome 新 API:requestIdleCallback(浏览器级别的api,告诉代码内存空闲（不再滚动或敲击键盘），可以进行一些之前优先级低的UI更新操作，时间分片基础)</p>
<p>渲染挂起<br>虚拟DOM节点可以等待某个异步操作的完成,并指定timeout后,才完成真正的渲染<br>（可以不再注意什么时候显示loading状态，取消loading状态，虚拟dom节点可以自己等待异步操作的完成，只要虚拟dom节点返回一个promise,渲染引擎就会等promise结束后再去render）</p>
<ol>
<li><p>新内置组件：Timeout </p>
</li>
<li><p>unstatble_deferUpdate</p>
</li>
</ol>
<h1 id="借助工具发现性能问题"><a href="#借助工具发现性能问题" class="headerlink" title="借助工具发现性能问题"></a>借助工具发现性能问题</h1><p>1.使用 React DevTool 找到多余渲染<br>chrome 插件，可查看react应用的状态，帮助找到不必要的render，从而进行调优—&gt; [highlight update]<br>2.使用 Chrome DevTool 定位性能瓶颈<br>什么样的组件花了多长时间做了什么样的渲染—&gt;performance</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;表单功能点&quot;&gt;&lt;a href=&quot;#表单功能点&quot; class=&quot;headerlink&quot; title=&quot;表单功能点&quot;&gt;&lt;/a&gt;表单功能点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;初始数据，提交和跳转&lt;br&gt;表单各项配置的优化，可以通过对UI框架的API进行封装成高阶组件，然后在使用
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Rekit</title>
    <link href="http://yoohannah.github.io/post/react/rekit.html"/>
    <id>http://yoohannah.github.io/post/react/rekit.html</id>
    <published>2018-12-04T13:12:37.000Z</published>
    <updated>2018-12-04T13:19:31.031Z</updated>
    
    <content type="html"><![CDATA[<p>背景<br> 一个独立功能通常需要多个文件组成 （组件，reducer,action,路由等文件）<br> 代码模板很复杂 （reducer,action需要代码模板，实际上填写的逻辑只是一小部分）<br> 重构极为困难<br> （需要改动的地方很多）<br> 项目复杂后很难理解和维护（无法直观的看到他们之间的关系）</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>Rekit：更好的代码导航</p>
<ol>
<li>语义化的组织源代码文件 </li>
<li>使用子 Tab来展示项目元素的各个部分 </li>
<li>直观的显示和导航某个功能的所有依赖</li>
</ol>
<p>Rekit： 一键生成项目元素（它是一个IDE）</p>
<ol>
<li>直观的 UI 用于生成组件，action,reducer 等 </li>
<li>模板代码遵循最佳实践（只需填入具体逻辑）</li>
<li>支持命令行方式创建项目元素</li>
</ol>
<p>Rekit： 重构非常容易</p>
<ol>
<li>右键菜单重命名或者删除某个项目元素 </li>
<li>所有相关代码都会一次性重构从而保证一致性 </li>
<li>详细的 log信息显示重构的完整修改</li>
</ol>
<p>Rekit： 可视化的项目架构</p>
<ol>
<li>项目总体架构的可视化图表 </li>
<li>项目依赖关系的图表</li>
</ol>
<p>Rekit 是如何工作的？</p>
<ol>
<li>定义了基于feature 的可扩展文件夹结构（文件夹结构有一定规则，可以进行解析）</li>
<li>基于最佳实践生成代码和管理项目元素 </li>
<li>提供工具和 IDE 确保代码和文件夹结构遵循最佳实践<br>（减少工作量）</li>
</ol>
<h1 id="遵循最佳实践"><a href="#遵循最佳实践" class="headerlink" title="遵循最佳实践"></a>遵循最佳实践</h1><p>1.以 feature 方式组织代码 （功能如果是必须的就放在已有模块底层实现，如果是原有功能增强的实现，则新拆分成功能模块）<br>2.拆分组件,action 和 reducer<br>3.拆分路由配置</p>
<p>通过代码自动生成保持一致性<br>1.文件夹结构一致性<br>2.文件名一致性<br>3.变量名一致性<br>4.代码逻辑的一致性</p>
<h1 id="使用-React-Router-管理路由授权"><a href="#使用-React-Router-管理路由授权" class="headerlink" title="使用 React Router 管理路由授权"></a>使用 React Router 管理路由授权</h1><p>1.实现基础:React Router 的动态路由机制 （<br> 不采用各个页面判断是否登录再redirect的方式跳转，路由配置（添加属性，那些可以在未登录下访问，或者哪些在未登录下不能访问）时就去动态监测当前用户是否登录，如果登录则全部路由生效；反之某些路由配置就不生效===&gt;不生效处理，在解析router JSON数据时根据store中登录状态和路由配置的属性判断,未登录则跳转403，其子路由清空<br>）<br>2.区分受保护路由和公开路由<br>3.访问未授权路由时重定向到登录页面 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景&lt;br&gt; 一个独立功能通常需要多个文件组成 （组件，reducer,action,路由等文件）&lt;br&gt; 代码模板很复杂 （reducer,action需要代码模板，实际上填写的逻辑只是一小部分）&lt;br&gt; 重构极为困难&lt;br&gt; （需要改动的地方很多）&lt;br&gt; 项目复杂后很
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Redux</title>
    <link href="http://yoohannah.github.io/post/react/redux.html"/>
    <id>http://yoohannah.github.io/post/react/redux.html</id>
    <published>2018-12-04T13:10:37.000Z</published>
    <updated>2018-12-04T13:20:23.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要redux"><a href="#为什么需要redux" class="headerlink" title="为什么需要redux"></a>为什么需要redux</h1><p>原有组件间通信方式错综复杂，逐层传递，不明了，方便组件间通信<br>用store管理所有组件的状态</p>
<h1 id="redux-特性"><a href="#redux-特性" class="headerlink" title="redux 特性"></a>redux 特性</h1><p>single source of truth：状态来源唯一；</p>
<p>可预测性：state +action = new state</p>
<p>纯函数更新Store：输出取决于输入，内部不会依赖任何除参数以外外部元素产生副作用</p>
<p>store 三个函数</p>
<p>getState()</p>
<p>dispatch(action)</p>
<p>subscribe(listener)</p>
<p>action 描述行为的对象集合</p>
<p>reducer 更新state的具体行为</p>
<h1 id="几个工具函数"><a href="#几个工具函数" class="headerlink" title="几个工具函数"></a>几个工具函数</h1><p>combineReducers   把多个reducer 合成一个新的reducer，并定义每个reducer在store中的对应节点</p>
<p>bindActionCreators  封装actionCreator和store.dispatch调用过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function actionCreator()&#123;</div><div class="line">return &#123;</div><div class="line">type:&apos;addItem&apos;,</div><div class="line">text:&apos;......&apos;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">store.dispatch(actionCreator())</div><div class="line">===&gt;</div><div class="line">actionCreator = bindActionCreators(actionCreator,store.dispatch)</div><div class="line">actionCreator()</div></pre></td></tr></table></figure></p>
<p>connect  创建高阶组件，对store 特定属性进行监听和绑定，从而在这些属性变化时自动刷新组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; bindActionCreators, createStore &#125; from &quot;redux&quot;;</div><div class="line">import &#123; Provider, connect &#125; from &quot;react-redux&quot;;</div><div class="line"></div><div class="line">// Store initial state</div><div class="line">const initialState = &#123; count: 0 &#125;;</div><div class="line"></div><div class="line">// reducer</div><div class="line">const counter = (state = initialState, action) =&gt; &#123;</div><div class="line">    switch (action.type) &#123;</div><div class="line">        case &quot;PLUS_ONE&quot;:</div><div class="line">            return &#123; count: state.count + 1 &#125;;</div><div class="line">        case &quot;MINUS_ONE&quot;:</div><div class="line">            return &#123; count: state.count - 1 &#125;;</div><div class="line">        case &quot;CUSTOM_COUNT&quot;:</div><div class="line">            return &#123; count: state.count + action.payload.count &#125;;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    return state;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// Create store</div><div class="line">const store = createStore(counter);</div><div class="line"></div><div class="line">// Action creator</div><div class="line">function plusOne() &#123;</div><div class="line">// action</div><div class="line">return &#123; type: &quot;PLUS_ONE&quot; &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function minusOne() &#123;</div><div class="line">return &#123; type: &quot;MINUS_ONE&quot; &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export class Counter extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        const &#123; count, plusOne, minusOne &#125; = this.props;//这三者通过connect关联store后获得</div><div class="line">        return (</div><div class="line">            &lt;div className=&quot;counter&quot;&gt;</div><div class="line">            &lt;button onClick=&#123;minusOne&#125;&gt;-&lt;/button&gt;</div><div class="line">            &lt;span style=&#123;&#123; display: &quot;inline-block&quot;, margin: &quot;0 10px&quot; &#125;&#125;&gt;</div><div class="line">            &#123;count&#125;</div><div class="line">            &lt;/span&gt;</div><div class="line">            &lt;button onClick=&#123;plusOne&#125;&gt;+&lt;/button&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//组件需要数据,state是store.getState()获得的数据集合根节点</div><div class="line">//性能问题：如果将store中的整个state绑定到组件上，那state上任何一个属性发生变化都会引起组件更新，所以向组件传递数据时，将数据绑定到尽可能的最小范围，实现只有绑定的数据变化时才引起组件更新</div><div class="line">function mapStateToProps(state) &#123; </div><div class="line">    return &#123;</div><div class="line">        count: state.count</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">//组件中需要用到的触发函数</div><div class="line">function mapDispatchToProps(dispatch) &#123;</div><div class="line">    return bindActionCreators(&#123; plusOne, minusOne &#125;, dispatch);</div><div class="line">&#125;</div><div class="line">//使用connect将redux和react 组件结合起来,形成高阶组件</div><div class="line">const ConnectedCounter = connect(mapStateToProps, mapDispatchToProps)(Counter);</div><div class="line"></div><div class="line">export default class CounterSample extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;Provider store=&#123;store&#125;&gt; //根节点定义Provider，挂上store,其所有子节点均可以访问到</div><div class="line">                &lt;ConnectedCounter /&gt;</div><div class="line">            &lt;/Provider&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要流程</p>
<p>1.定义redux store中需要的东西：reducer,actionCreator<br>2.使用createStore 根据reducer创建store<br>3.定义组件，确定需要哪些数据和触发函数<br>4.根据组件需要,创建数据获取函数，封装触发函数相应actionCreator<br>5.使用connect结合redux和组件形成高阶组件在Provider 中使用</p>
<h1 id="异步Action"><a href="#异步Action" class="headerlink" title="异步Action"></a>异步Action</h1><p>异步 action不是特殊action而是多个同步 action的组合使用</p>
<p>一个AJAX的Action发出后，到达中间件，进行预处理，根据预处理的结果dispatch不同的action出去,给reducer,然后更新store</p>
<p>异步Action不是redux的一个概念而是action的一种设计模式</p>
<p>不同的action还是同步的action,只是异步action把这些同步的action放在了不同阶段去dispath</p>
<p> 中间件<br>1.截获某种特定类型的action,进行特殊处理<br>2.发出action</p>
<h1 id="如何组织action和reducer"><a href="#如何组织action和reducer" class="headerlink" title="如何组织action和reducer"></a>如何组织action和reducer</h1><p>‘标准’形式redux action的问题<br>1.所有Action放一个文件，会无限扩展<br>2.Action,Reducer分开,实现业务逻辑时需要来回切换<br>3.系统中有哪些Action不够直观<br>新的方式<br>单个action和reducer放在同一个文件，一个文件一个action<br>然后将所有action导入同一文件，所有reducer导入同一文件<br>1.易于开发：不用在action和reducer文件间来回切换<br>2.易于维护：每个action文件都很小，容易理解<br>3.易于测试：每个业务逻辑只需要对应一个测试文件<br>4.易于理解：文件名就是action名字，文件列表就是action列表<br><a href="https://github.com/supnate/rekit-todomvc" target="_blank" rel="external">a sample</a><br>问题：拆分这么细的话，文件会多很多，对包的大小也会有影响</p>
<p>答：webpack 确实会为每个文件生成一小段固定的元代码，同样的代码行数，文件越多 bundle 确实会越大。但这个并不会成为性能瓶颈，两个原因：1. 拆分后代码数量不会显著增多，增加的元代码部分相比整个包的大小基本可以忽略；2. 生产环境普遍会启用 gzip，对于重复的元代码信息会被有效压缩，对比拆分前，gzip 后的包大小基本没有差异</p>
<h1 id="不可变数据"><a href="#不可变数据" class="headerlink" title="不可变数据"></a>不可变数据</h1><p>redux在修改state时采用新对象替换老对象的思路，不在原来对象上做修改，在新对象中复制老对象,包含要修改的部分,通过对比新老对象的引用不同，引起节点更新—-redux运行基础</p>
<p>为何需要不可变数据<br>1.性能优化（通过对比新旧state不是同一个引用即可判断store发生了变化，从而不用进行深层遍历，比较具体的值，redux中的store都是不可变数据，每个节点都是不可变数据，当一个组件绑定在一个节点上，只需判断前后状态的引用是否相等，从而判断store是否发生变化，进而决定是否要更新组件）<br>2.易于调试和跟踪（store变化时可以看到前后状态，便于调试）<br>3.易于推测(任何时刻可以知道是什么引起store发生变化，根据action前后的状态判断，action是否被进行了正确处理)</p>
<p>如何操作不可变数据<br>1.原生写法{…},Object.assign() 性能最好<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const state = &#123;</div><div class="line">    filter:&apos;completed&apos;,</div><div class="line">    todos:[&apos;learn react&apos;]</div><div class="line">&#125;</div><div class="line">const newState1 = &#123;...state,todos:[...state.todos,&apos;learn redux&apos;]&#125;</div><div class="line">const newState = Object.assign(&#123;&#125;,state,&#123;todos:[...state.todos,&apos;learn redux&apos;]&#125;)</div></pre></td></tr></table></figure></p>
<p>2.immutability-helper 适合需要深层次节点处理，需要引入类库，熟悉相应语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import update from &apos;immutability-helper&apos;</div><div class="line">const state = &#123;</div><div class="line">    filter:&apos;completed&apos;,</div><div class="line">    todos:[&apos;learn react&apos;]</div><div class="line">&#125;</div><div class="line">const newState = update(state,&#123;todos:&#123;$push:[&apos;learn redux&apos;]&#125;)</div></pre></td></tr></table></figure></p>
<p>3.immer 可以像操作原对象一样生成新对象，性能最差(当节点层数多，结构复杂时，需要为每个属性建立代理)，适合应用程序小，场景简单的情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import produce from &apos;immer&apos;</div><div class="line">const state = &#123;</div><div class="line">    filter:&apos;completed&apos;,</div><div class="line">    todos:[&apos;learn react&apos;]</div><div class="line">&#125;</div><div class="line">const newState = produce(state,draftState =&gt;&#123;</div><div class="line">    draftState.todos.push(&apos;learn redux&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么需要redux&quot;&gt;&lt;a href=&quot;#为什么需要redux&quot; class=&quot;headerlink&quot; title=&quot;为什么需要redux&quot;&gt;&lt;/a&gt;为什么需要redux&lt;/h1&gt;&lt;p&gt;原有组件间通信方式错综复杂，逐层传递，不明了，方便组件间通信&lt;br&gt;用sto
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>路由</title>
    <link href="http://yoohannah.github.io/post/react/router.html"/>
    <id>http://yoohannah.github.io/post/react/router.html</id>
    <published>2018-12-04T13:08:37.000Z</published>
    <updated>2018-12-04T13:20:37.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要路由"><a href="#为什么需要路由" class="headerlink" title="为什么需要路由"></a>为什么需要路由</h1><p>1.单页应用需要进行页面切换<br>2.通过URL可以定位到页面<br>3.更有语义的组织资源</p>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>在组件容器里根据URL决定显示什么样的组件</p>
<h1 id="REACT-router特性（和后端路由对比）"><a href="#REACT-router特性（和后端路由对比）" class="headerlink" title="REACT router特性（和后端路由对比）"></a>REACT router特性（和后端路由对比）</h1><p>1.声明式路由定义</p>
<p>通过react组件标签进行声明，可以放在任何地方，不需要具体的路由表进行声明</p>
<p>2.动态路由</p>
<p>传统路由一旦配置了它就是一个配置文件，成为一个静态文件<br>而react router的路由是页面在render的时候才会被解析的，有相应路由的标记标签就是有相应的配置，没有标签就没有相应的配置</p>
<h1 id="三种路由实现方式"><a href="#三种路由实现方式" class="headerlink" title="三种路由实现方式"></a>三种路由实现方式</h1><ol>
<li><p>url路径：通过改变URl更改视图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; BroswerRouter as Router, Route, Link &#125; from &quot;react-router-dom&quot;;</div><div class="line"></div><div class="line">const Home = () =&gt; &lt;h1&gt;Home&lt;/h1&gt;;</div><div class="line">const Hello = () =&gt; &lt;h1&gt;Hello&lt;/h1&gt;;</div><div class="line">const About = () =&gt; &lt;h1&gt;About Us&lt;/h1&gt;;</div><div class="line"></div><div class="line">export default class RouterSample extends React.PureComponent &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Router&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/home&quot;&gt;Home&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/hello&quot;&gt;Hello&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          &lt;/ul&gt;</div><div class="line"></div><div class="line">          &lt;div id=&quot;page-container&quot;&gt;</div><div class="line">            &lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/hello&quot; component=&#123;Hello&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>hash路由：使用Router 的HashRouter组件 进行路由容器包裹,切换路由时，<br>具体的路径会被放在URl的#后面，通过改变hash更变视图《兼容低版本浏览器》</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; HashRouter as Router, Route, Link &#125; from &quot;react-router-dom&quot;;</div><div class="line"></div><div class="line">const Home = () =&gt; &lt;h1&gt;Home&lt;/h1&gt;;</div><div class="line">const Hello = () =&gt; &lt;h1&gt;Hello&lt;/h1&gt;;</div><div class="line">const About = () =&gt; &lt;h1&gt;About Us&lt;/h1&gt;;</div><div class="line"></div><div class="line">export default class RouterSample extends React.PureComponent &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Router&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/home&quot;&gt;Home&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/hello&quot;&gt;Hello&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          &lt;/ul&gt;</div><div class="line"></div><div class="line">          &lt;div id=&quot;page-container&quot;&gt;</div><div class="line">            &lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/hello&quot; component=&#123;Hello&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>存路由：使用react-router 的MemoryRouter组件进行路由容器包裹，路由信息放在内存中管理，URL不变的情况下，即可进行视图切换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; HashRouter as Router, Route, Link &#125; from &quot;react-router-dom&quot;;</div><div class="line">import &#123; MemoryRouter &#125; from &quot;react-router&quot;;</div><div class="line"></div><div class="line">const Home = () =&gt; &lt;h1&gt;Home&lt;/h1&gt;;</div><div class="line">const Hello = () =&gt; &lt;h1&gt;Hello&lt;/h1&gt;;</div><div class="line">const About = () =&gt; &lt;h1&gt;About Us&lt;/h1&gt;;</div><div class="line"></div><div class="line">export default class RouterSample extends React.PureComponent &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;MemoryRouter&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/home&quot;&gt;Home&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/hello&quot;&gt;Hello&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          &lt;/ul&gt;</div><div class="line"></div><div class="line">          &lt;div id=&quot;page-container&quot;&gt;</div><div class="line">            &lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/hello&quot; component=&#123;Hello&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/MemoryRouter&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>基于路由配置进行资源组织 好处</p>
<p>1.实现业务逻辑的松耦合<br>2.易于扩展，重构和维护<br>3.路由层面实现Lazy Load</p>
<h1 id="REACT-Router-API"><a href="#REACT-Router-API" class="headerlink" title="REACT Router API"></a>REACT Router API</h1><p>1.<link>:普通链接,会触发浏览器刷新<br>类似a标签，但是不会触发浏览器的刷新，点击时router会接管导航，对切换进行处理不会传递到浏览器，让其进行真正的页面切换<br>to属性代表链接到的URl的地址<br>2.<navlink>:类似 Link但是会添加当前选中状态<br>可以添加activeClassName属性，当当前链接符合to属性值时,显示相应的样式 还有其他属性，详情请看react-router文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;NavLink to=&quot;/faq&quot; activeClassName=&apos;selected&apos;&gt;FAQs&lt;/NavLink&gt;</div></pre></td></tr></table></figure></navlink></p>
<p>3.<prompt>:满足条件时提示用户是否离开当前页面<br>切换页面时，跟用户提供一个确认的操作</prompt></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import &#123; Prompt &#125; from &quot;react-router&quot;;</div><div class="line">&lt;Prompt</div><div class="line">    when=&#123;formIsHalfFilledOut&#125;</div><div class="line">    message=&apos;Are you sure you want to leave&apos;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>4.<redirect>重定向当前页面,例如登录判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import &#123; Redirect,Route &#125; from &quot;react-router&quot;;</div><div class="line">&lt;Route exact path=&apos;/&apos; render=&#123;()=&gt;(</div><div class="line">    loggedIn?(</div><div class="line">    &lt;Redirect to=&apos;/dashboard&apos; /&gt;</div><div class="line">    ) : (</div><div class="line">        &lt;PublicHomePage/&gt;</div><div class="line">    )</div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure></redirect></p>
<p>5.<route>:路由配置的核心标记,路径匹配时显示对应组件<br>path：路由<br>component:相应要显示的组件<br>exact：是否精准配置path<br>多个route path都符合当前路由时，那相应组件都会进行显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Route exact path=&quot;/&quot; component=&#123;Home&#125; /&gt;</div></pre></td></tr></table></figure></route></p>
<p>6.<switch>:只显示第一个匹配的路由<br>找到一个匹配的路径就只显示这个路径相应的组件，其他组件不显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123; Switch,Route &#125; from &quot;react-router&quot;;</div><div class="line">&lt;Switch&gt;</div><div class="line">&lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</div><div class="line">&lt;Route path=&quot;/hello&quot; component=&#123;Hello&#125; /&gt;</div><div class="line">&lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt;</div><div class="line">&lt;Route component=&#123;Nomatch&#125; /&gt;</div><div class="line">&lt;/Switch&gt;</div></pre></td></tr></table></figure></switch></p>
<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><p>通过URL传递参数 :<route path="/topic/:id" ...=""><br>获取参数：this.props.match.params<br>页面状态尽量通过URl参数定义,方便页面间跳转时数据传递，否则需要将数据转化成组件内部state进行渲染，过程复杂</route></p>
<h1 id="套嵌路由"><a href="#套嵌路由" class="headerlink" title="套嵌路由"></a>套嵌路由</h1><p>1.每个React组件都可以时路由容器<br>2.React Router的声明式语法可以方便的定义嵌套路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123;</div><div class="line">  BrowserRouter as Router,</div><div class="line">  Route,</div><div class="line">  Link</div><div class="line">&#125; from &quot;react-router-dom&quot;;</div><div class="line"></div><div class="line">const Category = (&#123; match &#125;) =&gt; (</div><div class="line">  &lt;h1&gt;Sub Category &#123;match.params.subId&#125;&lt;/h1&gt;</div><div class="line">);</div><div class="line"></div><div class="line">const SubCategory = (&#123; match &#125;) =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h1&gt;Category &#123;match.params.id&#125;&lt;/h1&gt;</div><div class="line"></div><div class="line">    &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;Link to=&#123;`/category/$&#123;match.params.id&#125;/sub/1`&#125;&gt;</div><div class="line">          Sub Category 1</div><div class="line">        &lt;/Link&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;Link to=&#123;`/category/$&#123;match.params.id&#125;/sub/2`&#125;&gt;</div><div class="line">          Sub Category 2</div><div class="line">        &lt;/Link&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;Link to=&#123;`/category/$&#123;match.params.id&#125;/sub/3`&#125;&gt;</div><div class="line">          Sub Category 3</div><div class="line">        &lt;/Link&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;div id=&quot;page-container-2&quot;&gt;</div><div class="line">      &lt;Route</div><div class="line">        path=&quot;/category/:id/sub/:subId&quot;</div><div class="line">        component=&#123;Category&#125;</div><div class="line">      /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">);</div><div class="line"></div><div class="line">export default class NestedRoute extends React.PureComponent &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Router&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/category/1&quot;&gt;Category 1&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/category/2&quot;&gt;Category 2&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/category/3&quot;&gt;Category 3&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          &lt;/ul&gt;</div><div class="line"></div><div class="line">          &lt;div id=&quot;page-container&quot;&gt;</div><div class="line">            &lt;Route</div><div class="line">              path=&quot;/category/:id&quot;</div><div class="line">              component=&#123;SubCategory&#125;</div><div class="line">            /&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么需要路由&quot;&gt;&lt;a href=&quot;#为什么需要路由&quot; class=&quot;headerlink&quot; title=&quot;为什么需要路由&quot;&gt;&lt;/a&gt;为什么需要路由&lt;/h1&gt;&lt;p&gt;1.单页应用需要进行页面切换&lt;br&gt;2.通过URL可以定位到页面&lt;br&gt;3.更有语义的组织资源&lt;/p
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>构建</title>
    <link href="http://yoohannah.github.io/post/react/construct.html"/>
    <id>http://yoohannah.github.io/post/react/construct.html</id>
    <published>2018-12-04T13:05:37.000Z</published>
    <updated>2018-12-04T13:20:47.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UI库"><a href="#UI库" class="headerlink" title="UI库"></a>UI库</h1><p>ant design 适合企业级应用，复杂交付，密集数据展示<br>material UI：时尚，花哨，具有的美观性，更适合开发面向消费者的应用（google版原始react实现）<br>sematic UI:把UI当做一种language来描述（jquery版原始react实现）</p>
<p>选择UI库的考虑因素</p>
<ol>
<li>组件库是否齐全（齐全的话可以减少很多工作量，不用自己实现）</li>
<li>样式风格是否符合业务需求（企业级应用一般要求简洁明了，对于密集性数据展示比较合理；对于移动端面向消费者一般要求好看，button，字体比较大）</li>
<li>API 设计是否便捷和灵活（使用起来是否方便，从而会影响开发效率）</li>
<li>技术支持是否完善（技术文档是否齐全；github上提issue时，能不能得到快速解答）</li>
<li>开发是否活跃（是否有稳定团队在进行快速迭代和维护，在遇到BUG或者需要新功能时可以得到满足）</li>
</ol>
<h1 id="使用next-js-构建react-同构应用"><a href="#使用next-js-构建react-同构应用" class="headerlink" title="使用next.js 构建react 同构应用"></a>使用next.js 构建react 同构应用</h1><p>同构应用：浏览器第一次向服务器请求页面时，服务器返回解析好的页面，不需要浏览器执行js来进行渲染（这样可以加快页面首次打开的速度），之后页面的操作/切换，像单页面一样，不需要浏览器刷新，均由前端完成，包括UI渲染，页面路由切换等，不需要再向服务端请求页面</p>
<p>next.js的几个规则<br>1.页面就是pages目录下的一个组件<br>所有页面放在pages文件夹下，一个页面即一个组件，文件名和文件路径对应路由路径<br>2.static目录映射静态文件（图片）<br>3.page具有特殊静态方法 getInitialProps<br>next.js提供给react组件初始化props的方法</p>
<p>命令行装包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save react react-dom next</div></pre></td></tr></table></figure></p>
<p>在页面中使用其它 react 组件<br>1.页面也是标准的node模块,可使用其它 react组件<br>2.页面会针对性打包,仅包含其引入的组件<br>,不会加载其他额外的资源</p>
<p>所有组件放在components文件夹下，在pages文件夹下的页面js中使用时，直接用路径import进去</p>
<p>使用Link实现同构路由</p>
<p>1.使用 next/link 定义链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import Link from &apos;next/link&apos;</div><div class="line">export default ()=&gt;</div><div class="line">&lt;div&gt;</div><div class="line">&lt;Link href=&apos;/about&apos;&gt;&lt;a&gt;here&lt;/a&gt;&lt;/Link&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>2.点击链接时页面不会刷新<br>如果使用a标签会产生刷新</p>
<p>3.使用 prefatch预加载目标资源<br>如果不添加该属性，则链接对应的组件，在切换的时候再加载相应页面打包的内容，有该属性，则next.js 打包时就会获取所有链接对应的组件，会预加载所有的js内容，从而提高页面切换速度，但是并不会预加载需要从服务器端API请求的数据</p>
<p>4.使用 replace 属性替换 url<br>替换当前页在路由中的history,无法后退回当前页</p>
<p>动态加载页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import dynamic from &apos;next/dynamic&apos;</div><div class="line">const DynamicComponet=dynamic(import(&apos;../components/hello&apos;))</div><div class="line">export default ()=&gt;</div><div class="line">&lt;div&gt;</div><div class="line">&lt;DynamicComponet/&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>页面在加载时，除了加载整个页面的main.js,还会加载动态加载的组件的js包，当这个动态组件被render的时候才会被加载</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>react 让前端单元测试变得容易<br>1.react 应用很少需要访问浏览器 API<br>2.虚拟 Dom 可以在 NodeJs 环境运行和测试 （不需要浏览器环境，在内存中render虚拟DOM即可完成测试）<br>3.Redux隔离了状态管理,纯数据层单元测试</p>
<p>单元测试涉及的工具<br>1.Jest: Facebook 开源的 JS 单元测试框架 （零配置，可以直接开始测试）<br>2.JS dom浏览器环境的 NodeJS 模拟 （一个在nodejs中可以模拟浏览器的library）<br>3.Enzyme:React组件渲染和测试 (在nodejs中渲染虚拟DOM进行测试，通过进行不同程度的render(shallow Rendering,Full Rendering,Static Rendering,进行不同程度的测试，比如利用shallow Rendering浅渲染测试渲染结果是否符合预期的DOM结构)<br>4.Nock: 模拟 HTTP请求 （模拟得到请求返回数据）<br>5.Sinon: 函数模拟和调用跟踪 （例如测试组件UI时，跟踪响应函数有没有被调用，调用几次，而不是去测试响应函数是否符合预期，测试响应函数是否符合预期属于响应函数测试范畴。集成在JEST中）<br>6.istanbul:单元测试覆盖率（通过对已有代码的修改和埋点去判断相关代码有没有被执行到）</p>
<h1 id="开发调试工具"><a href="#开发调试工具" class="headerlink" title="开发调试工具"></a>开发调试工具</h1><p>eslint<br>1.使用 .eslintrc 进行规则的配置<br>2.使用 airbnb 的 JavaScript 代码风格</p>
<p>检查语法风格，拼写错误，会报错，保证代码的一致性</p>
<p>Prettier<br>vscode 的一款插件，根据一定规则做代码格式化 .eslintrc<br>1.代码格式化的神器<br>2.保证更容易写出风格一致的代码<br>不会报错,会直接根据规则将代码格式化</p>
<p>React DevTool chrome插件<br>定位组件，可以以组件树的形式查看DOM结构，<br>勾选highlight updates可看到需要更新的组件</p>
<p>Redux DevTool chrome插件<br>可查看action和action引起的变化<br>time machine 功能，可以回溯action,方便观察loading过程，进而对loading进行优化<br>可自动生成测试代码</p>
<h1 id="理想架构"><a href="#理想架构" class="headerlink" title="理想架构"></a>理想架构</h1><p>易于开发（但可能会不容易扩展和维护）<br>1.开发工具是否完善 （采用的技术栈是否有相应的开发工具来支持）<br>2.生态圈是否繁荣 （是否有类似项目遇到过相同问题可以借鉴）<br>3.社区是否活跃（提问有人回答）</p>
<p>易于扩展<br>1.增加新功能是否容易<br>2.新功能是否会显著增加系统复杂度（系统放大之后会难以扩展和维护，考虑引进新功能时，如何架构能保证减少系统复杂度的提高）</p>
<p>易于维护<br>1.代码是否容易理解 （基于一定的最佳实践规范去编写，保证多人开发有一定的规则）<br>2.文档是否健全（通过注释，架构图，具体文档描述项目中的一些关键点，方便后续工作人员查看，也方便日后回头开发能快速理解关键点，来维护已有项目）</p>
<p>易于测试<br>1.功能的分层是否清晰 （UI，数据层之间依赖少）<br>2.副作用少 （模块高内聚，对外部依赖少）<br>3.尽量使用纯函数（输入决定输出，确定）</p>
<p>易于构建<br>1.使用通用技术和架构 （保证现有项目不需要定制化，就可以打包部署）<br>2.构建工具的选择（webpack ,roolup,使用常用技术栈，减少额外配置）</p>
<p>大型前端应用需要拆分复杂度原因<br>当项目增加更多功能的时候，项目复杂度并不会指数级的上升，始终保持在一个可控的范围之内</p>
<p>拆分复杂度技术架构</p>
<p>从功能上进行区分，将业务逻辑拆成高内聚松耦合的模块，每个模块负责一个功能，拥有自己的componet,action和reducer,这样即使当一个功能需要删除时，只要删除相应的模块即可，也保证其他模块不受影响；路由不再由一个文件统一定义，每个feature自己定义一个路由，然后由route的loader把每个模块的路由文件加载进根结点的routing文件</p>
<p>技术上的component,路由，reducer是按照功能的方式组织在模块上</p>
<p>如何组织 component,action 和reducer<br>文件夹结构<br>• 按 feature 组织源文件<br>• 组件和样式文件同一级<br>• React 单独文件夹<br>• 单元测试保持同样目录结构放在 tests 文件夹</p>
<p>组件和样式组织<br>一个功能的组件js和样式文件放在一个模块中，再由一个index.js引入各个模块的组件js文件，一个style文件引入各个模块的样式文件，进行统一管理输出,打包时就只是打包index.js和style文件<br>注意：<br>如果组件中引入样式文件，那么当这个组件被重复使用时，样式文件会被多次引入，打包时就会多次进行打包，造成不必要的代码冗余<br>使用上述加载方式，样式文件独立加载，js文件只需要加载它所需要的资源，就不会发生多次加载</p>
<p>action 和 reducer组织<br>一个模块的，action 和 reducer 一一对应放在同一文件，再由一个actions.js引入所有action,一个reducers.js引入所有reducer，这两个文件只是充当loader的角色<br>好处：action 和 reducer 非常小，不会被无限的去扩展，更容易理解</p>
<p>CONSTANTS.js中命名的常量一功能名开头，避免与其他模块常量命名冲突</p>
<p>再由rootreducer加载所有模块下的reducer,进行combineReducers挂载，实现全局使用</p>
<p>优点：一个模块内部是高内聚的，各个模块之间是松耦合的</p>
<p>主要思想：使用 root loader 加载 feature的各个资源</p>
<p>路由配置<br>每个模块（页面级）路由通过export JSON格式数据 ，自己配，再loader到根路由，由根路由统一处理解析json格式为react Router的声明式形式</p>
<p>每个模块都有都有自己的专属路由配置<br>顶层路由使用JSON配置更易维护和理解</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UI库&quot;&gt;&lt;a href=&quot;#UI库&quot; class=&quot;headerlink&quot; title=&quot;UI库&quot;&gt;&lt;/a&gt;UI库&lt;/h1&gt;&lt;p&gt;ant design 适合企业级应用，复杂交付，密集数据展示&lt;br&gt;material UI：时尚，花哨，具有的美观性，更适合开发面向
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>开发思想</title>
    <link href="http://yoohannah.github.io/post/react/thinking.html"/>
    <id>http://yoohannah.github.io/post/react/thinking.html</id>
    <published>2018-12-04T13:01:37.000Z</published>
    <updated>2018-12-04T13:20:55.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传统框架存在问题"><a href="#传统框架存在问题" class="headerlink" title="传统框架存在问题"></a>传统框架存在问题</h1><p>1.传统 UI操作关注太多细节<br>DOM API 繁多，需要手动调用，且要经过多步骤进行更新<br>react 解决办法：始终整体‘刷新’页面 ，无需关心细节，（不管谁是哪部分新增或更改的，根据现在状态整体刷新页面）</p>
<p>2.应用程序状态分散在各处f难以追踪和维护<br>传统数据模型存在问题：传统 MVC结构复杂，难以扩展和维护<br>react 解决办法：Flux 单向数据流</p>
<p>创建组件<br>1.创建静态 UI<br>2.考虑组件的状态组成 ：是由state内部维护还是用外部传进来的props维护<br>3.考虑组件的交互方式：内部进行了操作，如何告知/把暴露到父组件</p>
<h1 id="受控组件VS非受控组件"><a href="#受控组件VS非受控组件" class="headerlink" title="受控组件VS非受控组件"></a>受控组件VS非受控组件</h1><p>受控组件: 表单元素状态由使用者维护<br>组件发生变化，利用onchange将状态给到到父组件（使用者），父组件更新状态，再通过props传递状态给组件，组件重新渲染</p>
<p>非受控组件:表单元素状态 DOM自身维护</p>
<h1 id="创建原则：单一职责原则"><a href="#创建原则：单一职责原则" class="headerlink" title="创建原则：单一职责原则"></a>创建原则：单一职责原则</h1><p>1.每个组件只做一件事<br>2.如果组件变得复杂，那么应该拆分成小组件<br>   拆分成小组件好处：<br>   a.降低复杂度；<br>   b.提高性能，如果一个组件足够大之后，任何一种状态变化，都会引起整个组件刷新，<br>拆分成小组件后，未涉及到的小组件，没有状态变化，就不会刷新</p>
<h1 id="数据状态管理：DRY（Don’t-Repeat-Yourself）原则"><a href="#数据状态管理：DRY（Don’t-Repeat-Yourself）原则" class="headerlink" title="数据状态管理：DRY（Don’t Repeat Yourself）原则"></a>数据状态管理：DRY（Don’t Repeat Yourself）原则</h1><p>1.能计算得到的状态就不要单独存储 :<br>2.组件尽量无状态，所需数据通过 props 获取</p>
<h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><p>本质：不是模板语言，而是一种语法糖(相当于使用React.createElement创建组件)<br>优点：<br>1.声明式创建界面的直观（可以使用自定义和原生标签直接进行创建，方便构建UI）<br>2.代码动态创建界面的灵活 （节点的创建，属性更改，消失完全可以向写JS一样进行操作）<br>3.无需学习新的模板语言（JS+JSX特性）<br>约定：自定义组件以大写字母开头<br>1.react 认为小写的 tag是原生 dom 节点,如 div<br>2.大写字母开头为自定义组件<br>3.JSX 标记可以直接使用属性语法，例如<meau.item>，使用属性语法，可以不以大写字母开头<br>JSX防注入攻击<br>React DOM 在渲染之前默认会 过滤 所有传入的值。它可以确保你的应用不会被注入攻击。<br>所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 XSS(跨站脚本) 攻击</meau.item></p>
<h1 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h1><p>constructor<br>js标准类的构造函数<br>1.用于初始化内部状态，很少使用（初始化工作一般会在其他声明周期内使用）<br>2.唯一可以直接修改state的地方(可以这么写this.state.xxx = ‘abc’)</p>
<p>getDerivedStateFromProps<br>react 16.3新引入的API<br>从属性props初始化内部状态state<br>1.当 state 需要从 props 初始化时使用<br>2.尽量不要使用：维护两者状态一致性会增加复杂度<br>    如果state需要从props获得，一般使用props可以通过动态计算得到，如果用state进行单独存储，就有必要时刻维护二者的一致性<br>    维护一致性则增加了复杂度，容易出BUG<br>3.每次 render都会调用<br>    该方代替原来的componentwillreceiveProps方法<br>4.典型场景:表单控件获取默认值<br>    初始值来自props,用户输入后为用户输入的值</p>
<p>componentDidMount<br>1.UI渲染完成后调用<br>2.只执行一次<br>3.典型场景:获取外部资源（只需要获取一次资源）</p>
<p>componentWillUnmount<br>1.组件移除时被调用<br>2.典型场景：资源释放</p>
<p>getSnapshotBeforeUpdate<br>1.在页面 render之前调用，state 已更新<br>2.典型场景：获取 render之前的 DOM 状态</p>
<p>componentDidUpdate<br>捕获每一次更新<br>1.每次 UI 更新时被调用<br>2.典型场景:页面需要根据 props 变化重新获取数据</p>
<p>shouldComponentUpdate<br>1.组件决定 Virtual DOM是否要重绘<br>2.一般可以由 PureComponent 自动实现<br>3.典型场景:细节性能优化</p>
<p>在react 16.3中去掉的方法有<br>componentWillMount<br>componentWillReceive<br>componentWillUpdate</p>
<p>状态更新可能是异步的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//此代码可能无法更新计数器</div><div class="line">this.setState(&#123;</div><div class="line">  counter: this.state.counter + this.props.increment,</div><div class="line">&#125;);</div><div class="line">//更改为以下写法即可</div><div class="line">this.setState((prevState, props) =&gt; (&#123;</div><div class="line">  counter: prevState.counter + props.increment</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<p>1.算法复杂度O(n):通过广度优先分层比较/遍历实现线性算法</p>
<p>2.虚拟 DOM如何计算 diff<br>虚拟 DOM的两个假设<br>a.组件的 DOM结构是相对稳定的<br>b.类型相同的兄弟节点可以被唯一标识<br>根结点比较<br>属性变化及顺序：利用标识调整位置<br>节点类型发生变化：删除原有结点，构建新类型结点<br>节点跨层移动：删除原有结点，在应有（新）位置构建相同类型新结点</p>
<p>3.key属性的作用：提高性能</p>
<h1 id="组件复用设计模式"><a href="#组件复用设计模式" class="headerlink" title="组件复用设计模式"></a>组件复用设计模式</h1><p>1.高阶组件</p>
<p>传入原始组件，结合生命周期创建一些额外的功能，然后附加到原始组件上，返回增加功能后的原始组件<br>额外的功能一般都是一些通用的功能，避免在原始组建上增加额外功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line"></div><div class="line">export default function withTimer(WrappedComponent) &#123;</div><div class="line">  return class extends React.Component &#123;</div><div class="line">    state = &#123; time: new Date() &#125;;</div><div class="line">    componentDidMount() &#123;</div><div class="line">      this.timerID = setInterval(() =&gt; this.tick(), 1000);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">      clearInterval(this.timerID);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tick() &#123;</div><div class="line">      this.setState(&#123;</div><div class="line">        time: new Date()</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">      return &lt;WrappedComponent time=&#123;this.state.time&#125; &#123;...this.props&#125; /&gt;;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.函数子组件</p>
<p>将子组件以函数返回值形式作为children属性传入原始组件，在原始组件中，在需要显示原始组件的地方执行函数，<br>或者在合适的生命周期中执行函数拿到多个子组件，再决定在什么位置显示不同的子组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//写法一</div><div class="line">&lt;Mouse children=&#123;mouse =&gt; (</div><div class="line">  &lt;p&gt;The mouse position is &#123;mouse.x&#125;, &#123;mouse.y&#125;&lt;/p&gt;</div><div class="line">)&#125;/&gt;</div><div class="line">//写法二</div><div class="line">&lt;Mouse&gt;</div><div class="line">  &#123;mouse =&gt; (</div><div class="line">    &lt;p&gt;The mouse position is &#123;mouse.x&#125;, &#123;mouse.y&#125;&lt;/p&gt;</div><div class="line">  )&#125;</div><div class="line">&lt;/Mouse&gt;</div><div class="line"></div><div class="line">//在原始组件应用子组件</div><div class="line">class Mouse extends React.Component&#123;</div><div class="line">    render()&#123;</div><div class="line">        &lt;div&gt;</div><div class="line">            &#123;this.props.children(&#123;x:50,y:100&#125;)&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="context-API"><a href="#context-API" class="headerlink" title="context API"></a>context API</h1><p>应用场景：全局性的一些字段，如theme的切换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line"></div><div class="line">const enStrings = &#123;</div><div class="line">  submit: &quot;Submit&quot;,</div><div class="line">  cancel: &quot;Cancel&quot;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const cnStrings = &#123;</div><div class="line">  submit: &quot;提交&quot;,</div><div class="line">  cancel: &quot;取消&quot;</div><div class="line">&#125;;</div><div class="line">//传入原始数据/默认值，创建context</div><div class="line">const LocaleContext = React.createContext(enStrings);</div><div class="line"></div><div class="line">class LocaleProvider extends React.Component &#123;</div><div class="line">  state = &#123; locale: cnStrings &#125;;</div><div class="line">  toggleLocale = () =&gt; &#123;</div><div class="line">    const locale =</div><div class="line">      this.state.locale === enStrings</div><div class="line">        ? cnStrings</div><div class="line">        : enStrings;</div><div class="line">    this.setState(&#123; locale &#125;);</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      // context的 Provider属性是一个组件，包裹需要用到context数据子组件的组件，其value值为相应在子组件中需要用到的数据</div><div class="line">      &lt;LocaleContext.Provider value=&#123;this.state.locale&#125;&gt;</div><div class="line">        &lt;button onClick=&#123;this.toggleLocale&#125;&gt;</div><div class="line">          切换语言</div><div class="line">        &lt;/button&gt;</div><div class="line">        &#123;this.props.children&#125;</div><div class="line">      &lt;/LocaleContext.Provider&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class LocaledButtons extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">    //context的 Consumer属性也是一个组件，包裹需要使用context数据的子组件,</div><div class="line">      &lt;LocaleContext.Consumer&gt;</div><div class="line">        &#123;locale =&gt; (//local 即Context.Provider 的value值</div><div class="line">          &lt;div&gt;</div><div class="line">            &lt;button&gt;&#123;locale.cancel&#125;&lt;/button&gt;</div><div class="line">            &amp;nbsp;&lt;button&gt;&#123;locale.submit&#125;&lt;/button&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        )&#125;</div><div class="line">      &lt;/LocaleContext.Consumer&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default () =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;LocaleProvider&gt;</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;br /&gt;</div><div class="line">        &lt;LocaledButtons /&gt;//使用context数据的组件必须为Provider组件的子组件，</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/LocaleProvider&gt;</div><div class="line">    &lt;LocaledButtons /&gt;//如果子组件在Context.Provider形成组件的外面使用，则只会应用默认数据，不会随Value属性发生变化</div><div class="line">  &lt;/div&gt;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h1 id="为什么需要脚手架"><a href="#为什么需要脚手架" class="headerlink" title="为什么需要脚手架"></a>为什么需要脚手架</h1><p>react:进行UI开发<br>redux:进行状态的管理<br>react/router:进行路由的馆<br>babel:把最新的js特性翻译成兼容浏览器的旧的JS语法<br>webpack:进行打包<br>eslint:语法检查<br>因而需要引入以上几个技术栈的几十个个package,不但要了解，还要知道如何让进行相应的配置<br>在开启一个项目时，配置过程做完一次基本/只要实现一次，就基本可以复用，用来再开启新项目<br>所以为方便开发，用脚手架实现配置过程</p>
<p>脚手架有：<br>Create React App 基础（webpack,）<br>Rekit 开源项目<br>Codesandbox 在线开发工具<br>dva 蚂蚁金服的一套脚手架工具</p>
<h1 id="为什么需要打包"><a href="#为什么需要打包" class="headerlink" title="为什么需要打包"></a>为什么需要打包</h1><p>1.编译ES6语法特性，编译JSX（保证浏览器可以兼容执行）<br>2.整合资源，例如图片，Less/Sass，svg<br>3.优化代码体积(对变量名进行缩短，去除注释，去除空格，去除不必要的变量等等)</p>
<p>webpack<br>将项目中所有资源进行整合，将每种资源（js，png，sass…）使用插件的方式载入对应的Loader,<br>loader能够决定自己支持什么样的语法，loader的输出是可以执行的js语言，可以兼容多平台多版本浏览器<br>可以部署的语言</p>
<p>打包注意事项<br>1.设置nodejs环境为production<br>开发环境可能需要检查输入的参数的类型，语法，拼写等问题，但生产环境不需要</p>
<p>2.禁用开发时专用代码，比如logger<br>打包时可以根据环境判断决定是否执行一定的代码，所以开发用到的代码在打包时不应被打到生产环境，要做区分<br>3.设置应用根路径<br>告诉应用到哪里获取地址</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;传统框架存在问题&quot;&gt;&lt;a href=&quot;#传统框架存在问题&quot; class=&quot;headerlink&quot; title=&quot;传统框架存在问题&quot;&gt;&lt;/a&gt;传统框架存在问题&lt;/h1&gt;&lt;p&gt;1.传统 UI操作关注太多细节&lt;br&gt;DOM API 繁多，需要手动调用，且要经过多步骤进行
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="http://yoohannah.github.io/post/designMode/command.html"/>
    <id>http://yoohannah.github.io/post/designMode/command.html</id>
    <published>2018-11-08T13:09:09.000Z</published>
    <updated>2018-11-08T14:01:30.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用情景"><a href="#应用情景" class="headerlink" title="应用情景"></a>应用情景</h1><p>有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。<br>此时希望用一种松耦合的方式设计软件，使得请求发送者和请求接收者能够消除彼此之间的耦合关系</p>
<h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><p>将命令接收者的具体执行函数存入 命令堆栈，命令发起者需要执行/撤销动作时，对堆栈进行处理<br>命令接收者可以以闭包形式被执行，也可以作为对象属性被执行到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">//闭包形式</div><div class="line">var setCommand = function(btn,fn)&#123;</div><div class="line">	btn.onclick = function()&#123;</div><div class="line">		fn()</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var MenuBar = &#123;</div><div class="line">	refresh:function()&#123;</div><div class="line">		console.log(&apos;refresh menu&apos;)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var RefreshMenuBarCommand = function(reciver)&#123;</div><div class="line">	return function()&#123;reciver.refresh()&#125;</div><div class="line">&#125;</div><div class="line">var refreshMenuBarCommand = RefreshMenuBarCommand(Menubar)</div><div class="line">setCommand(btn1,refreshMenuBarCommand)</div><div class="line"></div><div class="line">//宏命令，组装一个可以一次性触发多个命令的命令；属性形式，统一使用execute触发</div><div class="line">var MacroCommand = function()&#123;</div><div class="line">	return &#123;</div><div class="line">		commandsList:[],</div><div class="line">		add:function(command)&#123;</div><div class="line">			this.commandsList.push(command);</div><div class="line">		&#125;,</div><div class="line">		execute:function()&#123;</div><div class="line">			for(var i=0,cammand;command = this.commandsList[i++];)&#123;</div><div class="line">				command.execute();</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		undo:function()&#123;</div><div class="line">			for(var i=0,cammand;command = this.commandsList[i++];)&#123;</div><div class="line">				command.undo();</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var closeDoorCom =&#123;</div><div class="line">	execute:function()&#123;</div><div class="line">		console.log(&apos;close door&apos;)</div><div class="line">	&#125;,</div><div class="line">	undo:function()&#123;console.log(&apos;open door&apos;)&#125;</div><div class="line">&#125;</div><div class="line">var openTvCom =&#123;</div><div class="line">	execute:function()&#123;</div><div class="line">		console.log(&apos;open TV&apos;)</div><div class="line">	&#125;,</div><div class="line">	undo:function()&#123;console.log(&apos;close Tv&apos;)&#125;</div><div class="line">&#125;</div><div class="line">var macroCommand = MacroCommand()</div><div class="line">macroCommand.add(closeDoorCom)</div><div class="line">macroCommand.add(openTvCom)</div><div class="line">macroCommand.execute()</div><div class="line">macroCommand.undo()</div></pre></td></tr></table></figure>
<h1 id="与策略区别"><a href="#与策略区别" class="headerlink" title="与策略区别"></a>与策略区别</h1><p>策略模式指向问题域更小，所有策略对象目标一致，他们只是达到这个目的的不同手段，内部实现针对‘算法’<br>命令对象解决的目标更具发散性，还可以完成撤销，排队等功能</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;应用情景&quot;&gt;&lt;a href=&quot;#应用情景&quot; class=&quot;headerlink&quot; title=&quot;应用情景&quot;&gt;&lt;/a&gt;应用情景&lt;/h1&gt;&lt;p&gt;有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。&lt;br&gt;此时希望用一种松耦合的方式设
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>订阅发布模式</title>
    <link href="http://yoohannah.github.io/post/designMode/event.html"/>
    <id>http://yoohannah.github.io/post/designMode/event.html</id>
    <published>2018-11-08T12:57:09.000Z</published>
    <updated>2018-11-08T13:29:45.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><p>通过逻辑处理函数/对象event，使事件订阅和发布过程忽略事件的具体处理过程<br>订阅时只需要给到event要订阅的事件A，和响应函数，<br>发布时给到event事件A被触发和相关参数，即可执行订阅时的响应函数<br>event 充当中介者的角色，管理事件响应的存储和执行</p>
<p>1.简单实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">let event = &#123;</div><div class="line">	caches:&#123;&#125;,</div><div class="line">	on:function(name,fn)&#123;</div><div class="line">		if(!this.caches[name])&#123;</div><div class="line">			this.caches[name] = []</div><div class="line">		&#125;</div><div class="line">		this.caches[name].push(fn)</div><div class="line">	&#125;,</div><div class="line">	emit:function(name,...args)&#123;</div><div class="line">		if(!this.caches[name])&#123;return&#125;</div><div class="line">		for(let i=0;i&lt;this.caches[name].length;i++)&#123;</div><div class="line">			let fn=this.caches[name][i]</div><div class="line">			fn(args)</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	remove:function(name,fn)&#123;</div><div class="line">		if(this.caches[name].length&lt;1)&#123;return&#125;</div><div class="line">		for(let i=0;i&lt;this.caches[name].length;i++)&#123;</div><div class="line">			let fn1=this.caches[name][i]</div><div class="line">			if(fn === fn1)&#123;</div><div class="line">				this.caches[name].splice(i,1)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let fn1 = (val)=&gt;&#123;console.log(val,1)&#125;</div><div class="line">let fn2 = (val)=&gt;&#123;console.log(val,2)&#125;</div><div class="line">event.on(&apos;aaa&apos;,fn1)</div><div class="line">event.on(&apos;aaa&apos;,fn2)</div><div class="line">event.emit(&apos;aaa&apos;,&apos;fire!&apos;)</div></pre></td></tr></table></figure></p>
<p>2.全局事件冲突<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">var Event = (function()&#123; </div><div class="line">    var global = this,</div><div class="line">        Event,_default = &apos;default&apos;; </div><div class="line">    Event = function()&#123;         </div><div class="line">        var _listen, </div><div class="line">        _trigger,</div><div class="line">        _remove,</div><div class="line">        _slice = Array.prototype.slice,</div><div class="line">        _shift = Array.prototype.shift,</div><div class="line">        _unshift = Array.prototype.unshift,              </div><div class="line">        namespaceCache = &#123;&#125;,              </div><div class="line">        _create,              </div><div class="line">        find,             </div><div class="line">        each = function( ary, fn )&#123;                 </div><div class="line">            var ret;                 </div><div class="line">            for ( var i = 0, l = ary.length; i &lt; l; i++ )&#123;</div><div class="line">                var n = ary[i];                     </div><div class="line">                ret = fn.call( n, i, n);                 </div><div class="line">            &#125;                 </div><div class="line">            return ret;             </div><div class="line">            &#125;; </div><div class="line"></div><div class="line">           _listen = function( key, fn, cache )&#123;                </div><div class="line">               if ( !cache[ key ] )&#123;                    </div><div class="line">                   cache[ key ] = [];                </div><div class="line">                &#125;               </div><div class="line">                cache[key].push( fn );            </div><div class="line">            &#125;; </div><div class="line"></div><div class="line">           _remove = function( key, cache ,fn)&#123;                </div><div class="line">               if ( cache[ key ] )&#123;                    </div><div class="line">                   if( fn )&#123;                        </div><div class="line">                       for( var i = cache[ key ].length; i &gt;= 0; i-- )&#123;                            </div><div class="line">                           if( cache[ key ][i] === fn )&#123;                                </div><div class="line">                               cache[ key ].splice( i, 1 );                            </div><div class="line">                            &#125;                        </div><div class="line">                        &#125;                    </div><div class="line">                    &#125;else&#123;                        </div><div class="line">                        cache[ key ] = [];                    </div><div class="line">                    &#125;                </div><div class="line">                &#125;            </div><div class="line">            &#125;; </div><div class="line"> </div><div class="line">           _trigger = function()&#123;                </div><div class="line">               var cache = _shift.call(arguments),                      </div><div class="line">               key = _shift.call(arguments),                      </div><div class="line">               args = arguments,                      </div><div class="line">               _self = this,                     </div><div class="line">              ret,                      </div><div class="line">              stack = cache[ key ]; </div><div class="line"> </div><div class="line">              if ( !stack || !stack.length )&#123;                    </div><div class="line">                   return;                </div><div class="line">              &#125; </div><div class="line"> </div><div class="line">               return each( stack, function()&#123;                    </div><div class="line">                   return this.apply( _self, args );                </div><div class="line">                &#125;);             </div><div class="line">            &#125;; </div><div class="line"> </div><div class="line">            _create = function( namespace )&#123;                 </div><div class="line">                var namespace = namespace || _default;                 </div><div class="line">                var cache = &#123;&#125;,                     </div><div class="line">                offlineStack = [],    // 离线事件                      </div><div class="line">                ret = &#123;                         </div><div class="line">                    listen: function( key, fn, last )&#123;                             </div><div class="line">                        _listen( key, fn, cache );                             </div><div class="line">                        if ( offlineStack === null )&#123;                                 </div><div class="line">                            return;                             </div><div class="line">                        &#125;                             </div><div class="line">                        if ( last === &apos;last&apos; )&#123;                        </div><div class="line">                            offlineStack.length &amp;&amp; offlineStack.pop()();                             </div><div class="line">                        &#125;else&#123;                                 </div><div class="line">                            each( offlineStack, function()&#123;                                 </div><div class="line">                                this();                             </div><div class="line">                                &#125;);                          </div><div class="line">                        &#125; </div><div class="line"> </div><div class="line">                         offlineStack = null;                      </div><div class="line">                    &#125;,</div><div class="line"></div><div class="line">                    one: function( key, fn, last )&#123;                          </div><div class="line">                        _remove( key, cache );                          </div><div class="line">                        this.listen( key, fn ,last );                      </div><div class="line">                    &#125;,                      </div><div class="line">                        </div><div class="line">                    remove: function( key, fn )&#123;                          </div><div class="line">                        _remove( key, cache ,fn);                      </div><div class="line">                    &#125;,                      </div><div class="line">                    trigger: function()&#123;                          </div><div class="line">                        var fn,                              </div><div class="line">                        args,                              </div><div class="line">                        _self = this; </div><div class="line"> </div><div class="line">                        _unshift.call( arguments, cache );                          </div><div class="line">                        args = arguments;                          </div><div class="line">                        fn = function()&#123;                              </div><div class="line">                            return _trigger.apply( _self, args );                          </div><div class="line">                        &#125;; </div><div class="line"> </div><div class="line">                        if ( offlineStack )&#123;                              </div><div class="line">                            return offlineStack.push( fn );                          </div><div class="line">                        &#125;                        </div><div class="line">                        return fn();                       </div><div class="line">                    &#125;                    </div><div class="line">                &#125;; </div><div class="line">                return namespace ?( namespaceCache[ namespace ] ? namespaceCache[ namespace ] :            namespaceCache[ namespace ] = ret ): ret;                </div><div class="line">            &#125;; </div><div class="line"> </div><div class="line">        return &#123;                 </div><div class="line">            create: _create,                 </div><div class="line">            one: function( key,fn, last )&#123;                     </div><div class="line">                var event = this.create( );                         </div><div class="line">                event.one( key,fn,last );                 </div><div class="line">                &#125;,                 </div><div class="line">            remove: function( key,fn )&#123;                  </div><div class="line">                var event = this.create( );                     </div><div class="line">                event.remove( key,fn );                 </div><div class="line">                &#125;,                 </div><div class="line">            listen: function( key, fn, last )&#123;                     </div><div class="line">                var event = this.create( );                         </div><div class="line">                event.listen( key, fn, last );                     </div><div class="line">                &#125;,                 </div><div class="line">            trigger: function()&#123; </div><div class="line">                var event = this.create( );                     </div><div class="line">                event.trigger.apply( this, arguments );                  </div><div class="line">                &#125;           </div><div class="line">            &#125;;     </div><div class="line">    &#125;(); </div><div class="line"></div><div class="line">    return Event; </div><div class="line"> </div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;主要思想&quot;&gt;&lt;a href=&quot;#主要思想&quot; class=&quot;headerlink&quot; title=&quot;主要思想&quot;&gt;&lt;/a&gt;主要思想&lt;/h1&gt;&lt;p&gt;通过逻辑处理函数/对象event，使事件订阅和发布过程忽略事件的具体处理过程&lt;br&gt;订阅时只需要给到event要订阅的事件A
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>AOP(切面)编程/装饰者模式</title>
    <link href="http://yoohannah.github.io/post/designMode/AOP.html"/>
    <id>http://yoohannah.github.io/post/designMode/AOP.html</id>
    <published>2018-11-07T13:57:09.000Z</published>
    <updated>2018-11-07T13:57:32.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>在不改变对象自身的基础上，在程序运行期间给对象动态的添加职责</p>
<h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><p>在每次要执行具体函数B时，先执行A，在每次执行完B之后都执行C，<br>以此类推，有必要的话，在C执行完再执行D，从而形成执行链</p>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>先用一个temp函数包住AB,再用一个final函数包住temp和C，这样，在执行final函数时，会按顺序A-B-C执行</p>
<p>1.使用普通函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">let before=(fn,beforeFn)=&gt;&#123;</div><div class="line">	return (...args)=&gt;&#123;</div><div class="line">		beforeFn(args)</div><div class="line">		return fn(args)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let after = (fn,afterFn)=&gt;&#123;</div><div class="line">	return (...args)=&gt;&#123;</div><div class="line">		let ret = fn(args)</div><div class="line">		afterFn(args)</div><div class="line">		return ret</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let a = ()=&gt;&#123;console.log(2)&#125;</div><div class="line">a = before(a,()=&gt;&#123;console.log(1)&#125;)</div><div class="line">a = after(a,()=&gt;&#123;console.log(3)&#125;)</div><div class="line">a() //1,2,3</div></pre></td></tr></table></figure></p>
<p>2.改造Function对象,可以实现链式添加职责</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Function.prototype.before = function(beforeFn)&#123;</div><div class="line">	return ()=&gt;&#123;</div><div class="line">		beforeFn(arguments);</div><div class="line">		return this(arguments);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">Function.prototype.after = function(afterFn)&#123;</div><div class="line">	return ()=&gt;&#123;</div><div class="line">		let ret = this(arguments);</div><div class="line">		afterFn(arguments);</div><div class="line">		return ret;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var func = function ()&#123;</div><div class="line">console.log(2); </div><div class="line">return 15&#125;</div><div class="line">func = func.before(()=&gt;&#123;console.log(1)&#125;).after(()=&gt;&#123;console.log(3)&#125;)</div><div class="line">func() //1,2,3 返回15</div></pre></td></tr></table></figure>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>1.数据统计上报<br>  将点击响应事件包含的上报动作隔离出来，以after的顺序，装饰到点击事件响应函数上</p>
<p>2.动态改变函数参数<br>  组装ajax请求参数时，在请求函数前装饰before函数，进行不同参数参加处理</p>
<p>3.插件式表单验证<br>  在submit函数前装饰before函数进行不同条件验证</p>
<h1 id="区分代理模式"><a href="#区分代理模式" class="headerlink" title="区分代理模式"></a>区分代理模式</h1><p>代理模式的意图是当直接访问本体不方便或者不符合需要时，为这个本体提供一个替代者，<br>本体定义了关键功能，而代理提供或拒绝对它的访问，或者在访问本体之前做一些额外的事情<br>通常只有一层代理-本体的引用</p>
<p>AOP的作用用于对对象加入行为，一开始不能确定对象的全部功能时，<br>经常会形成一条装饰链</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;在不改变对象自身的基础上，在程序运行期间给对象动态的添加职责&lt;/p&gt;
&lt;h1 id=&quot;主要思想&quot;&gt;&lt;a href=&quot;#主要思想&quot; class
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>迭代器模式</title>
    <link href="http://yoohannah.github.io/post/designMode/iterator.html"/>
    <id>http://yoohannah.github.io/post/designMode/iterator.html</id>
    <published>2018-11-06T14:23:09.000Z</published>
    <updated>2018-11-06T14:34:07.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>提供一种方法顺序访问一个聚合对象种的各个元素，而又不需要暴露该对象的内部表示<br>把迭代过程从业务逻辑中分离出来，不用关心对象的内部构造，可以按顺序访问其中的每个元素</p>
<h1 id="用途-场景"><a href="#用途-场景" class="headerlink" title="用途/场景"></a>用途/场景</h1><p>查找可用组件，进行数据处理</p>
<h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><p>内部迭代器<br>函数内部定义好迭代规则，完全接手整个迭代过程，外部只需要一次初始调用</p>
<p>外部迭代器<br>需要调用进行下一轮迭代的函数，可以手工控制迭代的过程或者顺序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">//使用内部迭代器实现</div><div class="line">var iteratorInner=(arr,fn)=&gt;&#123;</div><div class="line">	for(let i=0;i&lt;arr.length;i++)&#123;</div><div class="line">		fn(arr,i)</div><div class="line">	&#125;</div><div class="line">	return arr</div><div class="line">&#125;</div><div class="line">console.log(iteratorInner([1,2,3],(arr,i)=&gt;&#123;arr[i]++&#125;)) //[2,3,4] </div><div class="line"></div><div class="line">//使用外部迭代器</div><div class="line">let iteratorOuter = (arr,fn)=&gt;&#123;</div><div class="line">	let count = 0;</div><div class="line">    let nextFn =()=&gt;&#123;</div><div class="line">		if(count &lt;arr.length)&#123;</div><div class="line">			fn(arr,count)</div><div class="line">		&#125;</div><div class="line">		return &#123;</div><div class="line">			result:arr,</div><div class="line">			count:count === arr.length ? count:++count,,</div><div class="line">			done:count === arr.length</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return &#123;</div><div class="line">		next:nextFn,</div><div class="line">		isdone:count === arr.length</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var it = iteratorOuter([1,2,3],(arr,i)=&gt;&#123;</div><div class="line">	arr[i]++</div><div class="line">&#125;)</div><div class="line">console.log(it.next())</div><div class="line">//count: 1</div><div class="line">//done: false</div><div class="line">//result: (3) [2, 3, 4]</div><div class="line">console.log(it.next())</div><div class="line">//count: 2</div><div class="line">//done: false</div><div class="line">//result: (3) [2, 3, 4]</div><div class="line">console.log(it.next())</div><div class="line">//count: 3</div><div class="line">//done: true</div><div class="line">//result: (3) [2, 3, 4]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;提供一种方法顺序访问一个聚合对象种的各个元素，而又不需要暴露该对象的内部表示&lt;br&gt;把迭代过程从业务逻辑中分离出来，不用关心对象的内部构造，
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://yoohannah.github.io/post/designMode/adapter.html"/>
    <id>http://yoohannah.github.io/post/designMode/adapter.html</id>
    <published>2018-11-06T14:11:09.000Z</published>
    <updated>2018-11-06T14:05:40.479Z</updated>
    
    <content type="html"><![CDATA[<p>定义<br>解决俩个软件实体间接口不兼容的问题，使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体，可以一起工作</p>
<p>用途/场景<br>1.调用第三方（地图/支付）接口时，不同平台提供的相同功能的接口函数名不同，或者调用时需要进行的操作过程不同，<br>  将这些过程封装/分类，通过适配器决定如何使用</p>
<p>2.处理数据,将不符合使用要求的数据结构转换成预期的样子</p>
<p>主要思想<br>将处理过程封装在适配器函数中,直接在适配器函数中进行处理，或者让适配器返回处理后的可适用结果<br>调用适配器传入需要处理的数据/条件，适配器进行处理或返回处理结果</p>
<p>注意事项<br>那些繁琐的处理代码始终是存在的，只不过在写业务的时候看不到它罢了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">1.转换数据结构</div><div class="line">//将如下数据结构</div><div class="line">var guangdongCity = [&#123;             </div><div class="line">        name: &apos;shenzhen&apos;,             </div><div class="line">        id: 11,         </div><div class="line">    &#125;, &#123;             </div><div class="line">        name: &apos;guangzhou&apos;,             </div><div class="line">        id: 12,         </div><div class="line">    &#125;];</div><div class="line">//转换成如下数据结构</div><div class="line">var guangdongCity = &#123;     shenzhen: 11,      guangzhou: 12&#125;;</div><div class="line"></div><div class="line">var adapter = (data)=&gt;&#123;</div><div class="line">	let temp = &#123;&#125;;</div><div class="line">	for(let i=0;i&lt;data.length;i++)&#123;</div><div class="line">		temp[data[i].name] = data[i].id</div><div class="line">	&#125;</div><div class="line">	return temp</div><div class="line">&#125;</div><div class="line">console.log(adapter(guangdongCity))</div><div class="line"></div><div class="line">2.SDK适配例子1</div><div class="line">var googleMap = &#123;      </div><div class="line">    show: function()&#123;          </div><div class="line">        console.log( &apos;开始渲染谷歌地图&apos; );      </div><div class="line">        &#125;  </div><div class="line">    &#125;; </div><div class="line">var baiduMap = &#123;       </div><div class="line">        display: function()&#123;          </div><div class="line">            console.log( &apos;开始渲染百度地图&apos; );      </div><div class="line">        &#125;  </div><div class="line">    &#125;; </div><div class="line">var baiduMapAdapter = &#123;      </div><div class="line">        show: function()&#123;          </div><div class="line">            return baiduMap.display();    </div><div class="line">        &#125;  </div><div class="line">    &#125;;</div><div class="line">var renderMap = function( map )&#123;     </div><div class="line">    if ( map.show instanceof Function )&#123;         </div><div class="line">        map.show();     </div><div class="line">    &#125; </div><div class="line">&#125;; </div><div class="line">renderMap( googleMap );        // 输出：开始渲染谷歌地图 </div><div class="line">renderMap( baiduMapAdapter );    // 输出：开始渲染百度地图 </div><div class="line">3.SDK适配例子2</div><div class="line">function pay (&#123;</div><div class="line">  price,</div><div class="line">  goodsId</div><div class="line">&#125;) &#123;</div><div class="line">  return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">    const config = &#123;&#125;</div><div class="line"> </div><div class="line">    switch (platform) &#123;</div><div class="line">      case &apos;wechat&apos;:</div><div class="line">        // 微信的处理逻辑</div><div class="line">        config.price = price</div><div class="line">        config.goodsId = goodsId</div><div class="line">        config.appId = &apos;XXX&apos;</div><div class="line">        config.secretKey = &apos;XXX&apos;</div><div class="line">        wx.pay(config).then((err, data) =&gt; &#123;</div><div class="line">          if (err) return reject(err)</div><div class="line"> </div><div class="line">          resolve(data)</div><div class="line">        &#125;)</div><div class="line">      break</div><div class="line">      case &apos;QQ&apos;:</div><div class="line">        // QQ的处理逻辑</div><div class="line">        config.price = price * 100</div><div class="line">        config.gid = goodsId</div><div class="line">        config.appId = &apos;XXX&apos;</div><div class="line">        config.secretKey = &apos;XXX&apos;</div><div class="line">        config.success = resolve</div><div class="line">        config.error = reject</div><div class="line">        qq.pay(config)</div><div class="line">      break</div><div class="line">      case &apos;alipay&apos;:</div><div class="line">        // 支付宝的处理逻辑</div><div class="line">        config.payment = price</div><div class="line">        config.id = goodsId</div><div class="line">        config.token = &apos;XXX&apos;</div><div class="line">        alipay.pay(config, resolve, reject)</div><div class="line">      break</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">// run anywhere</div><div class="line">await pay(&#123;</div><div class="line">  price: 10,</div><div class="line">  goodsId: 1</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>对于SDK提供方，仅仅需要知道自己所需要的一些参数，然后按照自己的方式进行数据返回。</p>
<p>对于SDK调用方，仅仅需要我们约定好的通用的参数，以及按照约定的方式进行监听回调处理。</p>
<p>整合多个第三方SDK的任务交由适配器来做，然后将适配器的代码压缩，混淆，放在一个看不见的角落里去，这样的代码逻辑就会变得很清晰了<br>参考资料:<a href="https://mp.weixin.qq.com/s/QRqeDCzD0APyj2g7BNqtpg" target="_blank" rel="external">适配器在JavaScript中的体现</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定义&lt;br&gt;解决俩个软件实体间接口不兼容的问题，使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体，可以一起工作&lt;/p&gt;
&lt;p&gt;用途/场景&lt;br&gt;1.调用第三方（地图/支付）接口时，不同平台提供的相同功能的接口函数名不同，或者调用时需要进行的操作过程不同，&lt;br
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://yoohannah.github.io/post/designMode/proxy.html"/>
    <id>http://yoohannah.github.io/post/designMode/proxy.html</id>
    <published>2018-11-06T14:10:09.000Z</published>
    <updated>2018-11-06T14:17:52.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>保护代理<br>代理B可以帮助A过滤掉一些请求，可以直接在代理B中拒绝掉<br>用于控制不同权限的对象对目标对象的访问</p>
<p>虚拟代理<br>把一些开销很大的对象，延迟到真正需要它的时候才去创建</p>
<h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p>就一个类（通常也包括对象和函数）而言，应该仅有一个引起它变化的原因。</p>
<h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><p>A想调用C，要经过B，B在中间做C的代理，用于判断什么时候可以执行C<br>比如多次调用缓存起来再一起执行C；传入相同参数只计算一次，将结果保存，以后传入相同参数直接返回结果，不再计算</p>
<h1 id="用途-实现"><a href="#用途-实现" class="headerlink" title="用途/实现"></a>用途/实现</h1><p>1.虚拟代理合并 HTTP请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">//可以通过一个代理函数 proxySynchronousFile 来收集一段时间之内的请求， 后一次性发送给服务器。</div><div class="line">var synchronousFile = function( id )&#123;     </div><div class="line">    console.log( &apos;开始同步文件，id 为: &apos; + id ); </div><div class="line">&#125;; </div><div class="line"> </div><div class="line">var proxySynchronousFile = (function()&#123;     </div><div class="line">    var cache = [],    // 保存一段时间内需要同步的 ID         </div><div class="line">    timer;    // 定时器 </div><div class="line">    return function( id )&#123;         </div><div class="line">        cache.push( id );  //每次进来收集       </div><div class="line">        if ( timer )&#123;    </div><div class="line">            // 保证不会覆盖已经启动的定时器             </div><div class="line">            return;         </div><div class="line">        &#125; </div><div class="line">        timer = setTimeout(function()&#123;             </div><div class="line">            synchronousFile( cache.join( &apos;,&apos; ) );    // 2 秒后向本体发送需要同步的 ID 集合 到时间统一处理           clearTimeout( timer );    // 清空定时器             </div><div class="line">            timer = null;             </div><div class="line">            cache.length = 0; // 清空 ID 集合         </div><div class="line">            &#125;, 2000 );     </div><div class="line">        &#125; </div><div class="line">    &#125;)(); </div><div class="line">var checkbox = document.getElementsByTagName( &apos;input&apos; ); </div><div class="line">for ( var i = 0, c; c = checkbox[ i++ ]; )&#123; </div><div class="line">     c.onclick = function()&#123;         </div><div class="line">        if ( this.checked === true )&#123;             </div><div class="line">            proxySynchronousFile( this.id );         </div><div class="line">        &#125;     </div><div class="line">    &#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>2.缓存代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var mult = function()&#123;     </div><div class="line">    console.log( &apos;开始计算乘积&apos; );     </div><div class="line">    var a = 1;     </div><div class="line">    for ( var i = 0, l = arguments.length; i &lt; l; i++ )&#123;         </div><div class="line">        a = a * arguments[i];      </div><div class="line">    &#125;      </div><div class="line">    return a; </div><div class="line">&#125;; </div><div class="line">// 创建缓存代理的工厂 </div><div class="line">var createProxyFactory = function( fn )&#123;     </div><div class="line">    var cache = &#123;&#125;;     </div><div class="line">    return function()&#123;         </div><div class="line">        var args = Array.prototype.join.call( arguments, &apos;,&apos; );         </div><div class="line">        if ( args in cache )&#123;             </div><div class="line">            return cache[ args ];         </div><div class="line">            &#125;         </div><div class="line">        return  cache[ args ] = fn.apply( this, arguments );     </div><div class="line">    &#125; </div><div class="line">&#125;; </div><div class="line">var proxyMult = createProxyFactory( mult ), </div><div class="line"> proxyMult( 1, 2, 3, 4 );    // 输出：24  </div><div class="line"> proxyMult( 1, 2, 3, 4 );    // 输出：24</div></pre></td></tr></table></figure></p>
<p>扩展：用于ajax异步请求数据，下次请求相同数据时，是否可以取消请求，直接用之前缓存的数据，适用固定数据</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h1&gt;&lt;p&gt;保护代理&lt;br&gt;代理B可以帮助A过滤掉一些请求，可以直接在代理B中拒绝掉&lt;br&gt;用于控制不同权限的对象对目标对象的访问&lt;/p&gt;
&lt;p&gt;虚拟代
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://yoohannah.github.io/post/designMode/strategies.html"/>
    <id>http://yoohannah.github.io/post/designMode/strategies.html</id>
    <published>2018-11-06T14:09:09.000Z</published>
    <updated>2018-11-06T14:19:26.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><p>定义一系列的算法，把它们一个个封装起来，通过逻辑函数使他们可以相互替换<br>避免if-else多分支判断</p>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>定义一些系列算法（具体处理过程），把他们各自封装成策略类，算法被封装在策略类内部方法里。在客户对Context(如何调用算法的处理函数)发起请求时，Context总是把请求委托给这些策略对象中间的某一个进行计算</p>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>编写代理函数时，注意如何调用，让算法得到<b>执行</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">let strategies = &#123; //算法集合</div><div class="line">	 &quot;S&quot;: function( salary )&#123; </div><div class="line">        return salary * 4;     </div><div class="line">		&#125;,</div><div class="line">     &quot;A&quot;: function( salary )&#123;</div><div class="line">         return salary * 3;</div><div class="line">     &#125;,</div><div class="line">     &quot;B&quot;: function( salary )&#123;</div><div class="line">         return salary * 2;</div><div class="line">     &#125;</div><div class="line"> &#125;; </div><div class="line">var calculateBonus = function( level, salary )&#123; //Context,委托函数，负责调用哪个算法</div><div class="line">     return strategies[ level ]( salary ); </div><div class="line">&#125;;</div><div class="line"> </div><div class="line">console.log( calculateBonus( &apos;S&apos;, 20000 ) );//80000</div><div class="line">console.log( calculateBonus( &apos;A&apos;, 10000 ) );//30000</div><div class="line"></div><div class="line">变形：</div><div class="line">var S = function( salary )&#123;      return salary * 4;  &#125;; </div><div class="line">var A = function( salary )&#123;     return salary * 3; &#125;; </div><div class="line">var B = function( salary )&#123;     return salary * 2; &#125;; </div><div class="line">var calculateBonus = function( func, salary )&#123;     return func( salary ); &#125;; </div><div class="line">calculateBonus( S, 10000  )</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">//具体策略方法</div><div class="line"> var strategies = &#123;             </div><div class="line">     isNonEmpty: function( value, errorMsg )&#123;                 </div><div class="line">         if ( value === &apos;&apos; )&#123;                     </div><div class="line">             return errorMsg;                 </div><div class="line">        &#125;             </div><div class="line">    &#125;,             </div><div class="line">    minLength: function( value, length, errorMsg )&#123;                 </div><div class="line">        if ( value.length &lt; length )&#123;                     </div><div class="line">            return errorMsg;                 </div><div class="line">        &#125;             </div><div class="line">    &#125;,             </div><div class="line">    isMobile: function( value, errorMsg )&#123;                 </div><div class="line">        if ( !/(^1[3|5|8][0-9]&#123;9&#125;$)/.test( value ) )&#123;                     </div><div class="line">            return errorMsg;                 </div><div class="line">        &#125;             </div><div class="line">    &#125;         </div><div class="line">&#125;; </div><div class="line">//执行代理 Context</div><div class="line"> var Validator = function()&#123;             </div><div class="line">        this.cache = [];         </div><div class="line">     &#125;; </div><div class="line"></div><div class="line">    Validator.prototype.add = function( dom, rules )&#123; </div><div class="line">        var self = this;</div><div class="line">        for ( var i = 0, rule; rule = rules[ i++ ]; )&#123;                 </div><div class="line">            (function( rule )&#123;                     </div><div class="line">                var strategyAry = rule.strategy.split( &apos;:&apos; );                     </div><div class="line">                var errorMsg = rule.errorMsg; </div><div class="line">                self.cache.push(function()&#123;                         </div><div class="line">                    var strategy = strategyAry.shift(); </div><div class="line">                    strategyAry.unshift( dom.value );                       </div><div class="line">                    strategyAry.push( errorMsg ); //strategyAry，传递到具体算法函数参数，这里进行处理          </div><div class="line">                    return strategies[ strategy ].apply( dom, strategyAry );                     </div><div class="line">                &#125;);                 </div><div class="line">            &#125;)( rule )             </div><div class="line">        &#125; </div><div class="line">    &#125;; </div><div class="line">    Validator.prototype.start = function()&#123;             </div><div class="line">        for ( var i = 0, validatorFunc; validatorFunc = this.cache[ i++ ]; )&#123;                 </div><div class="line">            var errorMsg = validatorFunc();                 </div><div class="line">            if ( errorMsg )&#123;                     </div><div class="line">                return errorMsg;                 </div><div class="line">            &#125;             </div><div class="line">        &#125;         </div><div class="line">    &#125;;</div><div class="line">//具体应用</div><div class="line">    var registerForm = document.getElementById( &apos;registerForm&apos; ); </div><div class="line">    var validataFunc = function()&#123;             </div><div class="line">        var validator = new Validator(); </div><div class="line">        validator.add( registerForm.userName, [&#123;                 </div><div class="line">            strategy: &apos;isNonEmpty&apos;,                 </div><div class="line">            errorMsg: &apos;用户名不能为空&apos;             </div><div class="line">        &#125;, &#123;                 </div><div class="line">            strategy: &apos;minLength:6&apos;,                </div><div class="line">            errorMsg: &apos;用户名长度不能小于 10 位&apos;             </div><div class="line">        &#125;]); </div><div class="line">        validator.add( registerForm.password, [&#123;                 </div><div class="line">            strategy: &apos;minLength:6&apos;,                 </div><div class="line">            errorMsg: &apos;密码长度不能小于 6 位&apos;             </div><div class="line">        &#125;]); </div><div class="line">        validator.add( registerForm.phoneNumber, [&#123;                 </div><div class="line">            strategy: &apos;isMobile&apos;,                 </div><div class="line">            errorMsg: &apos;手机号码格式不正确&apos;             </div><div class="line">        &#125;]); </div><div class="line">        var errorMsg = validator.start();             </div><div class="line">        return errorMsg;         </div><div class="line">    &#125; </div><div class="line">    registerForm.onsubmit = function()&#123;                  </div><div class="line">        var errorMsg = validataFunc(); </div><div class="line">        if ( errorMsg )&#123;                   </div><div class="line">            alert ( errorMsg );                   </div><div class="line">            return false;              </div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;主要思想&quot;&gt;&lt;a href=&quot;#主要思想&quot; class=&quot;headerlink&quot; title=&quot;主要思想&quot;&gt;&lt;/a&gt;主要思想&lt;/h1&gt;&lt;p&gt;定义一系列的算法，把它们一个个封装起来，通过逻辑函数使他们可以相互替换&lt;br&gt;避免if-else多分支判断&lt;/p&gt;
&lt;h1 
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoohannah.github.io/post/designMode/singleInstance.html"/>
    <id>http://yoohannah.github.io/post/designMode/singleInstance.html</id>
    <published>2018-11-04T15:11:09.000Z</published>
    <updated>2018-11-04T16:07:22.772Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p>
<p>主要思想&lt;通用惰性单例&gt;<br>管理单例逻辑（保证实现单例的过程）和创建过程（具体业务逻辑）分开，创建过程函数作为参数给到管理单例逻辑函数中，<br>通过调用单例逻辑函数，业务逻辑函数只执行一次</p>
<p>用途<br>1.创建单一对象<br>2.利用业务逻辑仅执行一次，进行事件挂载</p>
<p>注意事项<br>业务逻辑函数一定要return 一个真正</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">var getSingle = function(fn)&#123;</div><div class="line"> 	var ret;</div><div class="line"> 	return function()&#123;</div><div class="line"> 		return ret || (ret = fn.apply(this,arguments));</div><div class="line"> 		//第一次执行时，会运行函数，返回创建的实例给到ret,</div><div class="line"> 		//以后再执行时，ret 即第一次创建的实例直接返回</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> //返回单例</div><div class="line"> var creatObj = function(name)&#123;</div><div class="line"> 	this.aaaa = &#123;</div><div class="line">		name:name,</div><div class="line">		getName:function()&#123;console.log(this)&#125;</div><div class="line">	&#125;</div><div class="line">	return this </div><div class="line"> &#125;</div><div class="line">var creatObj1 = getSingle(creatObj)</div><div class="line">var obj = creatObj1(&apos;aaa&apos;)</div><div class="line">console.log(obj)  //返回window 对象(满足全局可访问)，带有aaaa属性，值为字面量对象</div><div class="line">obj.aaaa.getName()//&#123;name: &quot;kitty&quot;, getName: ƒ&#125;</div><div class="line"></div><div class="line">var obj1 = creatObj1(&apos;aaa&apos;)</div><div class="line">console.log(obj=== obj1) //true</div><div class="line"></div><div class="line">obj1.aaaa.getName() //&#123;name: &quot;kitty&quot;, getName: ƒ&#125;</div><div class="line"></div><div class="line">//事件仅挂载一次</div><div class="line"></div><div class="line">var bindEvent = getSingle(function()&#123;</div><div class="line">	document.getElementById(&apos;div1&apos;).onclick = function()&#123;</div><div class="line">		console.log(&apos;click&apos;)</div><div class="line">	&#125;</div><div class="line">	return true //保证只执行一次</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var render = function()&#123;</div><div class="line">	console.log(&apos;开始渲染&apos;)；</div><div class="line">	bindEvent()</div><div class="line">&#125;</div><div class="line"></div><div class="line">render()</div><div class="line">render()</div><div class="line">render()</div><div class="line">//渲染多次，div1只挂载一次事件</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点&lt;/p&gt;
&lt;p&gt;主要思想&amp;lt;通用惰性单例&amp;gt;&lt;br&gt;管理单例逻辑（保证实现单例的过程）和创建过程（具体业务逻辑）分开，创建过程函数作为参数给到管理单例逻辑函数中，&lt;br&gt;通过调用单例逻辑函数，业务逻辑
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>基础知识</title>
    <link href="http://yoohannah.github.io/post/designMode/basic.html"/>
    <id>http://yoohannah.github.io/post/designMode/basic.html</id>
    <published>2018-11-03T08:37:09.000Z</published>
    <updated>2018-11-07T12:56:04.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些有思想提醒作用的话"><a href="#一些有思想提醒作用的话" class="headerlink" title="一些有思想提醒作用的话"></a>一些有思想提醒作用的话</h1><p>把不变的部分隔离出来，把可变的部分封装起来</p>
<p>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句</p>
<p>（每个对象应该做什么，已成为了该对象的一个方法，被安装在对象的内部，每个对象负责它们自己的行为，所以这些对象可以根据同一个消息，有条不紊的分贝进行各自的工作  ====&gt; 将行为分布在各个对象中，并让对象各自负责自己的行为&lt;—面向对象设计优点）</p>
<p>对象以方法的形式包含了过程，而闭包则是在过程中以环境的形式包含了数据</p>
<h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><p>1.原型继承过程：<b>对象把请求委托给它的构造器的原型</b></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var A = function()&#123;&#125;;</div><div class="line">A.prototype = &#123;name:&apos;seven&apos;&#125;;</div><div class="line">var B = function()&#123;&#125;;</div><div class="line">B.color=&apos;red&apos;;</div><div class="line">B.prototype = new A();</div><div class="line">B.prototype.color = &apos;green&apos;</div><div class="line">var b = new B();</div><div class="line">console.log(b.name,b.color)</div><div class="line"></div><div class="line">//seven green</div></pre></td></tr></table></figure>
<p>2.用new 调用构造器时，如果构造器显示返回了一个object类型的对象，那么此次运算结果最终会返回这个对象，而不是this；<br>  若不显示返回任何数据，或者是返回一个非对象类型的数据，则会正常返回this</p>
<p>3.使用Dom 方法时，注意是否会造成this 丢失<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	let getId = document.getElementById; //原来 getElementById this指向document</div><div class="line">	getId(&apos;DIV1&apos;) //现在指向window</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>4.使用call/apply时，如果第一个参数传入null，那么函数体内的this会指向window</p>
<p>5.闭包作用：封装变量；延续局部变量寿命<br> 闭包和内存泄露有关系的地方是，使用闭包的同时比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，就比较可能造成内存泄露。因为IE浏览器中，由于BOM和DOM对象是使用C++以COM对象的方式实现的，而COM对象的垃圾收集机制采用引用计数策略，这时，如果两个对象之间形成了循环引用，那么这两个对象都无法被回收。</p>
<p> 解决办法是将循环引用中的变量设为null，方便回收。</p>
<h1 id="高阶函数一些例子"><a href="#高阶函数一些例子" class="headerlink" title="高阶函数一些例子"></a>高阶函数一些例子</h1><h2 id="一个单例模式"><a href="#一个单例模式" class="headerlink" title="一个单例模式"></a>一个单例模式</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var getSingle = function(fn)&#123;</div><div class="line">	var ret;</div><div class="line">	return function()&#123;</div><div class="line">		return ret || (ret = fn.apply(this,arguments));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AOP（切面编程）-实现"><a href="#AOP（切面编程）-实现" class="headerlink" title="AOP（切面编程） 实现"></a>AOP（切面编程） 实现</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> Function.prototype.before = function(beforeFn)&#123;</div><div class="line">	return ()=&gt;&#123;</div><div class="line">		beforeFn.apply(this,arguments);</div><div class="line">		return this.apply(this,arguments);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">Function.prototype.after = function(afterFn)&#123;</div><div class="line">	return ()=&gt;&#123;</div><div class="line">		this.apply(this,arguments);</div><div class="line">		afterFn.apply(this,arguments);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var func = function ()&#123;console.log(2)&#125;</div><div class="line">func = func.before(()=&gt;&#123;console.log(1)&#125;).after(()=&gt;&#123;console.log(3)&#125;)</div><div class="line">func()</div><div class="line">//1</div><div class="line">//2</div><div class="line">//3</div></pre></td></tr></table></figure>
<h2 id="部分求值-currying"><a href="#部分求值-currying" class="headerlink" title="部分求值 currying"></a>部分求值 currying</h2><p> 一个curring的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来，待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> var currying = function(fn)&#123;</div><div class="line">	let args = [];</div><div class="line">	return function()&#123;</div><div class="line">		if(arguments.length === 0)&#123;</div><div class="line">			return fn.apply(this,args);</div><div class="line">		&#125;else&#123;</div><div class="line">			[].push.apply(args,arguments);</div><div class="line">			return arguments.callee;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">var cost = (function()&#123;</div><div class="line">	var money = 0;</div><div class="line">	return function ()&#123;</div><div class="line">		for(var i = 0,l=arguments.length;i&lt;l;i++)&#123;</div><div class="line">			money += arguments[i];</div><div class="line">		&#125;</div><div class="line">		return money;</div><div class="line">	&#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">var cost = currying(cost);</div><div class="line">cost(100);</div><div class="line">console.log(cost(200))</div><div class="line">console.log(cost())</div></pre></td></tr></table></figure>
<h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>多次重复调用，按时间限制调用次数<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var throttle = function(fn,interval)&#123;</div><div class="line">	var _self = fn,timer,firstTime = true;</div><div class="line">	return fucntion()&#123;</div><div class="line">		var args = arguments,_me = this;</div><div class="line">		if(fiestTime)&#123;</div><div class="line">			_self.apply(_me,args);</div><div class="line">			return firstTime = false;</div><div class="line">		&#125;</div><div class="line">		if(timer)&#123;</div><div class="line">			return false;</div><div class="line">		&#125;</div><div class="line">		timer = setTimeout(function()&#123;</div><div class="line">			clearTimeout(timer);</div><div class="line">			timer = null;</div><div class="line">			_self.apply(_me,args);</div><div class="line">		&#125;,interval||500)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="分时函数"><a href="#分时函数" class="headerlink" title="分时函数"></a>分时函数</h2><p>大批量数据要执行同一函数，分批次执行任务<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> var timeChunk = function(ary,fn,count)&#123;</div><div class="line">	var obj,t;</div><div class="line">	var len = ary.length;</div><div class="line">	var start = function()&#123;</div><div class="line">		for(var i = 0;i&lt;Math.min(count||1,ary.length);i++)&#123;</div><div class="line">			var obj = ary.shift();</div><div class="line">			fn(obj);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return function()&#123;</div><div class="line">		t=setInterval(function()&#123;</div><div class="line">			if(ary.length === 0)&#123;</div><div class="line">				return clearInterval(t)</div><div class="line">			&#125;</div><div class="line">			start();</div><div class="line">		&#125;,200)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="惰性加载函数"><a href="#惰性加载函数" class="headerlink" title="惰性加载函数"></a>惰性加载函数</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> var addEvent = function(elem,type,handler)&#123;</div><div class="line">	if(window.addEventListener)&#123;</div><div class="line">		addEvent = function(elem,type,handler)&#123;</div><div class="line">			elem.addEventListerner(type,handler,false)</div><div class="line">		&#125;</div><div class="line">	&#125;else if(window.attachEvent)&#123;</div><div class="line">		addEvent = function(elem,type,handler)&#123;</div><div class="line">			elem.attachEvent(&apos;on&apos;+type,handler)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	addEvent(elem,type,handler);</div><div class="line">&#125;</div><div class="line">//addEvent 在第一次进入条件分支之后，在函数内部会重写这个函数，重写之后的函数就是我们期望的函数，在下一次进入addEvent</div><div class="line">//函数时，addEvent函数不存在条件分支，无需再进行判断</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一些有思想提醒作用的话&quot;&gt;&lt;a href=&quot;#一些有思想提醒作用的话&quot; class=&quot;headerlink&quot; title=&quot;一些有思想提醒作用的话&quot;&gt;&lt;/a&gt;一些有思想提醒作用的话&lt;/h1&gt;&lt;p&gt;把不变的部分隔离出来，把可变的部分封装起来&lt;/p&gt;
&lt;p&gt;多态最根本
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>angularjs directive编写组件小结</title>
    <link href="http://yoohannah.github.io/post/knowledge/angularjsdirective.html"/>
    <id>http://yoohannah.github.io/post/knowledge/angularjsdirective.html</id>
    <published>2018-08-29T23:37:09.000Z</published>
    <updated>2018-08-30T00:00:07.441Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;edit-modal dismiss=&quot;dismiss()&quot; config=&quot;model.config&quot; after-save=&quot;model.afterSave()&quot; aaa=&quot;model.hello&quot;&gt;&lt;/edit-modal&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">export function editModalDirective() &#123;</div><div class="line">  return &#123;</div><div class="line">    restrict: &apos;E&apos;,</div><div class="line">    template: template,</div><div class="line">    controller: EditModalCtrl,</div><div class="line">    bindToController: true,</div><div class="line">    controllerAs: &apos;ctrl&apos;,</div><div class="line">    transclude: true,</div><div class="line">    scope: &#123;</div><div class="line">      dismiss: &apos;&amp;&apos;,</div><div class="line">      afterSave: &apos;&amp;&apos;,</div><div class="line">      config: &apos;=&apos;,</div><div class="line">    &#125;,</div><div class="line">    link: function(scope, ele, attrs) &#123;</div><div class="line">      if (scope.ctrl.config.type === &apos;Strategy&apos;) &#123;</div><div class="line">        if (scope.ctrl.config.type === &apos;Strategy&apos;) &#123;</div><div class="line">          ele[0].className += &apos;strategy&apos;;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      </div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">//在模块编译时注册指令</div><div class="line">coreModule.directive(&apos;editModal&apos;, editModalDirective);</div><div class="line">//参考：https://www.cnblogs.com/wangnuo/p/6305742.html</div></pre></td></tr></table></figure>
<h2 id="link函数"><a href="#link函数" class="headerlink" title="link函数"></a>link函数</h2><p>link函数仅在编译时执行一次，三个参数：scope, ele, attrs</p>
<h3 id="ele"><a href="#ele" class="headerlink" title="ele"></a>ele</h3><p>即是当前的指令DOM对象，因此可以在ele上绑定触发事件,</p>
<p>但谨慎在数据上利用事件订阅触发机制进行事件绑定，</p>
<p>因为如果在外层包react组件的情况下，可能会导致数据刷新，但没有事件绑定，从而无法触发事件</p>
<p>注意在获取深层子dom时可能会获取不到</p>
<h3 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h3><p>指ele所在dom上的属性集合,没有在scope属性中声明的属性也能看到</p>
<p>但要注意，属性值就是标签上变量的名，不是标签上变量指代的值</p>
<p>标签上属性赋值变量的值在参数scope中<br><img src="/image/attrs.png" alt="attrs"></p>
<h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>link函数参数scope指向当前指令的作用域</p>
<p>参数scope的ctrl属性（controllerAs属性的值）即EditModalCtrl</p>
<p>因为这里配置了controller，bindToController，controllerAs，</p>
<p>所以在scope属性中声明的属性(config)方法（dismiss,after）会被归并到controller中，会以ctrl的属性形式出现，</p>
<p>即如果我想拿到属性scope中声明的config,可以这样：scope.ctrl.config</p>
<p>同时可以在EditModalCtrl中访问获取config,即this.config</p>
<p>另外如果没有在属性scope中声明的属性aaa，但在标签中进行了配置（aaa=”model.hello”），是无效的,ctrl上是不会有aaa属性的，即传递不进来</p>
<p>因此可以在link函数中拿到父作用域传递过来的值，分情况进行不同处理<br><img src="/image/scope.png" alt="scope"></p>
<h2 id="scope属性"><a href="#scope属性" class="headerlink" title="scope属性"></a>scope属性</h2><p>建立子域，声明所在标签的属性名，以及传值方式,controler存在情况下被合并</p>
<h3 id=""><a href="#" class="headerlink" title="@"></a>@</h3><p>@ 在 directive 中使用 xxx 属性绑定父 scope 中的属性。当改变父 scope 中属性的值的时候，directive 会同步更新值，当改变 directive 的 scope 的属性值时，父 scope 无法同步更新值。使用&#123;&#123;&#125;&#125;引用绑定值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">app.controller(&quot;myController&quot;, function ($scope) &#123;</div><div class="line">        $scope.name = &quot;hello world&quot;;</div><div class="line">    &#125;).directive(&quot;isolatedDirective&quot;, function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                name: &quot;@&quot;</div><div class="line">            &#125;,</div><div class="line">            template: &apos;Say：&#123;&#123;name&#125;&#125; &lt;br&gt;改变隔离scope的name：&lt;input type=&quot;buttom&quot; value=&quot;&quot; ng-model=&quot;name&quot; class=&quot;ng-pristine ng-valid&quot;&gt;&apos;</div><div class="line">        &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">&lt;div ng-controller=&quot;myController&quot;&gt;</div><div class="line">   &lt;div class=&quot;result&quot;&gt;</div><div class="line">       &lt;div&gt;父scope：</div><div class="line">           &lt;div&gt;Say：&#123;&#123;name&#125;&#125;&lt;br&gt;改变父scope的name：&lt;input type=&quot;text&quot; value=&quot;&quot; ng-model=&quot;name&quot;/&gt;&lt;/div&gt;</div><div class="line">       &lt;/div&gt;</div><div class="line">       &lt;div&gt;隔离scope：</div><div class="line">           &lt;div isolated-directive name=&quot;&#123;&#123;name&#125;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">       &lt;/div&gt;</div><div class="line">        &lt;div&gt;隔离scope（不使用&#123;&#123;name&#125;&#125;）：</div><div class="line">             &lt;div isolated-directive name=&quot;name&quot;&gt;&lt;/div&gt;</div><div class="line">         &lt;/div&gt;</div><div class="line">   &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="-1"><a href="#-1" class="headerlink" title="="></a>=</h3><p>= 无论是改变父 scope 还是隔离 scope 里的属性，父 scope 和隔离 scope 都会同时更新属性值，因为它们是双向绑定的关系,使用“”引用绑定值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">app.controller(&quot;myController&quot;, function ($scope) &#123;</div><div class="line">        $scope.user = &#123;</div><div class="line">            name: &apos;hello&apos;,</div><div class="line">            id: 1</div><div class="line">        &#125;;</div><div class="line">    &#125;).directive(&quot;isolatedDirective&quot;, function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                user: &quot;=&quot;</div><div class="line">            &#125;,</div><div class="line">            template: &apos;Say：&#123;&#123;user.name&#125;&#125; &lt;br&gt;改变隔离scope的name：&lt;input type=&quot;buttom&quot; value=&quot;&quot; ng-model=&quot;user.name&quot;/&gt;&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&lt;div ng-controller=&quot;myController&quot;&gt;</div><div class="line">    &lt;div&gt;父scope：</div><div class="line">        &lt;div&gt;Say：&#123;&#123;user.name&#125;&#125;&lt;br&gt;改变父scope的name：&lt;input type=&quot;text&quot; value=&quot;&quot; ng-model=&quot;user.name&quot;/&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;隔离scope：</div><div class="line">        &lt;div isolated-directive user=&quot;user&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;隔离scope（使用&#123;&#123;name&#125;&#125;）：</div><div class="line">        &lt;div isolated-directive user=&quot;&#123;&#123;user&#125;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>&amp; 用来绑定函数，在directive中调用父域中的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> app.controller(&quot;myController&quot;, function ($scope) &#123;</div><div class="line">        $scope.value = &quot;hello world&quot;;</div><div class="line">        $scope.click = function () &#123;</div><div class="line">            $scope.value = Math.random();</div><div class="line">        &#125;;</div><div class="line">    &#125;).directive(&quot;isolatedDirective&quot;, function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                action: &quot;&amp;&quot;</div><div class="line">            &#125;,</div><div class="line">            template: &apos;&lt;input type=&quot;button&quot; value=&quot;在directive中执行父scope定义的方法&quot; ng-click=&quot;action()&quot;/&gt;&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">    </div><div class="line">    &lt;div  ng-controller=&quot;myController&quot;&gt;</div><div class="line">        &lt;div&gt;父scope：</div><div class="line">            &lt;div&gt;Say：&#123;&#123;value&#125;&#125;&lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div&gt;隔离scope：</div><div class="line">            &lt;div isolated-directive action=&quot;click()&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>参考： <a href="https://blog.coding.net/blog/angularjs-directive-isolate-scope?type=early" target="_blank" rel="external">https://blog.coding.net/blog/angularjs-directive-isolate-scope?type=early</a></p>
<h2 id="transclude"><a href="#transclude" class="headerlink" title="transclude"></a>transclude</h2><p>类似于VUE的slot,但不如slot的灵活强，更倾向于定制插入，在固定位置插入</p>
<h3 id="单点嵌入"><a href="#单点嵌入" class="headerlink" title="单点嵌入"></a>单点嵌入</h3><p>设置属性 transclude:true</p>
<p>在模板中将 &lt;ng-transclude&gt;&lt;/ng-transclude&gt;放到要插入的位置</p>
<p>应用时&lt;my-labe&gt;&lt;span&gt;1233&lt;/span&gt;&lt;/my-label&gt;;</p>
<p>&lt;span&gt;1233&lt;/span&gt; 会自动插入&lt;ng-transclude&gt;&lt;/ng-transclude&gt;之间</p>
<h3 id="多点嵌入"><a href="#多点嵌入" class="headerlink" title="多点嵌入"></a>多点嵌入</h3><p>设置属性 transclude ：{模板中flag:页面应用时标签名的驼峰式，}</p>
<p>在模板中制定位置放置flag :&lt;div  ng-transclude=”flag”&gt;&lt;/div&gt;</p>
<p>应用时 &lt;my-label&gt;&lt;my-title&gt;123&lt;/my-title&gt;&lt;/my-label&gt;</p>
<p>123 会自动插入&lt;div  ng-transclude=”flag”&gt;&lt;/div&gt;之间</p>
<p>参考：<a href="https://segmentfault.com/a/1190000004586636" target="_blank" rel="external">https://segmentfault.com/a/1190000004586636</a></p>
<h3 id="scope绑定"><a href="#scope绑定" class="headerlink" title="scope绑定"></a>scope绑定</h3><p>使用transcludeFn给transclude进来的Dom手动制定scope,</p>
<p>transcludeFn可来自compile，link的参数，或者controller的注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">.directive(&quot;todo&quot;, function()&#123;</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        restrict:&quot;E&quot;,</div><div class="line">        transclude:&quot;true&quot;,</div><div class="line">        template:&quot;&lt;header&gt;&#123;&#123;header&#125;&#125;&lt;/header&gt;&lt;div&gt;&lt;span&gt;这里是自定义区域&lt;/span&gt;&lt;content-transclude&gt;&lt;/content-transclude&gt;&lt;/div&gt;&quot;</div><div class="line">        scope:&#123;</div><div class="line">            header:&quot;@&quot;</div><div class="line">        &#125;,</div><div class="line">        controller:[&quot;$transclude&quot;,function(transcludeFn)&#123;</div><div class="line">            this.transcludeFn = transcludeFn;</div><div class="line">        &#125;]</div><div class="line">    &#125;;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">.directive(&quot;contentTransclude&quot;,funtion()&#123;</div><div class="line">    return &#123;</div><div class="line">        restrict:&quot;E&quot;,</div><div class="line">        require:&quot;^todo&quot;,</div><div class="line">        link:function(scope,element,attr,todoController)&#123;</div><div class="line">            todoController.transcludeFn(scope.$parent, function(transcludeContent)&#123;</div><div class="line">                element.append(transcludeContent);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>参考：<a href="https://blog.csdn.net/shut1k/article/details/49848637" target="_blank" rel="external">https://blog.csdn.net/shut1k/article/details/49848637</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器使用</title>
    <link href="http://yoohannah.github.io/post/knowledge/aliyun.html"/>
    <id>http://yoohannah.github.io/post/knowledge/aliyun.html</id>
    <published>2018-05-01T13:42:37.000Z</published>
    <updated>2018-05-01T13:42:17.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h2><p>按照网站指引，配置服务器相关参数，提交订单，付钱</p>
<p>需要注意的是镜像就是将来在服务上安装的操作系统<br>如果这里选错，稍后还可以更换</p>
<h2 id="更换镜像"><a href="#更换镜像" class="headerlink" title="更换镜像"></a>更换镜像</h2><p>相当于更换操作系统<br><a href="https://help.aliyun.com/document_detail/25436.html?spm=a2c4g.11186623.4.1.mKmERm" target="_blank" rel="external">更换操作系统</a><br><a href="https://help.aliyun.com/document_detail/50134.html?spm=a2c4g.11186623.6.672.mQB0bF" target="_blank" rel="external">更换系统盘(公共镜像)</a></p>
<h2 id="部署阿里云"><a href="#部署阿里云" class="headerlink" title="部署阿里云"></a>部署阿里云</h2><p>在云端服务器搭建nodejs开发环境<br><a href="https://help.aliyun.com/document_detail/25425.html?spm=a2c4g.11186623.2.5.Hiallm" target="_blank" rel="external">远程连接ECS实例</a><br><a href="https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.6.598.RIGXvB" target="_blank" rel="external">分盘</a><br><a href="https://help.aliyun.com/document_detail/50775.html?spm=a2c4g.11186623.6.758.RZeQeh" target="_blank" rel="external">部署Node.js项目（CentOS）</a><br><a href="https://blog.csdn.net/u014066037/article/details/70224780" target="_blank" rel="external">安装git(仅供参考)</a></p>
<h2 id="部署自己的项目"><a href="#部署自己的项目" class="headerlink" title="部署自己的项目"></a>部署自己的项目</h2><p>安装好开发环境后就可以像在本地运行项目一样克隆项目运行项目</p>
<h2 id="域名备案"><a href="#域名备案" class="headerlink" title="域名备案"></a>域名备案</h2><p>我们在购买域名后，还要对域名进行备案<br><a href="https://beian.aliyun.com/order/index?spm=5176.8087400.600752.3.389615c9UqjZyz" target="_blank" rel="external">域名备案系统</a><br>按照流程进行备案即可</p>
<h2 id="http转https"><a href="#http转https" class="headerlink" title="http转https"></a>http转https</h2><p><a href="https://dc.console.aliyun.com/next/index#/domain/list/all-domain" target="_blank" rel="external">域名控制台</a></p>
<p>我们需要购买云盾证书服务<br><a href="https://common-buy.aliyun.com/?spm=5176.7968328.911106.btn1.2f194ebfXX6t9Q&amp;commodityCode=cas#/buy" target="_blank" rel="external">购买页面</a><br>在专业版OV SSL下选择品牌Symantec,<br>然后保护类型选择1个域名<br>会发现证书类型出现‘免费型DV SSL’,选择这个就可以买到免费证书</p>
<p>购买后根据申请流程填写资料等待流程走完就可以拿到证书<br>注意1.购买的域名在云解析DNS服务中又绑定，DNS会自动生成映射，2.选择系统生成CSR</p>
<p>拿到证书后<br>在<a href="https://yundun.console.aliyun.com/?spm=5176.2020520163.aliyun_sidebar.19.22cf2b7auXL2bL&amp;p=cas#/cas/home" target="_blank" rel="external">CA证书管理页面</a>可以下载到xxxxx.key,xxxx.pem文件</p>
<p>因为我这里用nodejs搭建服务器，所以只需将文件放入项目，修改项目文件为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;);</div><div class="line">const fs = require(&apos;fs&apos;);</div><div class="line">const https = require(&apos;https&apos;);</div><div class="line">const http = require(&apos;http&apos;);</div><div class="line">var enforceHttps = require(&apos;koa-sslify&apos;);</div><div class="line"></div><div class="line">const app = new Koa();</div><div class="line"></div><div class="line">//将http请求强制转换成https请求</div><div class="line">app.use(enforceHttps());</div><div class="line"></div><div class="line">var options = &#123;</div><div class="line">    key: fs.readFileSync(&apos;./ssl/214645895910665.key&apos;),</div><div class="line">    cert: fs.readFileSync(&apos;./ssl/214645895910665.pem&apos;)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">http.createServer(app.callback()).listen(80);</div><div class="line">https.createServer(options, app.callback()).listen(443);</div><div class="line">console.log(&apos;server is running....&apos;);</div></pre></td></tr></table></figure></p>
<p>还要注意安全组有没有设置放行https的443端口<br>进入云服务器控制台<br>网络和安全下安全组, 点击配置规则, 进入规则列表<br>如果没有443端口，则点击添加安全组规则，端口设置为443即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;购买云服务器&quot;&gt;&lt;a href=&quot;#购买云服务器&quot; class=&quot;headerlink&quot; title=&quot;购买云服务器&quot;&gt;&lt;/a&gt;购买云服务器&lt;/h2&gt;&lt;p&gt;按照网站指引，配置服务器相关参数，提交订单，付钱&lt;/p&gt;
&lt;p&gt;需要注意的是镜像就是将来在服务上安装的操作系
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
</feed>
