<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Little World</title>
  <subtitle>learn and share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoohannah.github.io/"/>
  <updated>2017-03-01T14:22:41.858Z</updated>
  <id>http://yoohannah.github.io/</id>
  
  <author>
    <name>YooHannah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图的存储结构</title>
    <link href="http://yoohannah.github.io/post/algorithm/graphstruct.html"/>
    <id>http://yoohannah.github.io/post/algorithm/graphstruct.html</id>
    <published>2017-03-01T13:59:30.000Z</published>
    <updated>2017-03-01T14:22:41.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-邻接矩阵"><a href="#1-邻接矩阵" class="headerlink" title="1.邻接矩阵"></a>1.邻接矩阵</h1><h2 id="1-无向图"><a href="#1-无向图" class="headerlink" title="1.无向图"></a>1.无向图</h2><p><img src="/image/graph1.png" alt="graph1"><br>一个一维数组存储图中顶点信息，</p>
<table>
<thead>
<tr>
<th>顶点数组</th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>一个二维数组(邻接矩阵)存储图中边或弧的信息<br>0表示不存在顶点间的边，1表示顶点间存在边</p>
<table>
<thead>
<tr>
<th></th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td>v0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>v1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>v2</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>v3</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>无向图构成的邻接矩阵为对称矩阵，对角线值为0<br>—–顶点Vi在邻接矩阵中第i行(或第i列)的元素之和为该顶点的度<br>—–扫描矩阵中第i行元素，元素为1的列为顶点Vi的邻接点</p>
<h2 id="2-有向图"><a href="#2-有向图" class="headerlink" title="2.有向图"></a>2.有向图</h2><p><img src="/image/graph2.png" alt="graph2"><br>一个一维数组存储图中顶点信息，</p>
<table>
<thead>
<tr>
<th>顶点数组</th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>坐标[Vi][Vj]的值，1表示Vi指向Vj的弧存在，0表示不存在</p>
<table>
<thead>
<tr>
<th></th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td>v0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>v1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>v2</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>v3</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>第Vi列的元素之和为顶点Vi的入度<br>第Vi行的元素之和为顶点Vi的出度</p>
<h2 id="3-网"><a href="#3-网" class="headerlink" title="3.网"></a>3.网</h2><p><img src="/image/tu3.png" alt="tu3"><br>邻接矩阵各元素的值不再用0/1表示，而是用权表示<br>顶点间若不存在弧，则用\infty无穷表示,顶点自己到自己的权为0</p>
<table>
<thead>
<tr>
<th></th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td>v0</td>
<td>0</td>
<td>\infty</td>
<td>\infty</td>
<td>18</td>
</tr>
<tr>
<td>v1</td>
<td>8</td>
<td>0</td>
<td>2</td>
<td>\infty</td>
</tr>
<tr>
<td>v2</td>
<td>4</td>
<td>\infty</td>
<td>0</td>
<td>\infty</td>
</tr>
<tr>
<td>v3</td>
<td>\infty</td>
<td>\infty</td>
<td>\infty</td>
<td>0</td>
</tr>
</tbody>
</table>
<h1 id="2-邻接表"><a href="#2-邻接表" class="headerlink" title="2.邻接表"></a>2.邻接表</h1><h2 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h2><p>顶点用一个一维数组存储<br>每个顶点Vi的所有邻接点构成一个线性表，由于个数不确定，用单链表来表示<br><img src="/image/tu4.png" alt="tu4"><br><img src="/image/tu5.png" alt="tu5"></p>
<h2 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h2><p>把顶点当弧尾建立邻接表，邻接表长度就是该顶点出度<br><img src="/image/tu6.png" alt="tu6"><br>把顶点当弧头建的表叫逆邻接表，邻接表长度就是该顶点入度<br><img src="/image/tu7.png" alt="tu7"></p>
<h2 id="网"><a href="#网" class="headerlink" title="网"></a>网</h2><p>在边表结点定义中再增加一个数据域来存储权值<br><img src="/image/tu8.png" alt="tu8"></p>
<h1 id="3-十字链表-有向图"><a href="#3-十字链表-有向图" class="headerlink" title="3.十字链表(有向图)"></a>3.十字链表(有向图)</h1><p>顶点表结构</p>
<p>|data|firstIn|firstOut|<br>data：顶点数据<br>firstIn:第一个入边表的指针<br>firstOut:第一个出边表的指针</p>
<p>边表结点结构 表示以条边</p>
<table>
<thead>
<tr>
<th>tailVex</th>
<th>headVex</th>
<th>headLink</th>
<th>tailLink</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>tailVex:该弧起点的顶点在顶点表的下标<br>headVex:该弧终点的顶点在顶点表的下标<br>headLink:指向headVex的弧的指针<br>tailLink: 从tailVex出发的弧的指针<br><img src="/image/graph2.png" alt="graph2"><br><img src="/image/tu9.png" alt="tu9"></p>
<h1 id="4-邻接多重表-无向表"><a href="#4-邻接多重表-无向表" class="headerlink" title="4.邻接多重表(无向表)"></a>4.邻接多重表(无向表)</h1><p>关注对象是图中的表不是顶点<br>|iVex|iLink|jVex|jLink|<br>iVex和jVex是与某条边依附的两个顶点在顶点表中的下标<br>iLink：指向依附顶点iVex的下一条边，<br>jLink：指向依附顶点jVex的下一条边，<br><img src="/image/tu10.png" alt="tu10"></p>
<h1 id="5-边集数组"><a href="#5-边集数组" class="headerlink" title="5.边集数组"></a>5.边集数组</h1><p>由两个一维数组构成<br>一个是存储顶点的信息<br>另一个存储边的信息<br>边数组的每个数据元素由一条边的起点下标(begin)、终点下标(end)和权(weight)组成</p>
<p><img src="/image/tu11.png" alt="tu11"></p>
<table>
<thead>
<tr>
<th>顶点数组</th>
<th>v0</th>
<th>v1</th>
<th>v2</th>
<th>v3</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>边数组</th>
<th>begin</th>
<th>end</th>
<th>weight</th>
</tr>
</thead>
<tbody>
<tr>
<td>edges[0]</td>
<td>0</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>edges[1]</td>
<td>1</td>
<td>0</td>
<td>4</td>
</tr>
<tr>
<td>edges[2]</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>edges[3]</td>
<td>2</td>
<td>0</td>
<td>8</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-邻接矩阵&quot;&gt;&lt;a href=&quot;#1-邻接矩阵&quot; class=&quot;headerlink&quot; title=&quot;1.邻接矩阵&quot;&gt;&lt;/a&gt;1.邻接矩阵&lt;/h1&gt;&lt;h2 id=&quot;1-无向图&quot;&gt;&lt;a href=&quot;#1-无向图&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>日期格式兼容</title>
    <link href="http://yoohannah.github.io/post/knowledge/compatible_date.html"/>
    <id>http://yoohannah.github.io/post/knowledge/compatible_date.html</id>
    <published>2017-02-26T13:14:37.000Z</published>
    <updated>2017-02-26T13:24:56.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IE11-chrome-360-火狐兼容日期格式兼容"><a href="#IE11-chrome-360-火狐兼容日期格式兼容" class="headerlink" title="IE11/chrome/360/火狐兼容日期格式兼容"></a>IE11/chrome/360/火狐兼容日期格式兼容</h1><p> $scope.date= new Date().toLocaleDateString().replace(/\//g,’-‘);<br> 获取到的”year-month-day”格式支持/chrome/360/火狐，但到了IE11就变成”year年month月day”</p>
<p> var date = new Date();<br> var y = date.getFullYear();<br> var m = date.getMonth()+1;<br> var d = date.getDate();<br> var day = date.getDay();<br> var dateString=y+”-“+m+”-“+d;<br> $scope.date= dateString;</p>
<p> 这样获取的”year-month-day”格式支持以上四种浏览器</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IE11-chrome-360-火狐兼容日期格式兼容&quot;&gt;&lt;a href=&quot;#IE11-chrome-360-火狐兼容日期格式兼容&quot; class=&quot;headerlink&quot; title=&quot;IE11/chrome/360/火狐兼容日期格式兼容&quot;&gt;&lt;/a&gt;IE11/chr
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>AngularJs自定义指令实现图片上传</title>
    <link href="http://yoohannah.github.io/post/knowledge/imgupload.html"/>
    <id>http://yoohannah.github.io/post/knowledge/imgupload.html</id>
    <published>2017-02-22T14:14:30.000Z</published>
    <updated>2017-02-22T14:15:15.227Z</updated>
    
    <content type="html"><![CDATA[<p>//定义file-Model指令的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">MetronicApp.directive(<span class="string">'fileModel'</span>, [<span class="string">'$parse'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$parse</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">restrict</span>: <span class="string">'A'</span>,</div><div class="line">    <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs, ngModel</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> model = $parse(attrs.fileModel);</div><div class="line">      <span class="keyword">var</span> modelSetter = model.assign;</div><div class="line">      element.bind(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          modelSetter(scope, element[<span class="number">0</span>].files[<span class="number">0</span>]);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//附件预览</span></div><div class="line">           scope.file = (event.srcElement || event.target).files[<span class="number">0</span>];</div><div class="line">            scope.getFile();</div><div class="line">            <span class="keyword">this</span>.value = <span class="string">''</span>; <span class="comment">//清除已上传的文件，否则无法连续上传相同文件</span></div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">])</div></pre></td></tr></table></figure></p>
<p>//在HTML使用时的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> &lt;div class=&quot;form-group&quot;&gt;</div><div class="line">    &lt;label class=&quot;control-label col-md-3&quot;&gt;图片上传&lt;/label&gt;</div><div class="line">     &lt;div class=&quot;col-md-9 fileinput&quot;&gt;</div><div class="line">         &lt;img src=&quot;&#123;&#123;detaildata.banner&#125;&#125;&quot; name=&quot;img&quot; style=&quot;width:40px;height: 40px;&quot;&gt;</div><div class="line">        &lt;span class=&quot;btn red btn-outline btn-file&quot; style=&quot;margin-left: 10px;margin-top:0px;&quot;&gt;</div><div class="line">        &lt;span class=&quot;fileinput-new&quot;&gt; 重新上传 &lt;/span&gt;</div><div class="line">        &lt;input type=&quot;hidden&quot;&gt;&lt;input id=&quot;upload&quot; type=&quot;file&quot; file-model=&quot;myFile&quot; name=&quot;...&quot; accept=&quot;image/*&quot; &gt;</div><div class="line">        &lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>//Controller中上传图片时的js函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$scope.getFile = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> postData = &#123;</div><div class="line">            <span class="attr">fileName</span>: $scope.file</div><div class="line">          &#125;;</div><div class="line">       fileReader.readAsDataUrl($rootScope.settings.url + <span class="string">""</span>, postData).success( <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">                $scope.detaildata.banner = response;</div><div class="line">        &#125;);</div><div class="line"> &#125;;</div></pre></td></tr></table></figure></p>
<p> //定义fileReader服务的代码<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'MetronicApp'</span>)</div><div class="line">.factory(<span class="string">'fileReader'</span>, [<span class="string">"$http"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> readAsDataURL = <span class="function"><span class="keyword">function</span> (<span class="params">url, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</div><div class="line">          angular.forEach(data, <span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</div><div class="line">            fd.append(key, val);</div><div class="line">          &#125;);</div><div class="line">          <span class="keyword">var</span> args = &#123;</div><div class="line">            <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">            <span class="attr">url</span>: url,</div><div class="line">            <span class="attr">data</span>: fd,</div><div class="line">            <span class="attr">headers</span>: &#123;<span class="string">'Content-Type'</span>: <span class="literal">undefined</span>&#125;,</div><div class="line">            <span class="attr">transformRequest</span>: angular.identity</div><div class="line">          &#125;;</div><div class="line">          <span class="keyword">return</span> $http(args);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">readAsDataUrl</span>: readAsDataURL</div><div class="line">  &#125;;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></p>
<p>整个上传的过程，点击“重新上传”按钮，file-model指令绑定的change事件会检测本次选择的图片与上次是否为一致，不一致则会执行file-model定义时的代码<br> element.bind(‘change’, function(event){<br>        scope.$apply(function(){<br>          modelSetter(scope, element[0].files[0]);<br>        });<br>        //附件预览<br>           scope.file = (event.srcElement || event.target).files[0];      //给Controller 中$scope.file赋值<br>            scope.getFile();    //调用Controller 中 $scope.getFile();<br>          this.value = ‘’; //清除已上传的文件，否则无法连续上传相同文件<br>      });<br>控制器中的$scope.getFile()函数用到fileReader.readAsDataUrl函数上传图片给后台，这个函数在定义fileReader时被定义</p>
<p>定义指令时，若没有清除已上传文件，连续多次上传时，将导致无法连续上传相同图片的bug.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;//定义file-Model指令的代码&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="http://yoohannah.github.io/post/algorithm/graph.html"/>
    <id>http://yoohannah.github.io/post/algorithm/graph.html</id>
    <published>2017-02-22T13:59:30.000Z</published>
    <updated>2017-02-22T13:59:53.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h1><p>图:由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G(V,E),<br>     —-G表示一个图，V是图G中顶点的集合，E是图G中边的集合<br>|                | 线性表           | 树                |           图           |<br>| ————-  |:—————-:| —————–:|<br>| 数据元素       | 元素             | 结点              |           顶点         |<br>| 没有数据元素   | 空表             | 空树              | 不能没有顶点，有穷非空 |<br>| 数据元素间关系 | 相邻之间:线性关系| 相邻两层:层次关系 | 任意两个顶点之间都可能有关系顶点之间逻辑关系用边表示，边集可以是空的|<br>无向边：顶点Vi到Vj之间的边没有方向,用无序偶(Vi,Vj)表示<br>有向边/弧：顶点Vi到Vj之间的边有方向,用有序偶<vi,vj>表示,Vi称为弧尾，Vj称为弧头<br>简单图：在该类图结构中，不存在顶点到其自身的边(自己指向自己)且同一条边不重复出现<br>无向完全图:在该类图结构中，任意两个顶点之间都存在边，含n个顶点的无向完全图有n<em>(n-1)/2条边<br>有向完全图:在该类图结构中，任意两个顶点之间都存在方向互为相反的两条弧，含n个顶点的有向完全图有n</em>(n-1)条边<br>稀疏图：边或弧数小于n<em>logn(n是顶点的个数)<br>稠密图：边或弧数大于n</em>logn(n是顶点的个数)<br>权：图的边或弧带有的与它相关的数字<br>网：带权的图<br>子图：图G1(V1,E1),和G2(V2,E2),如果V2 \subseteq V1，E2 \subseteq E1 ,V2 属于 V1，E2 属于 E1则称G2为G1的子图<br><a href="http://blog.csdn.net/sanqima/article/details/48576361" target="_blank" rel="external">http://blog.csdn.net/sanqima/article/details/48576361</a><br>邻接点：无向图G=(V,E),如果边(V1,V2)属于E，则称顶点V1和V2互为邻接点，即V1和V2相邻接<br>——-边(V1,V2)依附于顶点V1和V2，或者说边(V1,V2)与顶点V1和V2相关联<br>顶点V的度：和顶点V相关联的边的数目，记为TD(V)<br>邻接：有向图G=(V,E),如果边<v1,v2>属于E，则称顶点V1邻接到顶点V2,顶点V2邻接自顶点V1<br>顶点V的入度:以顶点V为头的弧的数目，记为    ID(V)<br>顶点V的出度:以顶点V为尾的弧的数目，记为    OD(V)<br>TD(V) = ID(V) + OD(V);<br>路径:图G=(V,E)中从顶点V1到顶点V2的路线叫从顶点V1到顶点V2的路径，注意有向图和无向图的区别<br>路径的长度：路径上边/弧的数目<br>回路/环：第一个顶点和最后一个顶点相同的路径<br>简单路径：序列中顶点不重复出现的路径<br>简单回路/简单环:除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路<br>连通：在无向图G中，如果顶点V1到顶点V2有路径则称V1和V2是连通的<br>连通图：图中任意两个顶点Vi和Vj都是连通的，则称G是连通图<br>连通分量：无向图中的极大连通子图<br>—-连通的子图<br>—-连通子图含有极大顶点数<br>—-具有极大顶点数的连通子图包含依附于这些顶点的所有边<br>强连通图：在该类有向图G中，每一对Vi到Vj都存在路径<br>强连通分量：有向图中的极大强连通子图<br>非强连通图有强连通分量，强连通分量不止属于强连通图<br>连通图的生成树：极小的连通子图，它含有图中全部n个顶点，但只有足以构成一棵树的n-1条边<br>有向树：如果一个有向图恰有一个顶点入度为0，其余顶点入度为1，则该图将生成有向树，从而构成森林</v1,v2></vi,vj></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图的定义&quot;&gt;&lt;a href=&quot;#图的定义&quot; class=&quot;headerlink&quot; title=&quot;图的定义&quot;&gt;&lt;/a&gt;图的定义&lt;/h1&gt;&lt;p&gt;图:由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G(V,E),&lt;br&gt;     —-G表示一个图，V是图G中顶点
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴iconfont使用</title>
    <link href="http://yoohannah.github.io/post/knowledge/iconfont.html"/>
    <id>http://yoohannah.github.io/post/knowledge/iconfont.html</id>
    <published>2017-02-18T02:41:51.000Z</published>
    <updated>2017-02-18T02:41:49.200Z</updated>
    
    <content type="html"><![CDATA[<p>1.登录<a href="http://iconfont.cn/plus/home/index?spm=a313x.7781069.1998910419.2.QImsN2" target="_blank" rel="external">http://iconfont.cn/plus/home/index?spm=a313x.7781069.1998910419.2.QImsN2</a> 进入搜索界面<br>2.通过输入关键字搜索自己想要的图标<br>3.将鼠标放到自己想要的图标会出现选择层，点击第一个购物车图标，添加入库<br>4.将所有想要的图标添加完后，点击右上角购物车图标打开项目添加页，点击“加入项目”右侧图标，为选择的图标新建项目,点确定<br><img src="/image/iconfont1.png" alt="iconfont1"><br><img src="/image/iconfont2.png" alt="iconfont2"><br>5.关闭项目添加页，点击导航栏的“图标管理”，进入“我的项目”栏目</p>
<p><div><br> <img src="/image/iconfont3.png" style="width: 250px;height: 50px;margin-left: 20px" alt="图片名称" align="left"><br> <img src="/image/iconfont4.png" alt="图片名称" align="right" style="width: 150px;height: 60px;margin-top: -30px;margin-right: 80px"><br></div><br>6.使用图标到我们的HTML代码中，可以通过线上链接使用，也可以通过下载至本地使用</p>
<h2 id="通过线上链接使用"><a href="#通过线上链接使用" class="headerlink" title="通过线上链接使用"></a>通过线上链接使用</h2><p>1.点击查看在线链接,复制代码到项目的静态资源的css文件中一般在src/assets/css路径下的文件<br>2.设置一个类icon，通过这个类的属性改变图标样式，同时在HTML中引用这个类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.icon &#123;</div><div class="line">  font-family: &quot;iconfont&quot; !important;</div><div class="line">  font-style: normal;</div><div class="line">  display: inline-block;</div><div class="line">  vertical-align: middle;</div><div class="line">  background-size: 100% auto;</div><div class="line">  background-position: center;</div><div class="line">  -webkit-font-smoothing: asntialiased;</div><div class="line">  -webkit-text-stroke-width: 0.2px;</div><div class="line">  -moz-osx-font-smoothing: grayscale;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.在标签中添加icon类,在标签中间加入图标代码，例如：<i class="icon"> &#xe6ac; </i></p>
<h2 id="下载至本地"><a href="#下载至本地" class="headerlink" title="下载至本地"></a>下载至本地</h2><p>1.点击下载至本地<br>2.将在线链接代码中用到的文件放到项目静态文件夹中，<br>3.将在线链接代码中文件的路径更改为项目中的文件路径，<br>4.其他步骤同线上路径<br>5.也可直接打开下载文件的IconFontDemo/assets/iconfont/的demo.html代码，看如何使用</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.登录&lt;a href=&quot;http://iconfont.cn/plus/home/index?spm=a313x.7781069.1998910419.2.QImsN2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://iconfont.cn/
    
    </summary>
    
    
      <category term="knowledge" scheme="http://yoohannah.github.io/tags/knowledge/"/>
    
  </entry>
  
  <entry>
    <title>git问题处理</title>
    <link href="http://yoohannah.github.io/post/knowledge/gittrouble.html"/>
    <id>http://yoohannah.github.io/post/knowledge/gittrouble.html</id>
    <published>2017-02-18T01:50:30.000Z</published>
    <updated>2017-03-01T14:01:40.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-pull-更新代码出现问题"><a href="#git-pull-更新代码出现问题" class="headerlink" title="git pull 更新代码出现问题"></a>git pull 更新代码出现问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">There is no tracking information for the current branch.</div><div class="line">Please specify which branch you want to merge with.</div><div class="line">See git-pull(1) for details</div><div class="line"></div><div class="line">    git pull &lt;remote&gt; &lt;branch&gt;</div><div class="line"></div><div class="line">If you wish to set tracking information for this branch you can do so with:</div><div class="line"></div><div class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; develop_hotfix</div></pre></td></tr></table></figure>
<p>解决办法<br>git branch -D 分支名  ##删除本地待更新分支<br>git checkout 分支名 ##将待更新分支切回来<br>Git pull 再更新</p>
<h1 id="git-remote-add-origin-遇到远程分支已存在的情况"><a href="#git-remote-add-origin-遇到远程分支已存在的情况" class="headerlink" title="git remote add origin 遇到远程分支已存在的情况"></a>git remote add origin 遇到远程分支已存在的情况</h1><p>解决办法<br>git remote rm origin ##先删除远程分支<br>git remote add origin 地址 ## 再修改远程仓库地址</p>
<h1 id="git-push-遇到问题"><a href="#git-push-遇到问题" class="headerlink" title="git push 遇到问题"></a>git push 遇到问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fatal: unable to access &apos;https://github.com/YooHannah/WeiXindemo.git/&apos;: Failed to connect to github.com port 443: Timed out</div></pre></td></tr></table></figure>
<p>解决办法<br>先删除远程分支 git remote rm origin<br>再将本地分支的上游分支设置为远程分支同时push<br>git push –set-upstream origin master<br>以后再执行git push 就不会出现报以上错误或一直没反应的状况</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-pull-更新代码出现问题&quot;&gt;&lt;a href=&quot;#git-pull-更新代码出现问题&quot; class=&quot;headerlink&quot; title=&quot;git pull 更新代码出现问题&quot;&gt;&lt;/a&gt;git pull 更新代码出现问题&lt;/h1&gt;&lt;figure class
    
    </summary>
    
      <category term="categories" scheme="http://yoohannah.github.io/categories/categories/"/>
    
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="http://yoohannah.github.io/post/knowledge/gituse.html"/>
    <id>http://yoohannah.github.io/post/knowledge/gituse.html</id>
    <published>2017-02-15T08:56:09.000Z</published>
    <updated>2017-02-18T01:17:59.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链接虚拟机基本步骤"><a href="#链接虚拟机基本步骤" class="headerlink" title="链接虚拟机基本步骤"></a>链接虚拟机基本步骤</h1><p>1.打开git bash<br>2.执行命令“ssh root@环境地址” 例：ssh root@172.16.6.213<br>3.输入对应密码<br>4.执行命令“cd 代码在该虚拟机的存放路径” 例：cd /usr/share/nginx/html/projrctname<br>5.git branch #查看本地分支<br>6.git checkout 分支名  #切换分支<br>7.git pull 更新代码</p>
<h1 id="更新远程仓库地址"><a href="#更新远程仓库地址" class="headerlink" title="更新远程仓库地址"></a>更新远程仓库地址</h1><h2 id="命令行界面操作"><a href="#命令行界面操作" class="headerlink" title="命令行界面操作"></a>命令行界面操作</h2><p>显示当前远程仓库：git remote -v<br>删除当前远程仓库：git remote remove origin<br>添加新的远程仓库：git remote add origin 远程仓库地址<br><img src="/image/git1.png" alt="git1"></p>
<h2 id="使用source-tree"><a href="#使用source-tree" class="headerlink" title="使用source tree"></a>使用source tree</h2><p>1.在 SourceTree 里打开对应的代码库。<br>2.点击右上角设置按钮<br><img src="/image/git2.png" alt="git2"><br>3.点击选择当前远程仓库路径,编辑和移除按钮恢复可用，点击“移除”<br>4.点击“新建”，“远程(仓库)名称”填入“origin”，“URL/路径”填入项目在Git服务器的地址<br>5.点击“确定”<br>6.点击设置页面”确定”<br><img src="/image/git3.png" alt="git3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;链接虚拟机基本步骤&quot;&gt;&lt;a href=&quot;#链接虚拟机基本步骤&quot; class=&quot;headerlink&quot; title=&quot;链接虚拟机基本步骤&quot;&gt;&lt;/a&gt;链接虚拟机基本步骤&lt;/h1&gt;&lt;p&gt;1.打开git bash&lt;br&gt;2.执行命令“ssh root@环境地址” 例：ss
    
    </summary>
    
    
      <category term="git" scheme="http://yoohannah.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>赫夫曼编码</title>
    <link href="http://yoohannah.github.io/post/algorithm/Huffman.html"/>
    <id>http://yoohannah.github.io/post/algorithm/Huffman.html</id>
    <published>2017-02-12T07:33:37.000Z</published>
    <updated>2017-02-18T01:43:01.215Z</updated>
    
    <content type="html"><![CDATA[<p>赫夫曼编码可以构造出一种不等长的二进制，使编码后的电文长度最短，且保证不产生二义性</p>
<h1 id="赫夫曼树"><a href="#赫夫曼树" class="headerlink" title="赫夫曼树"></a>赫夫曼树</h1><h2 id="相关定义"><a href="#相关定义" class="headerlink" title="相关定义"></a>相关定义</h2><p>权：树结点间的连线相关的数<br>结点的路径长度：从根结点到该结点的路径上的连接数<br>树的路径长度：树中每个叶子结点的路径长度之和<br>结点带权路径长度：结点的路径长度与结点权值的乘积<br>树的带权路径长度(WPL)：树中所有叶子结点的带权路径长度之和。    WPL越小,说明二叉树性能越优。</p>
<h2 id="构造赫夫曼树"><a href="#构造赫夫曼树" class="headerlink" title="构造赫夫曼树"></a>构造赫夫曼树</h2><p>1.在森林中选出两颗根结点的权值最小的二叉树，权值小的放左边，权值大的放右边<br>2.合并两颗选出的二叉树：增加一个新结点n作为新二叉树的根，权值为左右孩子权值之和<br>3.回到森林中，选出权值最小的根结点，与刚刚形成的结点n比较，小的放左边，大的放右边<br>4.返回步骤二，直到森林中的树被选完</p>
<p><div style="margin-bottom: 125px"><br> <img src="/image/tree7.png" style="width: 300px;height: 100px;" alt="图片名称" align="left"><br> <img src="/image/tree8.png" alt="图片名称" align="right" style="width: 300px;height: 180px;margin-top: -30px"><br></div></p>
<h1 id="赫夫曼编码"><a href="#赫夫曼编码" class="headerlink" title="赫夫曼编码"></a>赫夫曼编码</h1><h2 id="一些名词"><a href="#一些名词" class="headerlink" title="一些名词"></a>一些名词</h2><p>定长编码：规定位数表示字符<br>变长编码：单个编码长度不一字，可以根据整体出现频率来调节<br>前缀码：没有任何码字是其他码字的前缀</p>
<h2 id="赫夫曼编码思路"><a href="#赫夫曼编码思路" class="headerlink" title="赫夫曼编码思路"></a>赫夫曼编码思路</h2><p>1.根据输入字符串，统计字符出现次数，建立优先级队列<br>2.根据优先级队列建立输入字符串的赫夫曼树<br>3.遍历赫夫曼树，左1右0，建立字符编码表<br>4.编码encode:根据字符编码形成字符串编码<br>5.解码decode：根据编码字符串遍历赫夫曼树，左0右1，找到叶子结点的字符，从而解码字符。<br><a href="">代码待写</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;赫夫曼编码可以构造出一种不等长的二进制，使编码后的电文长度最短，且保证不产生二义性&lt;/p&gt;
&lt;h1 id=&quot;赫夫曼树&quot;&gt;&lt;a href=&quot;#赫夫曼树&quot; class=&quot;headerlink&quot; title=&quot;赫夫曼树&quot;&gt;&lt;/a&gt;赫夫曼树&lt;/h1&gt;&lt;h2 id=&quot;相关定义&quot;&gt;&lt;a
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>利用checkbox进行各种勾选</title>
    <link href="http://yoohannah.github.io/post/knowledge/checkbox.html"/>
    <id>http://yoohannah.github.io/post/knowledge/checkbox.html</id>
    <published>2017-02-12T07:33:37.000Z</published>
    <updated>2017-02-18T02:51:27.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;div ng-repeat=&quot;item in labels track by $index&quot; style=&quot;padding-left: 50px&quot;&gt;</div><div class="line">  &lt;label class=&quot;mt-checkbox mt-checkbox-single mt-checkbox-outline&quot; &gt;&lt;input  type=&quot;checkbox&quot; ng-model=&quot;item.isSelected&quot; ng-click=&quot;updateSingelSelection($index,labels)&quot; /&gt;&lt;span&gt;&lt;/span&gt;&lt;/label&gt;</div><div class="line">  &lt;label&gt;&#123;&#123;item.name&#125;&#125;&lt;/label&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>val1为选定值的key,或者叫序号,val2为选项集合</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> $scope.updateSingelSelection = <span class="function"><span class="keyword">function</span>(<span class="params">val1, val2</span>) </span>&#123;</div><div class="line">  $scope.label = val2[val1];  												<span class="comment">//对选定的值做处理</span></div><div class="line">  angular.forEach(val2, <span class="function"><span class="keyword">function</span>(<span class="params">x, index</span>) </span>&#123;				 <span class="comment">//处理其他选项为未选状态</span></div><div class="line">    <span class="keyword">if</span> (val1 != index)</div><div class="line">      x.isSelected = <span class="literal">false</span>;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/checkbox1.png" alt="checkbox1"></p>
<h1 id="多选"><a href="#多选" class="headerlink" title="多选"></a>多选</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;portlet-body dataTables_wrapper&quot; style=&quot;margin: -20px 20px 0px 20px;&quot; ng-if=&quot;detaildata.goods.length&gt;0&quot;&gt;</div><div class="line">	&lt;div class=&quot;table-scrollable&quot;&gt;</div><div class="line">		&lt;table class=&quot;table table-bordered table-hover no-footer&quot;&gt;</div><div class="line">			&lt;thead&gt;</div><div class="line">				&lt;tr role=&quot;row&quot; class=&quot;heading&quot;&gt;</div><div class="line">					&lt;th&gt;ID&lt;/th&gt;</div><div class="line">					&lt;th&gt;</div><div class="line">						&lt;label class=&quot;mt-checkbox mt-checkbox-single mt-checkbox-outline&quot;&gt;&lt;input type=&quot;checkbox&quot; ng-model=&quot;detaildata.goods.allchecked&quot; ng-change=&quot;selectall()&quot;/&gt;&lt;span&gt;&lt;/span&gt;&lt;/label&gt;</div><div class="line">					&lt;/th&gt;</div><div class="line">				&lt;/tr&gt;</div><div class="line">			&lt;/thead&gt;</div><div class="line">			&lt;tbody&gt;</div><div class="line">				&lt;tr role=&quot;row&quot; ng-repeat=&quot;item in detaildata.goods track by $index&quot;&gt;</div><div class="line">					&lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</div><div class="line">					&lt;td&gt;</div><div class="line">						&lt;label class=&quot;mt-checkbox mt-checkbox-single mt-checkbox-outline&quot;&gt;&lt;input  type=&quot;checkbox&quot; ng-model=&quot;item.checked&quot; ng-click=&quot;UpdateSelection($index)&quot;/&gt;&lt;span&gt;&lt;/span&gt;&lt;/label&gt;</div><div class="line">					&lt;/td&gt;</div><div class="line">				&lt;/tr&gt;</div><div class="line">			&lt;/tbody&gt;</div><div class="line">		&lt;/table&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> $scope.UpdateSelection = function(index)&#123;</div><div class="line">    if($scope.detaildata.goods[index].checked)&#123;</div><div class="line"></div><div class="line">      tempdata2.push($scope.detaildata.goods[index]); 					//处理选中项</div><div class="line"></div><div class="line">      if(tempdata2.length == $scope.detaildata.goods.length)&#123;   //判断是否满足全选条件，						$scope.detaildata.goods.allchecked = true;                //满足则将全选按钮设置为勾选状态</div><div class="line">      &#125;else&#123;</div><div class="line">        $scope.detaildata.goods.allchecked = false;             //否则为未选状态</div><div class="line">      &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">      $scope.alldata.goods[index].checked = false; //全选按钮设为</div><div class="line">      angular.forEach(tempdata2, function(list,num)&#123;</div><div class="line">        if($scope.detaildata.goods[index].deal_id == list.deal_id)&#123;</div><div class="line">         tempdata2.splice(num,1);</div><div class="line">         $scope.detaildata.goods.allchecked = false;</div><div class="line">         return;</div><div class="line">       &#125;</div><div class="line">     &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><div style="margin-bottom: 250px"><br> <img src="/image/checkbox2.png" style="width: 150px;height: 300px;margin-left: 80px" alt="图片名称" align="left"><br> <img src="/image/checkbox.png" alt="图片名称" align="right" style="width: 150px;height: 300px;margin-top: -30px;margin-right: 80px"><br></div></p>
<h1 id="全选"><a href="#全选" class="headerlink" title="全选"></a>全选</h1><p>注意：若全选按钮放在表格里，那全选按钮的绑定值S也一定要是整个表格绑定值A的一个属性,即，A.S是全选按钮绑定值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$scope.selectall = function()&#123;</div><div class="line"> if($scope.detaildata.goods.allchecked)&#123;</div><div class="line">  for(var i = 0;i &lt; $scope.detaildata.goods.length;i++)&#123;</div><div class="line">    $scope.detaildata.goods[i].checked = true;       //把每个备选项处理为已选状态</div><div class="line">    var num = 0;</div><div class="line">    for(var j = 0;j &lt; tempdata2.length;j++)&#123;</div><div class="line">      if($scope.detaildata.goods[i].deal_id != tempdata2[j].deal_id)&#123;</div><div class="line">        num = num+1;</div><div class="line">      &#125;else&#123;</div><div class="line">        num = num;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    if(num == tempdata2.length)&#123;</div><div class="line">      tempdata2.push($scope.detaildata.goods[i]); //将所有为选择的数据处理到临时集合</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;else&#123;</div><div class="line">  for(var i = 0;i &lt; $scope.detaildata.goods.length;i++)&#123;</div><div class="line">    $scope.detaildata.goods[i].checked = false; //把每个备选项处理为未选状态</div><div class="line">  &#125;</div><div class="line">  tempdata2 = []; //清空临时集合</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单选&quot;&gt;&lt;a href=&quot;#单选&quot; class=&quot;headerlink&quot; title=&quot;单选&quot;&gt;&lt;/a&gt;单选&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>树、森林和二叉树的转换与遍历</title>
    <link href="http://yoohannah.github.io/post/algorithm/treetransform.html"/>
    <id>http://yoohannah.github.io/post/algorithm/treetransform.html</id>
    <published>2017-02-12T06:38:37.000Z</published>
    <updated>2017-02-12T07:32:30.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树转化为二叉树"><a href="#树转化为二叉树" class="headerlink" title="树转化为二叉树"></a>树转化为二叉树</h1><div style="margin-bottom: 125px"><br> <img src="/image/tree3.png" style="width: 300px;height: 180px;" alt="图片名称" align="left"><br> <img src="/image/tree4.png" alt="图片名称" align="right" style="width: 300px;height: 180px;margin-top: -30px"><br></div>

<p>1.在树中所有的兄弟结点之间加一连线<br>2.对每个结点，除了保留与其长子的连线外，去掉该结点与其他孩子的连线<br>3.调整位置结构（顺时针旋转一定角度），变成只有左子树的二叉树</p>
<h1 id="森林转化为二叉树"><a href="#森林转化为二叉树" class="headerlink" title="森林转化为二叉树"></a>森林转化为二叉树</h1><p><div style="margin-bottom: 125px"><br><img src="/image/tree5.png" width="300" height="200" alt="图片名称" align="left"><br> <img src="/image/tree6.png" alt="图片名称" align="right" style="width: 300px;height: 180px;margin-top: -30px"><br> </div><br>1.先将森林中的每颗树变为二叉树<br>2.再将各二叉树的根结点视为兄弟从左至右连在一起<br>3调整位置结构，形成拥有左右子树的二叉树</p>
<h1 id="二叉树转化树、森林"><a href="#二叉树转化树、森林" class="headerlink" title="二叉树转化树、森林"></a>二叉树转化树、森林</h1><p>1.若结点x是其双亲y的左孩子，则把x的右孩子，右孩子的右孩子，……，都与y用连线连起来<br>2.去掉所有双亲到右孩子之间的连线<br>注意：如二叉树有右孩子则将转化为森林，反之转化为普通树</p>
<h1 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h1><p><img src="/image/tree3.png" alt="tree3"><br>1.先根遍历<br>先访问树的根结点，然后再依次先跟遍历每颗子树<br>ABEFCGDHIJ<br>2.后根遍历<br>先依次遍历每颗子树，然后再访问根结点<br>EFBGCHIJDA</p>
<h1 id="森林遍历"><a href="#森林遍历" class="headerlink" title="森林遍历"></a>森林遍历</h1><p>1.前序遍历：按树的先根遍历<br>2.后续遍历：按树的后跟遍历</p>
<p>小结：<br>树、森林的前根遍历和二叉树前序遍历结果相同，<br>树、森林的后根遍历和二叉树的中序遍历相同,<br>因此对于树、森林的遍历可以转化为二叉树的遍历</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树转化为二叉树&quot;&gt;&lt;a href=&quot;#树转化为二叉树&quot; class=&quot;headerlink&quot; title=&quot;树转化为二叉树&quot;&gt;&lt;/a&gt;树转化为二叉树&lt;/h1&gt;&lt;div style=&quot;margin-bottom: 125px&quot;&gt;&lt;br&gt; &lt;img src=&quot;/ima
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>线索二叉树</title>
    <link href="http://yoohannah.github.io/post/algorithm/Cluebinarytree.html"/>
    <id>http://yoohannah.github.io/post/algorithm/Cluebinarytree.html</id>
    <published>2017-02-11T09:47:37.000Z</published>
    <updated>2017-02-12T06:37:15.771Z</updated>
    
    <content type="html"><![CDATA[<p>节省叶子结点空指针浪费的空间，来记录该结点按遍历顺序的前驱后继<br>只有中序遍历满足每隔一个结点会出现一个浪费空间的结点</p>
<p>结点由五个属性组成；{<br>  lchild:取决于ltag<br>  ltag:为0时，lchild指向该结点左孩子，为1时lchild指向该结点的前驱<br>  data:该结点数据<br>  rchild:取决于rtag<br>  rtag:为0时，rchild指向该结点右孩子，为1时rchild指向该结点的后继<br>}</p>
<p><a href="">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;节省叶子结点空指针浪费的空间，来记录该结点按遍历顺序的前驱后继&lt;br&gt;只有中序遍历满足每隔一个结点会出现一个浪费空间的结点&lt;/p&gt;
&lt;p&gt;结点由五个属性组成；{&lt;br&gt;  lchild:取决于ltag&lt;br&gt;  ltag:为0时，lchild指向该结点左孩子，为1时lchi
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://yoohannah.github.io/post/algorithm/Binarytree.html"/>
    <id>http://yoohannah.github.io/post/algorithm/Binarytree.html</id>
    <published>2017-02-11T02:14:37.000Z</published>
    <updated>2017-02-12T06:37:11.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>定义：是n(n&gt;=0)个结点的有限集合，该集合或者为空集(空二叉树)，或者由一个<br>根节点和两颗不互相交的、分别称为根的左子树和右子树的二叉树<br>特点：<br>-每个结点最多有两颗子树，不存在度大于2的结点<br>-左右子树有顺序，次序不能颠倒，即使只有一颗子树也要区分它是左子树还是右子树</p>
<h2 id="五种基本形态："><a href="#五种基本形态：" class="headerlink" title="五种基本形态："></a>五种基本形态：</h2><p>空二叉树<br>只有一个根节点<br>根结点只有左子树<br>根结点只有右子树<br>根结点既有左子树又有右子树</p>
<h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><p>1.斜树：只有左子树或只有右子树<br>2.满二叉树：该二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上<br>  –特点：<br>  1.叶子只能出现在最下一层<br>  2.非叶子结点的度一定是2<br>  3.在同样深度的二叉树中，满二叉树的节点个数一定最多，同时叶子也最多<br>3.完全二叉树：对一颗具有N个结点的二叉树按层序编号，如果编号为i(i&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的<br>结点位置完全相同，则这棵树称为完全二叉树<br>–特点：<br>1.叶子结点只能出现在最下两层<br>2.最下层的叶子一定集中在左部连续位置<br>3、倒数第二层，若有叶子结点，一定都在右部连续位置<br>4.如果结点度为1，则该结点只有左孩子<br>5.同样结点数的二叉树，完全二叉树的深度最小<br>满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树</p>
<h1 id="二叉树存储结构"><a href="#二叉树存储结构" class="headerlink" title="二叉树存储结构"></a>二叉树存储结构</h1><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>用数组存储，按层序遍历对比满二叉树顺序，没有结点的位置数组在该位置填空<br><img src="/image/btree1.png" alt="btree1"></p>
<h2 id="二叉链表"><a href="#二叉链表" class="headerlink" title="二叉链表"></a>二叉链表</h2><p>每个结点包含一个数据域和两个指针域，两个指针分别指向该结点左右孩子结点<br><img src="/image/btree2.png" alt="btree2"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef struct BiTNode</div><div class="line">&#123;</div><div class="line">ElemType data;</div><div class="line">struct BiTNode *lchild,*rchild;</div><div class="line">&#125;BiTNode,8BiTree;</div></pre></td></tr></table></figure></p>
<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><p><img src="/image/btree3.png" alt="btree3"><br>从根结点出发，按照某种次序访问二叉树中所有结点，使每个结点被访问一次且仅被访问一次<br>1.前序遍历：根左右<br>若二叉树为空，则空操作返回;否则先访问根结点，然后前序遍历左子树，再前序遍历右子树<br>a.先访问根结点，然后访问根结点的左孩子<br>b.将根结点的左孩子视作子树根结点,继续访问其左孩子，再以这个左孩子结点为根再访问其左孩子直到叶结点<br>c.访问完该叶结点后，再访问该叶结点双亲的右孩子，<br>d.如果没有右孩子，则该子树访问完毕，继续访问该结点双亲的双亲的右孩子，再以该右孩子为根继续从步骤a开始访问<br>核心：从整棵树的根结点开始，每次将左孩子看成子树根结点,从上到下，从左到右<br>ABDHIEJCFKG<br>2.中序遍历 ：左根右<br>若二叉树为空，则空操作返回;否则从根节点根结点开始(并不是先访问根结点)，然后中序遍历左子树，然后访问根结点，再中序遍历右子树<br>核心：无论什么级别的子树树都从最左端叶结点开始，按左孩子，双亲，右孩子顺序遍历，从下到上，从左到右<br>HDIBEJAFKCG<br>3.后序遍历 ：左右根<br>若二叉树为空，则空操作返回;否则从左到右先叶子结点的方式遍历左右子树，最后访问根结点<br>核心：从最左端叶结点开始，按左孩子，右孩子，双亲顺序遍历，从左到右，从下到上<br>HIDJEBKFGCA<br>4.层序遍历<br>若二叉树为空，则空操作返回;否则从根节点开始，按层依次往下，每层从左到右依次遍历</p>
<h1 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h1><p>性质一：在二叉树的第i层上至多有2^(i-1)个结点(i&gt;=1)<br>性质二：深度为K的二叉树至多有2^K-1个结点(K&gt;=1)<br>性质三：对于任何一颗二叉树T，如果其终端结点数为n0,度为2的结点数为n2,则n0=n2+1<br>性质四：具有n个结点的完全二叉树的深度为log2n取下限加1<br>性质五：如果对一颗有n个结点的完全二叉树(其深度为log2n取下限加1)的结点按层序编号对任一结点i(1&lt;=i&lt;=n)有以下性质<br>        如果i=1,则结点i是二叉树的根，无双亲;如果i&gt;1，则其双亲是结点i/2取下限<br>        如果2i&gt;n,则结点i无左孩子(结点i为叶子结点);否则其左孩子是结点2i<br>        如果2i+1&gt;n,则结点i无右孩子(结点i为叶子结点);否则其右孩子是结点2i+1</p>
<p>计算：<br>输出指定结点在该树中所在的层数<br><img src="/image/btree4.png" alt="btree4"><br>[未完成]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var str=&quot;AB DEC #&quot;;//约定前序遍历输入</div><div class="line">var btree = &#123;</div><div class="line">  data:&apos;&apos;,</div><div class="line">  lchild:&#123;&#125;,</div><div class="line">  rchild:&#123;&#125;</div><div class="line">&#125;;</div><div class="line">console.log(btree);</div><div class="line">function creatbtree(num,item)&#123;</div><div class="line">  console.log(str[num])</div><div class="line">  if(str[num]==&quot;#&quot;);</div><div class="line">  &#123;</div><div class="line">  return</div><div class="line">  &#125;</div><div class="line">  if(str[num] == &quot; &quot;)&#123;</div><div class="line">    item = null;</div><div class="line">  &#125;else&#123;</div><div class="line">    item.data = str[num];</div><div class="line">    num+=1;</div><div class="line">    item.lchild =&#123;</div><div class="line">      data:&apos;&apos;,</div><div class="line">      lchild:&#123;&#125;,</div><div class="line">      rchild:&#123;&#125;</div><div class="line">    &#125;  </div><div class="line">    creatbtree(num,item.lchild);</div><div class="line">    num+=1;</div><div class="line">    item.rchild =&#123;</div><div class="line">      data:&apos;&apos;,</div><div class="line">      lchild:&#123;&#125;,</div><div class="line">      rchild:&#123;&#125;</div><div class="line">    &#125;</div><div class="line">    creatbtree(num,item.rchild);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">creatbtree(0,btree);</div><div class="line">console.log(btree.rchild)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于树的一些定义</title>
    <link href="http://yoohannah.github.io/post/algorithm/tree.html"/>
    <id>http://yoohannah.github.io/post/algorithm/tree.html</id>
    <published>2017-02-08T13:47:37.000Z</published>
    <updated>2017-02-11T03:24:31.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p><img src="/image/tree1.png" alt="tree1"><br>定义：n(n&gt;=0)个结点的有限集。当n=0时称为空树，在任意一颗非空树中：<br>——有且仅有一个特定的结点称为根<br>——当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交]的有限集T1、T2…Tm,其中每一个集合本身又是一颗树，并且称为根的子树<br>结点：图中每一个圆圈称为树的一个结点<br>结点的度：结点拥有的子树数称为该结点的度<br>树的度：树内各结点度的最大值<br>叶结点/终端结点：度为0的结点<br>分支结点/非终端结点：度不为0的结点<br>内部结点：分支结点中除根节点以外的结点<br>结点的孩子：D是B的孩子<br>孩子的双亲：B是D的双亲<br>兄弟：D和E互称为兄弟<br>结点的祖先：从根到该结点所经过分支上的所有结点<br>结点的层次：从根开始定在一起,根为第一层，根的孩子为第二层<br>树的深度/高度：树中结点的最大层次,图中树的深度为3<br>有序树:如果将树中结点的各子树看成从左至右是有次序的不能互换的，则称该树为有序树，否则称为无序树<br>森林:m(m&gt;=0)棵互不相交的树的集合。对树中每个结点而言，其子树的集合即为森林</p>
<p><img src="/image/tree2.png" alt="tree2"><br>以下遍历采用层序遍历</p>
<h1 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h1><p>每个结点由该结点数据和该结点双亲的下标组成,根结点双亲下标赋值为-1</p>
<table>
<thead>
<tr>
<th style="text-align:center">下标</th>
<th style="text-align:center">data</th>
<th style="text-align:center">parent</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">A</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">C</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">D</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">E</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">F</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">G</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">K</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">H</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">I</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">J</td>
<td style="text-align:center">4</td>
</tr>
</tbody>
</table>
<h1 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h1><p>每个结点由该结点数据和该结点双亲的下标、该结点孩子的下标组成,根结点双亲下标赋值为-1<br>无孩子则孩子属性赋值-1</p>
<table>
<thead>
<tr>
<th style="text-align:center">下标</th>
<th style="text-align:center">data</th>
<th style="text-align:center">parent</th>
<th style="text-align:center">children</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">A</td>
<td style="text-align:center">-1</td>
<td style="text-align:center">1,2,3</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">C</td>
<td style="text-align:center">0</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">D</td>
<td style="text-align:center">0</td>
<td style="text-align:center">5,6</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">E</td>
<td style="text-align:center">1</td>
<td style="text-align:center">8,9,10</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">F</td>
<td style="text-align:center">3</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">G</td>
<td style="text-align:center">3</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">K</td>
<td style="text-align:center">6</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">H</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">I</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">J</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-1</td>
</tr>
</tbody>
</table>
<h1 id="兄弟表示法"><a href="#兄弟表示法" class="headerlink" title="兄弟表示法"></a>兄弟表示法</h1><p>每个结点由该结点数据和该结点双亲的下标、该结点兄弟的下标组成,根结点双亲下标赋值为-1<br>无兄弟则兄弟属性赋值-1</p>
<table>
<thead>
<tr>
<th style="text-align:center">下标</th>
<th style="text-align:center">data</th>
<th style="text-align:center">parent</th>
<th style="text-align:center">rightsib</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">A</td>
<td style="text-align:center">-1</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">C</td>
<td style="text-align:center">0</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">D</td>
<td style="text-align:center">0</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">E</td>
<td style="text-align:center">1</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">F</td>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">G</td>
<td style="text-align:center">3</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">K</td>
<td style="text-align:center">6</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">H</td>
<td style="text-align:center">4</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">I</td>
<td style="text-align:center">4</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">J</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-1</td>
</tr>
</tbody>
</table>
<h1 id="双亲孩子表示法"><a href="#双亲孩子表示法" class="headerlink" title="双亲孩子表示法"></a>双亲孩子表示法</h1><p>所有结点组成一个数组，每个结点包含该结点数据属性,该结点双亲属性(由双亲结点下标表示)以及第一个孩子结点的下标<br>每一个孩子结点包含下一个孩子结点的下标,用js数组实现相当于兄弟表示法</p>
<table>
<thead>
<tr>
<th style="text-align:center">下标</th>
<th style="text-align:center">data</th>
<th style="text-align:center">parent</th>
<th style="text-align:center">nextchildren</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">A</td>
<td style="text-align:center">-1</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">B</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">C</td>
<td style="text-align:center">0</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">D</td>
<td style="text-align:center">0</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">E</td>
<td style="text-align:center">1</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">F</td>
<td style="text-align:center">3</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">G</td>
<td style="text-align:center">3</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">K</td>
<td style="text-align:center">6</td>
<td style="text-align:center">-1</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">H</td>
<td style="text-align:center">4</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">I</td>
<td style="text-align:center">4</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">J</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-1</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># define MAX_TREE_SIZE 100</div><div class="line">typedef char ElemType;</div><div class="line">//孩子结点</div><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">	int child;						//孩子结点的下标</div><div class="line">	struct CTNode *next;	//指向下一个孩子结点的指针</div><div class="line">&#125;*ChildPtr;</div><div class="line"></div><div class="line">//表头结构</div><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">	ElemType data;				//存放在树中的结点数据</div><div class="line">	int parent;						//存放双亲的下标</div><div class="line">	ChildPtr firstchild;	//指向第一个孩子的指针</div><div class="line">&#125;</div><div class="line">//树结构</div><div class="line">typedef struct</div><div class="line">&#123;</div><div class="line">CTBox nodes[MAX_TREE_SIZE];//结点数组</div><div class="line">int r,n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>js实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tree=[];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)&#123;</div><div class="line">  <span class="keyword">var</span> prior = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">var</span> next = [];</div><div class="line">  <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</div><div class="line">    prior =<span class="number">-1</span>;</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;i&lt;<span class="number">4</span>)&#123;</div><div class="line">    prior = <span class="number">0</span>;</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">4</span>)&#123;</div><div class="line">    prior = <span class="number">1</span>;</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">5</span> || i==<span class="number">6</span>)&#123;</div><div class="line">    prior = <span class="number">3</span>;</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&gt;<span class="number">6</span> &amp;&amp; i&lt;<span class="number">10</span>)&#123;</div><div class="line">    prior = <span class="number">4</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    prior = <span class="number">6</span>;</div><div class="line">  &#125;</div><div class="line">  tree.push(&#123;</div><div class="line">    <span class="attr">data</span>:i,</div><div class="line">    <span class="attr">parent</span>:prior,</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)&#123;</div><div class="line"> <span class="keyword">var</span> children=[];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j =<span class="number">0</span>;j&lt;<span class="number">11</span>;j++)&#123;</div><div class="line">   <span class="keyword">if</span>(tree[j].parent == i)&#123;</div><div class="line">     children.push(j);</div><div class="line">   &#125;</div><div class="line">  &#125;</div><div class="line">  tree[i].children = children.slice();</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(tree);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/image/tree1.png&quot; alt=&quot;tree1&quot;&gt;&lt;br&gt;定义：n(n&amp;gt;=0)个结点的有限集。当n=0时称为空树
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>字符串(串结构)</title>
    <link href="http://yoohannah.github.io/post/algorithm/string.html"/>
    <id>http://yoohannah.github.io/post/algorithm/string.html</id>
    <published>2017-02-07T14:54:37.000Z</published>
    <updated>2017-02-11T02:17:22.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>定义：串是由0个或多个字符组成的有限序列，又名字符串<br>1.空串：没有字符，直接由””表示<br>2.主串与子串：”hello”是”helloworld”的子串,”helloworld”是”hello”主串<br>3.字符串比较：比较字符串里每个字符的ASCII码大小,没有意义，一般看是否相等<br>4.存储结构<br>    顺序存储：用一组地址连续的存储单元来存储串中的字符序列，<br>    按照预定义大小，为每个定义的字符串变量分配一个固定长度的存储区，一般用定长数组来定义<br>  链式存储：不常用<br>5.BF算法：<br>    有两个字符串S和T，长度为N和M，首先S[1]和T[1]比较，若相等，则再比较S[2]和T[2],一直到T[M-1]为止;<br>    若S[1]和T[1]不等，则T向右移动一个字符的位置，再依次进行比较<br>6.字符串模式匹配：依据BF算法,S是主串,T是子串这种定位操作即字符串模式匹配</p>
<h1 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string1=<span class="string">"hellohannahworld"</span>;</div><div class="line"><span class="keyword">var</span> string2=<span class="string">"hannah"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BF</span>(<span class="params">str1,str2</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> j = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(i&lt;str2.length)&#123;</div><div class="line">    <span class="keyword">while</span>(j&lt;str1.length)&#123;</div><div class="line">      <span class="keyword">if</span>(str2[i]==str1[j])&#123;</div><div class="line">        <span class="keyword">if</span>(i==str2.length<span class="number">-1</span>)&#123;</div><div class="line">          <span class="keyword">var</span> temp=j-str2.length+<span class="number">1</span>;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">"字符串匹配的起始位置为"</span>+temp);</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        j++;</div><div class="line">        i++;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</div><div class="line">          i=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</div><div class="line">          j++</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"两字符串一点也不匹配!"</span>)</div><div class="line">  <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">BF(string1,string2);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;定义：串是由0个或多个字符组成的有限序列，又名字符串&lt;br&gt;1.空串：没有字符，直接由””表示&lt;br&gt;2.主串与子串：”hello”
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>使用Git Bash建立本地仓库并同步github仓库</title>
    <link href="http://yoohannah.github.io/post/knowledge/gitrepository.html"/>
    <id>http://yoohannah.github.io/post/knowledge/gitrepository.html</id>
    <published>2017-02-05T02:43:04.465Z</published>
    <updated>2017-02-03T06:36:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h1><p>1.选择仓库存放位置,新建文件夹,用作本地仓库<br>2.打开Git bash,cd 切换路径到该文件夹<br>3.执行以下命令<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">echo "该项目简短说明" &gt;&gt; README.md     ##输入“该项目简短说明”内容到README.md文件</div><div class="line">git init</div><div class="line">git add README.md                      ##将提交的文件(README.md)的信息添加到索引库</div><div class="line">git commit -m "第一次提交"             ##依据索引库中的内容来进行文件的提交</div><div class="line">																			 ##同时提交更改描述“第一次提交”</div></pre></td></tr></table></figure></p>
<p>以上步骤完成本地仓库建立和将文件提交到本地仓库的工作</p>
<h1 id="建立远成仓库"><a href="#建立远成仓库" class="headerlink" title="建立远成仓库"></a>建立远成仓库</h1><p>1.登录github账号,点击右上角“+”,选择“New repository”<br>2.填写仓库名称,简单描述<br>3.为避免与本地仓库READMD.md冲突，初始化时不勾选“Initialize this repository with a README”<br>4.点击“Create repository”,生成远程仓库</p>
<h1 id="同步仓库"><a href="#同步仓库" class="headerlink" title="同步仓库"></a>同步仓库</h1><p>1.点击“Clone or download”, 复制远程仓库地址<br>2.执行以下代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin 远程仓库地址     ##将本地仓库推送到远成仓库</div><div class="line">git push -u origin master              ##将本地仓库推送到远程分支</div></pre></td></tr></table></figure></p>
<p>以上步骤即完成本地仓库同步到远程仓库</p>
<p>执行git remote时，<br>若出现提示出错信息：fatal: remote origin already exists.<br>则先输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote rm origin ##删除远程仓库</div></pre></td></tr></table></figure></p>
<p>再执行推送语句 “git remote add origin 远程仓库地址”</p>
<h1 id="更新远成仓库"><a href="#更新远成仓库" class="headerlink" title="更新远成仓库"></a>更新远成仓库</h1><p>若对本地仓库进行了修改<br>git add &lt;文件名&gt; 只是添加一个文件<br>git add .  可添加全部仓库文件<br>若执行“git add .”时，总出现警告：warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX.<br>可执行语句 “git config core.autocrlf false”<br>添加完文件后执行提交操作<br>git commit -m “”<br>最后推送到远程仓库<br>git push -u origin master</p>
<p>[资源共享]（<a href="http://www.cnblogs.com/len0031/p/5831571.html" target="_blank" rel="external">http://www.cnblogs.com/len0031/p/5831571.html</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;建立本地仓库&quot;&gt;&lt;a href=&quot;#建立本地仓库&quot; class=&quot;headerlink&quot; title=&quot;建立本地仓库&quot;&gt;&lt;/a&gt;建立本地仓库&lt;/h1&gt;&lt;p&gt;1.选择仓库存放位置,新建文件夹,用作本地仓库&lt;br&gt;2.打开Git bash,cd 切换路径到该文件夹&lt;b
    
    </summary>
    
    
      <category term="git" scheme="http://yoohannah.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>循环队列</title>
    <link href="http://yoohannah.github.io/post/algorithm/loopqueue.html"/>
    <id>http://yoohannah.github.io/post/algorithm/loopqueue.html</id>
    <published>2017-02-02T04:47:37.000Z</published>
    <updated>2017-02-07T14:43:29.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="假溢出"><a href="#假溢出" class="headerlink" title="假溢出"></a>假溢出</h1><p><img src="/image/queue9.png" alt="queue9"><br>循环队列的容量是固定的，并且它的对头和队尾指针都可以随着元素出入队列而发生改变，<br>这样循环队列逻辑上就好像是一个环形存储空间,但在实际内存中，是不可能有真正的环形存储区的，<br>我们只是用顺序表模拟逻辑上的循环<br>因此,为防止发生假溢出,当我们采用循环队列时,front和rear不断加1,即使超出了地址范围，<br>也会自动从头开始,判断溢出，可采用取模处理<br>(rear+1)%QueueSize<br>(front+1)%QueueSize<br>取模即取余数，取得的值永远不会大于除数</p>
<h1 id="定义一个循环队列"><a href="#定义一个循环队列" class="headerlink" title="定义一个循环队列"></a>定义一个循环队列</h1><p><img src="/image/queue12.png" alt="queue12"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># define MAXSIZE 100</div><div class="line">typedef struct&#123;</div><div class="line">	ElemType *base;	##存放内存分配基地址，也可以用数组存放</div><div class="line">	int front;</div><div class="line">	int rear;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="初始化一个循环队列"><a href="#初始化一个循环队列" class="headerlink" title="初始化一个循环队列"></a>初始化一个循环队列</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">initQueue(cyclQueue *q)&#123;</div><div class="line">	q-&gt;base = (ElemType *)malloc(MAXSIZE sizeof(ElemType));</div><div class="line">	if(!q-&gt;base)&#123;</div><div class="line">	exit(0);</div><div class="line">	&#125;</div><div class="line">	q-&gt;front = q-&gt;rear = 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="入队列操作"><a href="#入队列操作" class="headerlink" title="入队列操作"></a>入队列操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">insertQueue(cyclQueue *q,ElemType e)&#123;</div><div class="line">	if((q-&gt;rear+1)%MAXSIZE == q-&gt;front)&#123;</div><div class="line">	return;	##队列已满</div><div class="line">	&#125;</div><div class="line">	q-&gt;base[q-&gt;rear] = e;</div><div class="line">	q-&gt;rear = (q-&gt;rear+1)%MAXSIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="出队列操作"><a href="#出队列操作" class="headerlink" title="出队列操作"></a>出队列操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DeleteQueue(cyclQueue *q,ElemType e)&#123;</div><div class="line">	if(q-&gt;rear == q-&gt;front)&#123;</div><div class="line">	return;	##队列为空</div><div class="line">	&#125;</div><div class="line">	*e = q-&gt;base[q-&gt;front];</div><div class="line">	q-&gt;front = (q-&gt;front+1)%MAXSIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;假溢出&quot;&gt;&lt;a href=&quot;#假溢出&quot; class=&quot;headerlink&quot; title=&quot;假溢出&quot;&gt;&lt;/a&gt;假溢出&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/image/queue9.png&quot; alt=&quot;queue9&quot;&gt;&lt;br&gt;循环队列的容量是固定的，并且它的对头和队
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://yoohannah.github.io/post/algorithm/kmp.html"/>
    <id>http://yoohannah.github.io/post/algorithm/kmp.html</id>
    <published>2017-02-02T04:34:37.000Z</published>
    <updated>2017-02-15T14:31:16.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h1><p>经推导发现,进行模式匹配时,子串的移位规律与主串内容无关，与子串的内容有关,<br>因此根据子串的内容,生成基于子串的next数组，用来存放在对应位置如果发生失配,<br>应该将子串的哪个位置移动到失配位置<br>1.失配位置的前缀：永远是子串第一位<br>2.失配位置的后缀：失配位置的前一位<br>3.失配位置的前后缀相同位数：<br>从第一位开始的n位和从后缀开始倒数的n位相同,但前缀连续长度最长不能包含后缀那一位,<br>后缀也不能包含前缀,重叠也没关系,就说失配位置的前缀和后缀有n位相同<br>例：<br>ababc<br>若在倒数第二位的b位置(位置4)失配，则位置4的前缀是位置1的a,后缀是位置3的a,<br>从位置1和位置3开始,二者只有一位相同，则前后缀有1为相同,<br>若在最后一位位置5失配,前缀a虽然和后缀b不相同，但前缀连续两位ab和后缀连续两位ab相同<br>则c的前后缀有两位相同<br>ssssb<br>若在b位置失配,前缀连续sss,后缀连续sss,虽然重叠位置2和位置3的s,但前后缀相同位数为3<br>4.next数组值<br>失配位置的next数组值 = 失配位置的前后缀相同位数 + 1<br>特殊情况:子串位置1的next数组值为0,位置2的next数组值为1<br>例：</p>
<table>
<thead>
<tr>
<th>T:</th>
<th style="text-align:right">a</th>
<th style="text-align:right">b</th>
<th style="text-align:right">a</th>
<th style="text-align:right">b</th>
<th style="text-align:right">a</th>
<th style="text-align:right">a</th>
<th style="text-align:right">a</th>
<th style="text-align:right">b</th>
<th style="text-align:right">a</th>
</tr>
</thead>
<tbody>
<tr>
<td>下标:</td>
<td style="text-align:right">1</td>
<td style="text-align:right">2</td>
<td style="text-align:right">3</td>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
<td style="text-align:right">6</td>
<td style="text-align:right">7</td>
<td style="text-align:right">8</td>
<td style="text-align:right">9</td>
</tr>
<tr>
<td>next:</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
<td style="text-align:right">1</td>
<td style="text-align:right">2</td>
<td style="text-align:right">3</td>
<td style="text-align:right">4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">2</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<p>next数组获取代码实现</p>
<table>
<thead>
<tr>
<th>i后缀</th>
<th style="text-align:right">1</th>
<th style="text-align:right">2</th>
<th style="text-align:right">。</th>
<th style="text-align:right">3</th>
<th style="text-align:right">4</th>
<th style="text-align:right">5</th>
<th style="text-align:right">6</th>
<th style="text-align:right">7</th>
<th style="text-align:right">。</th>
<th style="text-align:right">8</th>
<th style="text-align:right">9</th>
</tr>
</thead>
<tbody>
<tr>
<td>j前缀</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
<td style="text-align:right">2</td>
<td style="text-align:right">3</td>
<td style="text-align:right">4</td>
<td style="text-align:right">2</td>
<td style="text-align:right">1</td>
<td style="text-align:right">2</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var string = "9ababaaaba"; //第一位存放字符串长度</div><div class="line">function getnext(T)&#123;</div><div class="line">  var next=[];</div><div class="line">  next[0]=T.length-1;</div><div class="line">  var i = 1;## 前缀</div><div class="line">  var j = 0;## 后缀</div><div class="line">  next[1] = 0;</div><div class="line">  while(i&lt;T[0])&#123;</div><div class="line">    if(j==0 || T[i] == T[j])&#123;// 子串自己匹配自己</div><div class="line">      i++;</div><div class="line">      j++;</div><div class="line">      next[i]=j;</div><div class="line">    &#125;else&#123;</div><div class="line">      j = next[j]; // 自己匹配发生失配,则视前缀为子串,后缀为主串,将前缀回溯</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  console.log(next);</div><div class="line">&#125;</div><div class="line">getnext(string);</div></pre></td></tr></table></figure>
<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p><a href="https://github.com/YooHannah/algorithm/blob/master/js/KMP.js" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;next数组&quot;&gt;&lt;a href=&quot;#next数组&quot; class=&quot;headerlink&quot; title=&quot;next数组&quot;&gt;&lt;/a&gt;next数组&lt;/h1&gt;&lt;p&gt;经推导发现,进行模式匹配时,子串的移位规律与主串内容无关，与子串的内容有关,&lt;br&gt;因此根据子串的内容,生成
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="http://yoohannah.github.io/post/algorithm/queue.html"/>
    <id>http://yoohannah.github.io/post/algorithm/queue.html</id>
    <published>2017-02-02T04:34:37.000Z</published>
    <updated>2017-02-07T14:46:48.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>1.先进先出的线性表，有顺序表和链表<br>2.只允许在一段插入，另一端删除</p>
<h1 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h1><p>和栈相反，队列常用链表实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef sruct QNode&#123;</div><div class="line">	ElemType data;</div><div class="line">	struct QNode *next;</div><div class="line">&#125;QNode,*QueuePrt;</div><div class="line">typedef struct &#123;</div><div class="line">	QueuePrt front;	##队头指针指向链队列的头结点(头结点不是必要的)</div><div class="line">	QueuePrt rear;	##队尾指针指向终端结点，空队列时，front，rear都指向头结点</div><div class="line">&#125;LinkQueue;</div></pre></td></tr></table></figure></p>
<p><img src="/image/queue1.png" alt="queue1"><br><img src="/image/queue2.png" alt="queue2"></p>
<h1 id="入队列"><a href="#入队列" class="headerlink" title="入队列"></a>入队列</h1><p><img src="/image/queue3.png" alt="queue3"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">InsertQueue(LinkQueue *q,ElemType e)&#123;</div><div class="line">	QueuePrt p;</div><div class="line">	p = (QueuePtr)malloc(sizeof(QNode));</div><div class="line">	if(p==NULL)&#123;</div><div class="line">		exit(0);</div><div class="line">	&#125;</div><div class="line">	p-&gt;data = e;</div><div class="line">	p-&gt;next = NULL;</div><div class="line">	q-&gt;rear-&gt;next = p;</div><div class="line">	q-&gt;rear = p;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="出队列"><a href="#出队列" class="headerlink" title="出队列"></a>出队列</h1><p><img src="/image/queue5.png" alt="queue5"><br><img src="/image/queue6.png" alt="queue6"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">DeleteQueue(LinkQueue *q,ElemType e)&#123;</div><div class="line">	QueuePrt p;</div><div class="line">	if(q-&gt;front ==q-&gt;rear)</div><div class="line">	&#123;</div><div class="line">		retrun;</div><div class="line">	&#125;</div><div class="line">	p=q-&gt;front-&gt;next;</div><div class="line">	*e=p-&gt;data;</div><div class="line">	q-&gt;front-&gt;next = p-&gt;next;</div><div class="line">	if(q-&gt;rear ==p)&#123;</div><div class="line">		q-&gt;rear = q-&gt;front;</div><div class="line">	&#125;</div><div class="line">	free(p);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="销毁一个队列"><a href="#销毁一个队列" class="headerlink" title="销毁一个队列"></a>销毁一个队列</h1><p>由于链队列建立在内存的动态区，因此当一个队列<br>不在有用时，应当及时销毁掉，以免过多占用内存空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DestroyQueue(LinkQueue *q)&#123;</div><div class="line">	while(q-&gt;front)&#123;</div><div class="line">	q-&gt;rear = q-&gt;front-&gt;next;</div><div class="line">	free(q-&gt;front):</div><div class="line">	q-&gt;front = q-&gt;rear;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">  list.push(&#123;</div><div class="line">    <span class="attr">next</span>:i+<span class="number">1</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">list[<span class="number">4</span>].next = <span class="literal">null</span>;</div><div class="line"><span class="built_in">console</span>.log(list);</div><div class="line"><span class="comment">//入队列</span></div><div class="line"><span class="keyword">var</span> length = list.length;</div><div class="line">list.push(&#123;</div><div class="line">  <span class="attr">next</span>:<span class="literal">null</span></div><div class="line">&#125;)</div><div class="line">list[length<span class="number">-1</span>].next=length;</div><div class="line"><span class="built_in">console</span>.log(list);</div><div class="line"><span class="comment">//出队列</span></div><div class="line">list.splice(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(list);</div><div class="line"><span class="comment">//清空</span></div><div class="line">list=[];</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;p&gt;1.先进先出的线性表，有顺序表和链表&lt;br&gt;2.只允许在一段插入，另一端删除&lt;/p&gt;
&lt;h1 id=&quot;队列的链式存储结构&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://yoohannah.github.io/post/algorithm/Recursion.html"/>
    <id>http://yoohannah.github.io/post/algorithm/Recursion.html</id>
    <published>2017-02-02T04:34:37.000Z</published>
    <updated>2017-02-15T14:28:55.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>1.把有一个直接调用自己或通过一系列的调用语句间接的调用用自己的函数，称作递归函数<br>2.每个递归函数必须有一个终止调用的条件语句，否则陷入永不结束的无穷递归</p>
<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p>迭代实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var a=[];</div><div class="line">a[0] = 1;</div><div class="line">a[1] = 1;</div><div class="line">for(var i =2;i&lt;40;i++)&#123;</div><div class="line">  a[i]=a[i-1]+a[i-2];</div><div class="line">&#125;</div><div class="line">for(var j=0;j&lt;40;j++)&#123;</div><div class="line">  console.log(j,a[j]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>递归实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function fib(n)&#123;</div><div class="line">  if(n&lt;2)&#123;</div><div class="line">    return 1;</div><div class="line">  &#125;</div><div class="line">  if(n&gt;1 &amp;&amp; n&lt;40)&#123;</div><div class="line">    return fib(n-1)+fib(n-2);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">console.log(fib(4));</div></pre></td></tr></table></figure></p>
<h1 id="n-阶乘递归算法"><a href="#n-阶乘递归算法" class="headerlink" title="n!阶乘递归算法"></a>n!阶乘递归算法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function fib(n)&#123;</div><div class="line">    if(n&gt;0)&#123;</div><div class="line">      return n*fib(n-1);</div><div class="line">    &#125;else&#123;</div><div class="line">      return 1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">console.log(fib(4));</div></pre></td></tr></table></figure>
<h1 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function hanoita(n,x,y,z)&#123;</div><div class="line">  if(n==1)&#123;</div><div class="line">    console.log(x+&quot;-&gt;&quot;+z);</div><div class="line">  &#125;else&#123;</div><div class="line">    hanoita(n-1,x,z,y);</div><div class="line">    console.log(x+&quot;-&gt;&quot;+z);</div><div class="line">    hanoita(n-1,y,x,z);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">hanoita(3,&quot;x&quot;,&quot;y&quot;,&apos;z&apos;);</div></pre></td></tr></table></figure>
<h1 id="递归字符串翻转"><a href="#递归字符串翻转" class="headerlink" title="递归字符串翻转"></a>递归字符串翻转</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">"hello#"</span>;</div><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(string[count]!=<span class="string">"#"</span>)&#123;</div><div class="line">    count++;</div><div class="line">    print();</div><div class="line">  &#125;</div><div class="line">  count--;</div><div class="line">  <span class="keyword">if</span>(count&gt;<span class="number">-1</span> &amp;&amp; string[count]!=<span class="string">"#"</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(string[count]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">print();</div></pre></td></tr></table></figure>
<h1 id="折中查找法递归"><a href="#折中查找法递归" class="headerlink" title="折中查找法递归"></a>折中查找法递归</h1><p><a href="https://github.com/YooHannah/algorithm/blob/master/js/Recursion_compromisefind.js" target="_blank" rel="external">代码链接</a></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>1.迭代使用循环结构，递归使用选择结构<br>2.递归能使程序结构更清晰、简洁、容易让人理解，从而减少读懂代码的时间<br>3.大量的递归会建立函数的副本，会消耗大量时间和内存，而迭代不需要<br>4.递归函数分为调用和回退阶段，递归的回退顺序是它调用顺序的逆序</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h1&gt;&lt;p&gt;1.把有一个直接调用自己或通过一系列的调用语句间接的调用用自己的函数，称作递归函数&lt;br&gt;2.每个递归函数必须有一个终止调用的条件语句，否则
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>逆波兰表达式/后缀表达式</title>
    <link href="http://yoohannah.github.io/post/algorithm/stacklinked.html"/>
    <id>http://yoohannah.github.io/post/algorithm/stacklinked.html</id>
    <published>2017-02-02T03:48:37.000Z</published>
    <updated>2017-02-06T22:08:09.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h1><h2 id="栈的链式存储结构-1"><a href="#栈的链式存储结构-1" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h2><p><img src="/image/stack2.png" alt="stack2"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typedef struct StackNode&#123;</div><div class="line">  ElemType data;          ##存放栈的数据</div><div class="line">  struct StackNode *next;</div><div class="line">&#125;StackNode,*LinkStackPtr;</div><div class="line">typedef struct LinkStack&#123;</div><div class="line">  LinkStackPrt top;        ##top指针</div><div class="line">  int count;               ##栈元素计数器</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="栈链的入栈操作"><a href="#栈链的入栈操作" class="headerlink" title="栈链的入栈操作"></a>栈链的入栈操作</h2><p>假设元素值e的新结点是s,top为栈顶指针<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Status Push(LinkStack *s,ElemType e)&#123;</div><div class="line">  LinkStackPtr p=(LinkStackPtr)malloc(sizeof(StackNode));</div><div class="line">  p-&gt;data = e;</div><div class="line">  p-&gt;next = s-&gt;top;</div><div class="line">  s-&gt;top = p;</div><div class="line">  s-&gt;count++;</div><div class="line">  <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="栈的出栈操作"><a href="#栈的出栈操作" class="headerlink" title="栈的出栈操作"></a>栈的出栈操作</h2><p>假设变量p用来存储要删除的栈顶结点，将栈顶指针下移一位，最后释放p<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Status Pop(LinkStack *s,ElemType e)&#123;</div><div class="line">  LinkStackPtr p;</div><div class="line">  <span class="keyword">if</span>(StackEmpty(*s))&#123;</div><div class="line">  <span class="keyword">return</span> ERROR;</div><div class="line">  &#125;</div><div class="line">  *e=s-&gt;top-&gt;data;</div><div class="line">  p=s-&gt;top;</div><div class="line">  s-&gt;top = s-&gt;top-&gt;next;</div><div class="line">  free(p);</div><div class="line">  s-&gt;count--;</div><div class="line">  <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="逆波兰表达式-后缀表达式"><a href="#逆波兰表达式-后缀表达式" class="headerlink" title="逆波兰表达式/后缀表达式"></a>逆波兰表达式/后缀表达式</h1><p>正常表达式–&gt;后缀表达式<br>（1-2)x(4+5）–&gt; 1 2 - 4 5 + x<br>1.计算后缀表达式<br>主要思想是判断字符是否为运算符，若为数字，则入栈，为运算符则连续出栈两次进行运算，再将运算结果入栈<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>]</div><div class="line"><span class="keyword">var</span> stack = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;list.length;i++)&#123;</div><div class="line">  <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(list[i]))&#123;</div><div class="line">      stack.push(list[i]);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">       <span class="keyword">var</span> a = stack.pop();</div><div class="line">       <span class="keyword">var</span> b = stack.pop();</div><div class="line">       <span class="keyword">if</span>(list[i] ==<span class="string">"+"</span>)&#123;</div><div class="line">        stack.push(b+a);</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list[i] ==<span class="string">"-"</span>)&#123;</div><div class="line">        stack.push(b-a);</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list[i] ==<span class="string">"*"</span>)&#123;</div><div class="line">        stack.push(b*a);</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list[i] ==<span class="string">"/"</span>)&#123;</div><div class="line">        stack.push(b/a);</div><div class="line">       &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(stack);</div></pre></td></tr></table></figure></p>
<p>2.计算表达式转后缀表达式<br>主要思路<br>1，表达式中参与运算的数字、运算符以及小括号分割，形成待处理数组<br>2，循环判断<br>  A.若字符为数字，入栈2，<br>  B.若字符为“+”、“-”，分情况讨论<br>（1）此时栈1为空，入栈；<br>（2）栈1不为空，将“（”左括号以上的符号从栈1 pop到栈2，“（”留          在栈1，处理完后，将“+”、“-”入栈1；<br>   C若字符为“）”，将“（”以上符号从栈1 pop到栈2，“（”也pop出来<br>     但不入栈2<br>   D若字符为“/”“*”“（”直接入栈2<br>   E其他情况，非法字符，抛出异常<br>3.将栈1元素pop到栈2；<br>栈2即后缀表达式<br><a href="https://github.com/YooHannah/algorithm/blob/master/js/%E8%AE%A1%E7%AE%97%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E6%A0%88%EF%BC%89.js" target="_blank" rel="external">代码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;栈的链式存储结构&quot;&gt;&lt;a href=&quot;#栈的链式存储结构&quot; class=&quot;headerlink&quot; title=&quot;栈的链式存储结构&quot;&gt;&lt;/a&gt;栈的链式存储结构&lt;/h1&gt;&lt;h2 id=&quot;栈的链式存储结构-1&quot;&gt;&lt;a href=&quot;#栈的链式存储结构-1&quot; class=&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
</feed>
