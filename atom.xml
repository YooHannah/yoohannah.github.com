<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Little World</title>
  <subtitle>learn and share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoohannah.github.io/"/>
  <updated>2018-12-30T08:52:26.747Z</updated>
  <id>http://yoohannah.github.io/</id>
  
  <author>
    <name>YooHannah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VUE 数据绑定初探</title>
    <link href="http://yoohannah.github.io/post/vue/mvvm.html"/>
    <id>http://yoohannah.github.io/post/vue/mvvm.html</id>
    <published>2018-12-30T08:38:15.000Z</published>
    <updated>2018-12-30T08:52:26.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>项目中遇到一个需求是需要渲染一个列表，然后点击每一行展开按钮，显示该行一个详情<br><img src="/image/vuedata1.png" alt="vuedata1"><br>初步实现想法是在拿到列表数据时，给每一项添加属性show,初始值为false,点击按钮将show改为!show，从而控制详情显示隐藏<br>但发现不生效，详情没有按照预期显示<br>探究其原因是因为数据的改变没有引起界面的重新渲染<br>那么数据是怎么引发界面重新渲染的呢？什么样的数据改变才会引起界面重新渲染呢？</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>VUE 在进行数据双向绑定时，主要用到了两个思想：数据劫持和订阅发布模式</p>
<h2 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h2><p>vue 在拿到export default 的data中声明的变量后，会进行跟踪处理，<br>这个跟踪处理主要就是将变量的赋值和读取,参照对象属性的setter和getter进行使用Object.defineProperty重写成响应对象<br>即读取一个变量的数据时会通过调用getter方法return获取值，<br>重新赋值时会通过setter方法判断新值旧值是否相同，不同则进行更新，从而调用更新函数，进行视图更新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Define a reactive property on an Object.</div><div class="line"> */</div><div class="line">export function defineReactive (</div><div class="line">  obj: Object,</div><div class="line">  key: string,</div><div class="line">  val: any,</div><div class="line">  customSetter?: ?Function,</div><div class="line">  shallow?: boolean</div><div class="line">) &#123;</div><div class="line">  const dep = new Dep()</div><div class="line"></div><div class="line">  const property = Object.getOwnPropertyDescriptor(obj, key)</div><div class="line">  if (property &amp;&amp; property.configurable === false) &#123;</div><div class="line">    return</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // cater for pre-defined getter/setters</div><div class="line">  const getter = property &amp;&amp; property.get</div><div class="line">  if (!getter &amp;&amp; arguments.length === 2) &#123;</div><div class="line">    val = obj[key]</div><div class="line">  &#125;</div><div class="line">  const setter = property &amp;&amp; property.set</div><div class="line"></div><div class="line">  let childOb = !shallow &amp;&amp; observe(val)</div><div class="line">  Object.defineProperty(obj, key, &#123;</div><div class="line">    enumerable: true,</div><div class="line">    configurable: true,</div><div class="line">    /******/</div><div class="line">    get: function reactiveGetter () &#123;</div><div class="line">      const value = getter ? getter.call(obj) : val</div><div class="line">      if (Dep.target) &#123; </div><div class="line">        dep.depend()//获取这个值时，即将获取的这个地方当作订阅者放到订阅者列表中</div><div class="line">        if (childOb) &#123;</div><div class="line">          childOb.dep.depend()</div><div class="line">          if (Array.isArray(value)) &#123;</div><div class="line">            dependArray(value)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      return value</div><div class="line">    &#125;,</div><div class="line">    /******/</div><div class="line">    /******/</div><div class="line">    set: function reactiveSetter (newVal) &#123;</div><div class="line">      const value = getter ? getter.call(obj) : val</div><div class="line">      /* eslint-disable no-self-compare */</div><div class="line">      if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123; //与旧值相同，直接return 不更新</div><div class="line">        return</div><div class="line">      &#125;</div><div class="line">      /* eslint-enable no-self-compare */</div><div class="line">      if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; customSetter) &#123;</div><div class="line">        customSetter()</div><div class="line">      &#125;</div><div class="line">      if (setter) &#123;</div><div class="line">        setter.call(obj, newVal)</div><div class="line">      &#125; else &#123;</div><div class="line">        val = newVal //与旧值不同，重新赋值</div><div class="line">      &#125;</div><div class="line">      childOb = !shallow &amp;&amp; observe(newVal)</div><div class="line">      dep.notify() //通知更新</div><div class="line">    &#125;</div><div class="line">    /******/</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="订阅发布模式"><a href="#订阅发布模式" class="headerlink" title="订阅发布模式"></a>订阅发布模式</h2><p>进行视图更新时,更新函数需要知道视图哪些地方需要更新，以及由于该变量发生变化可能引起的其他变量变化或者触发一定的功能函数，<br>所以我们需要对数据的变化进行监听，并告知用到变量的地方（即订阅者），变量发生了变化，需要执行依据此变化要做的事<br>因为订阅者很可能不止一个（即一个变量被多处用到,包括js和html模板）,所以我们需要一个地方存放订阅者，并批量通知订阅者进行更新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">mport type Watcher from &apos;./watcher&apos; //或初始化watcher</div><div class="line">import &#123; remove &#125; from &apos;../util/index&apos;</div><div class="line"></div><div class="line">let uid = 0</div><div class="line"></div><div class="line">/**</div><div class="line"> * A dep is an observable that can have multiple</div><div class="line"> * directives subscribing to it.</div><div class="line"> */</div><div class="line">export default class Dep &#123;</div><div class="line">  static target: ?Watcher;</div><div class="line">  id: number;</div><div class="line">  subs: Array&lt;Watcher&gt;;</div><div class="line"></div><div class="line">  constructor () &#123;</div><div class="line">    this.id = uid++</div><div class="line">    this.subs = [] //订阅者集合</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  addSub (sub: Watcher) &#123;  //添加订阅者集合</div><div class="line">    this.subs.push(sub)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  removeSub (sub: Watcher) &#123;</div><div class="line">    remove(this.subs, sub)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  depend () &#123;</div><div class="line">    if (Dep.target) &#123;</div><div class="line">      Dep.target.addDep(this)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  notify () &#123; //批量更新</div><div class="line">    // stabilize the subscriber list first</div><div class="line">    const subs = this.subs.slice()</div><div class="line">    for (let i = 0, l = subs.length; i &lt; l; i++) &#123;</div><div class="line">      subs[i].update()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// the current target watcher being evaluated.</div><div class="line">// this is globally unique because there could be only one</div><div class="line">// watcher being evaluated at any time.</div><div class="line">Dep.target = null</div><div class="line">const targetStack = []</div><div class="line"></div><div class="line">export function pushTarget (_target: ?Watcher) &#123;</div><div class="line">  if (Dep.target) targetStack.push(Dep.target)</div><div class="line">  Dep.target = _target  //将watcher缓存到Dep.target</div><div class="line">&#125;</div><div class="line"></div><div class="line">export function popTarget () &#123;</div><div class="line">  Dep.target = targetStack.pop()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义订阅者，订阅者需要自己将自己放到变量的订阅者列表中，采用的方法是将自己暂存在Dep.target上，<br>在初始化的时候调用一下变量，利用变量getter方法，将自己添加到订阅者列表，然后将Dep.target至空，取消暂存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">export default class Watcher &#123;</div><div class="line">  vm: Component;</div><div class="line">  expression: string;</div><div class="line">  cb: Function;</div><div class="line">  id: number;</div><div class="line">  deep: boolean;</div><div class="line">  user: boolean;</div><div class="line">  lazy: boolean;</div><div class="line">  sync: boolean;</div><div class="line">  dirty: boolean;</div><div class="line">  active: boolean;</div><div class="line">  deps: Array&lt;Dep&gt;;</div><div class="line">  newDeps: Array&lt;Dep&gt;;</div><div class="line">  depIds: SimpleSet;</div><div class="line">  newDepIds: SimpleSet;</div><div class="line">  getter: Function;</div><div class="line">  value: any;</div><div class="line"></div><div class="line">  constructor (</div><div class="line">    vm: Component,</div><div class="line">    expOrFn: string | Function,</div><div class="line">    cb: Function,</div><div class="line">    options?: ?Object,</div><div class="line">    isRenderWatcher?: boolean</div><div class="line">  ) &#123;</div><div class="line">    this.value = this.lazy</div><div class="line">      ? undefined</div><div class="line">      : this.get() //将watcher 自己装进变量的订阅者列表</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Evaluate the getter, and re-collect dependencies.</div><div class="line">   */</div><div class="line">  get () &#123;</div><div class="line">    pushTarget(this) //暂存到Dep.target</div><div class="line">    let value</div><div class="line">    const vm = this.vm</div><div class="line">    try &#123;</div><div class="line">      value = this.getter.call(vm, vm) //调用变量的getter函数，将自己装到订阅者列表</div><div class="line">    &#125; catch (e) &#123;</div><div class="line">      if (this.user) &#123;</div><div class="line">        handleError(e, vm, `getter for watcher &quot;$&#123;this.expression&#125;&quot;`)</div><div class="line">      &#125; else &#123;</div><div class="line">        throw e</div><div class="line">      &#125;</div><div class="line">    &#125; finally &#123;</div><div class="line">      // &quot;touch&quot; every property so they are all tracked as</div><div class="line">      // dependencies for deep watching</div><div class="line">      if (this.deep) &#123;</div><div class="line">        traverse(value)</div><div class="line">      &#125;</div><div class="line">      popTarget()//取消watcher暂存，释放该watcher的绑定</div><div class="line">      this.cleanupDeps()</div><div class="line">    &#125;</div><div class="line">    return value</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  </div><div class="line">  /**</div><div class="line">   * Subscriber interface.</div><div class="line">   * Will be called when a dependency changes.</div><div class="line">   */</div><div class="line">  update () &#123; //dep批量更新调用</div><div class="line">    /* istanbul ignore else */</div><div class="line">    if (this.lazy) &#123;</div><div class="line">      this.dirty = true</div><div class="line">    &#125; else if (this.sync) &#123;</div><div class="line">      this.run()</div><div class="line">    &#125; else &#123;</div><div class="line">      queueWatcher(this)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Scheduler job interface.</div><div class="line">   * Will be called by the scheduler.</div><div class="line">   */</div><div class="line">  run () &#123;</div><div class="line">    if (this.active) &#123;</div><div class="line">      const value = this.get()</div><div class="line">      if (</div><div class="line">        value !== this.value ||</div><div class="line">        // Deep watchers and watchers on Object/Arrays should fire even</div><div class="line">        // when the value is the same, because the value may</div><div class="line">        // have mutated.</div><div class="line">        isObject(value) ||</div><div class="line">        this.deep</div><div class="line">      ) &#123;</div><div class="line">        // set new value</div><div class="line">        const oldValue = this.value</div><div class="line">        this.value = value</div><div class="line">        if (this.user) &#123;</div><div class="line">          try &#123;</div><div class="line">            this.cb.call(this.vm, value, oldValue) //执行更新回调</div><div class="line">          &#125; catch (e) &#123;</div><div class="line">            handleError(e, this.vm, `callback for watcher &quot;$&#123;this.expression&#125;&quot;`)</div><div class="line">          &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">          this.cb.call(this.vm, value, oldValue) //执行更新回调</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解析模板"><a href="#解析模板" class="headerlink" title="解析模板"></a>解析模板</h2><p>在解析模板时遇到指令或者&#123;&#123;&#125;&#125;时，将变量值替换到dom节点中，然后生成一个订阅者(根据参数将自己添加到对应绑定变量的订阅者列表中)，将自己的更新订阅到变量的变化中，从而在变量变化时，更新视图，<br>每解析到一个地方用到同一个变量，就生成一个watcher,从而反应出需要使用订阅者列表进行批量更新</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>综上，当变量在声明时会被劫持转成可响应对象，变量的读取更新，通过get和set完成，<br>在get时添加自己的订阅者，在set时告诉订阅者进行批量更新<br>订阅者管家由一个Dep对象负责，进行添加，触发更新等工作<br>订阅者对象需要表明自己是谁，能够将自己添加到订阅者列表，根据变量变化执行更新回调<br>页面上的变量会在编译时生成订阅器，将自己订阅到变量的订阅列表中，从而在变量变化时得到更新</p>
<p><img src="/image/vuedata2.png" alt="vuedata2"></p>
<h1 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h1><p>vue 在进行数据劫持时，会对对象进行递归处理，直到递归到的属性值是一个基本变量，即监听到基本变量变化，值监听<br>所以变量本身值是一个基本变量，则直接进行响应对象转化<br>但会根据变量是否是数组进行特殊处理，只是对数组每一项进行监听，除非值又是一个数组才会递归</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">export class Observer &#123;</div><div class="line">  value: any;</div><div class="line">  dep: Dep;</div><div class="line">  vmCount: number; // number of vms that has this object as root $data</div><div class="line"></div><div class="line">  constructor (value: any) &#123;</div><div class="line">    this.value = value</div><div class="line">    this.dep = new Dep()</div><div class="line">    this.vmCount = 0</div><div class="line">    def(value, &apos;__ob__&apos;, this)</div><div class="line">    if (Array.isArray(value)) &#123; //数组</div><div class="line">      const augment = hasProto</div><div class="line">        ? protoAugment</div><div class="line">        : copyAugment</div><div class="line">      augment(value, arrayMethods, arrayKeys)</div><div class="line">      this.observeArray(value)</div><div class="line">    &#125; else &#123;</div><div class="line">      this.walk(value)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Walk through each property and convert them into</div><div class="line">   * getter/setters. This method should only be called when</div><div class="line">   * value type is Object.</div><div class="line">   */</div><div class="line">  walk (obj: Object) &#123;</div><div class="line">    const keys = Object.keys(obj)</div><div class="line">    for (let i = 0; i &lt; keys.length; i++) &#123;</div><div class="line">      defineReactive(obj, keys[i])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Observe a list of Array items.</div><div class="line">   */</div><div class="line">  observeArray (items: Array&lt;any&gt;) &#123;</div><div class="line">    for (let i = 0, l = items.length; i &lt; l; i++) &#123;</div><div class="line">      observe(items[i]) //判断对数组值进行判断</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">export function observe (value: any, asRootData: ?boolean): Observer | void &#123;</div><div class="line">  if (!isObject(value) || value instanceof VNode) &#123;</div><div class="line">    return</div><div class="line">  &#125;</div><div class="line">  let ob: Observer | void</div><div class="line">  if (hasOwn(value, &apos;__ob__&apos;) &amp;&amp; value.__ob__ instanceof Observer) &#123;</div><div class="line">    ob = value.__ob__</div><div class="line">  &#125; else if (</div><div class="line">    shouldObserve &amp;&amp;</div><div class="line">    !isServerRendering() &amp;&amp;</div><div class="line">    (Array.isArray(value) || isPlainObject(value)) &amp;&amp; //值又是数组</div><div class="line">    Object.isExtensible(value) &amp;&amp;</div><div class="line">    !value._isVue</div><div class="line">  ) &#123;</div><div class="line">    ob = new Observer(value) //递归转化</div><div class="line">  &#125;</div><div class="line">  if (asRootData &amp;&amp; ob) &#123;</div><div class="line">    ob.vmCount++</div><div class="line">  &#125;</div><div class="line">  return ob</div></pre></td></tr></table></figure>
<p>带来的缺陷就是<br>对于对象来说，初始化以后，对象新增的属性不会被纳入监听范围,属性的删除也不能被监听到<br>对于数组来说，如果是一个对象数组，则数组里每一个对象里的属性值的增删改均不会被监听到</p>
<p>解决办法<br>对于数组来说，通过使用代码规定的<br>  ‘push’,<br>  ‘pop’,<br>  ‘shift’,<br>  ‘unshift’,<br>  ‘splice’,<br>  ‘sort’,<br>  ‘reverse’<br>几种方法可触发更新，实现对数组的修改，<br>例如，这里的问题，使用this.data.splice(index,1,obj),将原来的数组项替换掉，<br>从而达到更新</p>
<p>对于对象来说,可以使用如下两中方法进行更新<br>this.$set(obj,keyStr,val)//新增属性<br>obj = Object.assign({},obj,newItemObj) //删除/更改</p>
<p>在本问题中，目前的解决办法是引入新变量存放点击的行数，根据该变量值是否等于当前行，<br>更改class值，从而控制展开关闭</p>
<p><a href="https://www.cnblogs.com/libin-1/p/6893712.html" target="_blank" rel="external">参照资料</a><br><a href="https://github.com/vuejs/vue/tree/dev/src/core/observer" target="_blank" rel="external">源码链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;项目中遇到一个需求是需要渲染一个列表，然后点击每一行展开按钮，显示该行一个详情&lt;br&gt;&lt;img src=&quot;/image/vuedata1.p
    
    </summary>
    
    
      <category term="vue" scheme="http://yoohannah.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>结合VeeValidate实现对select校验</title>
    <link href="http://yoohannah.github.io/post/vue/VeeValidate&amp;select.html"/>
    <id>http://yoohannah.github.io/post/vue/VeeValidate&amp;select.html</id>
    <published>2018-12-22T04:32:15.000Z</published>
    <updated>2018-12-22T05:15:47.061Z</updated>
    
    <content type="html"><![CDATA[<p>1.对校验项进行手动触发校验</p>
<p>配置 VeeValidate 时，触发事件event设置为‘blur’,而表单在点击提交按钮时，没有对整个表单进行校验，用户如果点开配置表单，不做任何操作就提交的话，会导致页面上不会有任何反应，因此调用 VeeValidate手动触发函数this.$validator.validate()，进行整体校验</p>
<p>this.$validator.validate()会返回promise, resolve的回调函数的参数result 为false时校验不通过，true时校验通过</p>
<p>2.添加select 验证</p>
<p>因为 VeeValidate 只对 input 进行，所以当表单配置项以select呈现时，就算在标签上添加v-validate，也不会对其进行校验，反而还会导致之前配置的blur触发事件失效，所以手动添加对select的校验</p>
<p>之前调用this.$validator.validate()进行手动触发校验input ,返回的是promise,因此在校验完input之后先不管input的校验结果，直接对select 进行校验</p>
<p>select 出现在配置项中有两种情况，一种是通过配置表单时，配置过来的，另外一种是通过slot套嵌进来的，slot也属于配置对象config里面的一种type</p>
<p>之所以会出现需要通过slot 来添加select的情况,是因为这类的select一般需要绑定change事件,与其他配置项形成关联关系，如果以配置项的方式给select添加绑定change事件,会导致infinity loop错误，</p>
<p>导致出现这个错误的原因是渲染配置项的时候用的是一个v-for，一项一项把配置的input,select根据type渲染出来,这时，如果给select绑上change事件,而且change事件的内容是对v-for的对象的属性进行修改vue的机制就会认为触发了无限循环，开始死循环,因此不为配置的项添加change事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">父组件配置对象</div><div class="line">modelConfig: &#123;</div><div class="line">        title: &apos;授权&apos;,</div><div class="line">        modalId: &apos;modelConfig&apos;,</div><div class="line">        isAdd: true,</div><div class="line">        config: [</div><div class="line">          &#123;label: &apos;策略&apos;, value: &apos;v_policy_selected&apos;, option: &apos;v_policy_option&apos;, placeholder: &apos;&apos;, disabled: false, type: &apos;select&apos;,v_validate: &apos;required:true&apos;,isError: false&#125;,</div><div class="line">          &#123;name: &apos;selectAz&apos;, type: &apos;slot&apos;, v_validate:[</div><div class="line">            &#123;label: &apos;租户&apos;, value: &apos;v_tenant_selected&apos;, isError: &apos;v_tenant_isError&apos;, type: &apos;select&apos;&#125;,</div><div class="line">            &#123;label: &apos;项目&apos;, value: &apos;v_project_selected&apos;, isError: &apos;v_project_isError&apos;, type: &apos;select&apos;&#125;</div><div class="line">          ]&#125;],</div><div class="line">        addRow: &#123; // 其他配置项绑定的数据</div><div class="line">          </div><div class="line">        &#125;,</div><div class="line">        v_select_configs: &#123;</div><div class="line">          v_policy_selected: null, // 选中数据</div><div class="line">          v_policy_option: [], // 选择数据</div><div class="line">          v_project_selected: null, // 选中数据</div><div class="line">          v_project_option: [], // 选择数据</div><div class="line">          v_project_isError: false,</div><div class="line">          v_tenant_selected: null, // 选中数据</div><div class="line">          v_tenant_option: [], // 选择数据</div><div class="line">          v_tenant_isError: false</div><div class="line">        &#125;,</div><div class="line">        saveFunc: &apos;authSave&apos;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>主要验证逻辑如下：</p>
<p>校验之前设置flag = true,标志select的校验结果，最后用于与input校验结果result共同决定校验结果</p>
<p>先判断该配置项是否显示在表单中，因为有时新增和编辑的配置项不同，如果不在就不对该项进行校验，continue</p>
<p>对通过配置项展示的select，进行校验,如配置了校验规则v_validate，而且值为未选状态,则显示校验错误提示,同时设置flag = false,否则，不显示校验错误提示</p>
<p>这种错误提示同input,其显示通过配置项对象里面的一个属性决定，因此效果就是，显示提示该属性就设为true,否则设为false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;label v-show=&quot;errors.has(item.value) &amp;&amp; isHide(item.hide)&quot; class=&quot;col-md-7 help is-danger&quot;&gt;&#123;&#123;item.label&#125;&#125; &#123;&#123;errors.first(item.value)&#125;&#125;&lt;/label&gt;</div><div class="line">&lt;label v-if=&quot;item.type === &apos;select&apos; &amp;&amp; item.isError&quot; class=&quot;col-md-7 help is-danger&quot;&gt;&#123;&#123;item.label&#125;&#125; 不能为空&lt;/label&gt;</div></pre></td></tr></table></figure></p>
<p>对通过slot展示的select, 进行校验, 所有需要校验的配置放在v_validate属性中,遍历v_validate，判断select的值是否为未选，未选则显示提示，已选则不显示</p>
<p>错误提示放在slot的代码中,每一项配置自己的错误提示label,label的显示通过v_validate里面每一项配置的对应的错误提示属性的绑定值决定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div slot=&quot;selectAz&quot;&gt;</div><div class="line">&lt;v-select</div><div class="line">          v-model=&quot;modelConfig.v_select_configs.v_region_selected&quot;</div><div class="line">          label=&quot;name&quot;</div><div class="line">          class=&quot;col-md-7 v-selectss &quot;</div><div class="line">          :on-change=&quot;changeRegion&quot;</div><div class="line">          :options=&quot;modelConfig.v_select_configs.v_region_option&quot;&gt;</div><div class="line">&lt;/v-select&gt;</div><div class="line">&lt;label class=&quot;required-tip&quot;&gt;*&lt;/label&gt;</div><div class="line">&lt;label v-if=&quot;modelConfig.v_select_configs.v_region_isError&quot; class=&quot;col-md-7 help is-danger&quot;&gt;xxx 不能为空&lt;/label&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">具体代码</div><div class="line"> formValidate () &#123;</div><div class="line">        return this.$validator.validate().then(result =&gt; &#123;</div><div class="line">          //result 为false插件验证input没有填写完整,true为验证填写完整</div><div class="line">          /** 验证 select是否进行了选填 实例可参照 [manage][authorizations]user-authorized.vue **/</div><div class="line">          let flag = true</div><div class="line">          for(let i=0; i&lt; this.modelConfig.config.length; i++)&#123;</div><div class="line">            if(!this.isHide (this.modelConfig.config[i].hide))&#123;</div><div class="line">              continue</div><div class="line">            &#125;</div><div class="line">            /* ****** 配置里面的select ***** */</div><div class="line">            //配置规则为：在配置type:selcet时，如需校验则添加v_validate: &apos;required:true&apos;,isError: false==&gt;控制错误提示label显示</div><div class="line">            //如果无需校验，则不添加</div><div class="line">            if(this.modelConfig.config[i].type === &apos;select&apos; &amp;&amp; this.modelConfig.config[i].v_validate) &#123; </div><div class="line">              let obj = this.modelConfig.config[i]</div><div class="line">              if(!this.modelConfig.v_select_configs[obj.value])&#123;</div><div class="line">                this.modelConfig.config[i].isError = true</div><div class="line">                flag = false</div><div class="line">              &#125;else&#123;</div><div class="line">                this.modelConfig.config[i].isError = false</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">            /* ******  slot里面的select  ****** */</div><div class="line">            //配置规则为：在配置type:slot 时，添加 v_validate:[],数组里面存放需要校验的select的配置信息</div><div class="line">            //value:绑定值,isError:错误标签显示绑定值，type:select  ===&gt; 如果以后再校验其他类型，再增加判断逻辑</div><div class="line">            //&#123;name:&apos;xxxx&apos;,type:&apos;slot&apos;,v_validate:[&#123;value: &apos;v_xxx_selected&apos;, isError: &apos;v_xxx_isError&apos;, type: &apos;select&apos;&#125;]&#125;</div><div class="line">            //同时在this.modelConfig.v_select_configs里面定义v_xxx_isError：false</div><div class="line">            //slot里面错误提示label显示用 v-if=&quot;modelConfig.v_select_configs.v_xxx_isError&quot; 搭配其他具体规则进行组合</div><div class="line">            if(this.modelConfig.config[i].type === &apos;slot&apos;) &#123; </div><div class="line">              let arr = this.modelConfig.config[i].v_validate ? this.modelConfig.config[i].v_validate :[]</div><div class="line">              for(let j =0;j&lt;arr.length;j++)&#123;</div><div class="line">                let key = arr[j].isError</div><div class="line">                let value = arr[j].value</div><div class="line">                if(arr[j].type === &apos;select&apos; &amp;&amp; !this.modelConfig.v_select_configs[value]) &#123;</div><div class="line">                  this.modelConfig.v_select_configs[key] = true</div><div class="line">                  flag = false</div><div class="line">                &#125;else&#123;</div><div class="line">                  this.modelConfig.v_select_configs[key] = false</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          return result &amp;&amp; flag</div><div class="line">        &#125;)</div><div class="line">      &#125;,</div></pre></td></tr></table></figure>
<p>3.勾选选项后错误消失</p>
<p> 在公共组件里面为prop添加watch方法，当对象属性发生变化时就检查select是否有值了，有的话，就将提示隐藏掉<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">     return &#123;</div><div class="line">       configCopy:this.modelConfig,</div><div class="line">       FLAG:false</div><div class="line">     &#125;</div><div class="line">   &#125;,</div><div class="line">props: [&apos;modelConfig&apos;],</div><div class="line">watch:&#123;</div><div class="line">     configCopy: &#123;</div><div class="line">       handler()&#123; </div><div class="line">         //select选择完将提示隐藏，如果日后保留&apos;X&apos;删除功能，如需要，再增加显示处理逻辑</div><div class="line">         for(let key in this.modelConfig.v_select_configs) &#123; //slot select</div><div class="line">           if(key.endsWith(&apos;isError&apos;))&#123;</div><div class="line">             let prefix = key.slice(0,-7)</div><div class="line">             if(this.modelConfig.v_select_configs[key] &amp;&amp; this.modelConfig.v_select_configs[prefix+&apos;selected&apos;])&#123;</div><div class="line">               this.modelConfig.v_select_configs[key] = false</div><div class="line">             &#125;</div><div class="line">           &#125;</div><div class="line">         &#125;</div><div class="line">         for(let i=0; i&lt; this.modelConfig.config.length; i++)&#123; //config select</div><div class="line">           if(this.modelConfig.config[i].type === &apos;select&apos; &amp;&amp; this.modelConfig.config[i].v_validate) &#123; </div><div class="line">             let obj = this.modelConfig.config[i]</div><div class="line">             if(this.modelConfig.v_select_configs[obj.value])&#123;</div><div class="line">               this.modelConfig.config[i].isError = false</div><div class="line">             &#125;</div><div class="line">           &#125;</div><div class="line">         &#125;</div><div class="line">       &#125;,</div><div class="line">       deep:true</div><div class="line">     &#125;</div><div class="line">   &#125;,</div></pre></td></tr></table></figure></p>
<p>4.关闭配置页面的清空</p>
<p>  检查配置项对象里面所有的select配置项，将其负责错误提示显示的项设置为false<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 清除表单selected</div><div class="line">     for(let i=0; i&lt;this.modelConfig.config.length; i++)&#123;</div><div class="line">       if(this.modelConfig.config[i].type === &apos;select&apos; &amp;&amp; this.modelConfig.config[i].v_validate) &#123;</div><div class="line">         this.modelConfig.config[i].isError = false</div><div class="line">       &#125;</div><div class="line">       if(this.modelConfig.config[i].type === &apos;slot&apos;) &#123; </div><div class="line">         let arr = this.modelConfig.config[i].v_validate ? this.modelConfig.config[i].v_validate :[]</div><div class="line">         for(let j =0;j&lt;arr.length;j++)&#123;</div><div class="line">           let key = arr[j].isError</div><div class="line">           let value = arr[j].value</div><div class="line">           if(arr[j].type === &apos;select&apos; &amp;&amp; !this.modelConfig.v_select_configs[value]) &#123;</div><div class="line">             this.modelConfig.v_select_configs[key] = false</div><div class="line">           &#125;</div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.对校验项进行手动触发校验&lt;/p&gt;
&lt;p&gt;配置 VeeValidate 时，触发事件event设置为‘blur’,而表单在点击提交按钮时，没有对整个表单进行校验，用户如果点开配置表单，不做任何操作就提交的话，会导致页面上不会有任何反应，因此调用 VeeValidate手动
    
    </summary>
    
    
      <category term="vue" scheme="http://yoohannah.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>自定义VUE指令</title>
    <link href="http://yoohannah.github.io/post/vue/customcommander.html"/>
    <id>http://yoohannah.github.io/post/vue/customcommander.html</id>
    <published>2018-12-22T04:30:15.000Z</published>
    <updated>2018-12-22T04:32:29.471Z</updated>
    
    <content type="html"><![CDATA[<p>使用marquee标签实现文字悬浮滚动效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//一般实现</div><div class="line"> &lt;div id=&quot;demo&quot;&gt;</div><div class="line">    &lt;div v-if=&quot;show&quot; style=&quot;z-index:99999;width200px;margin-left:20px;margin-top:-20px;background-color:#00a4ff;width:200px;position: absolute;border-radius:5px;padding-top: 5px;&quot;&gt;</div><div class="line">      &lt;marquee &gt;</div><div class="line">      &lt;span style=&quot;font-weight: bolder;font-size: 10px;color: white;&quot;&gt;Welcom CMRH!&lt;/span&gt;</div><div class="line">    &lt;/marquee&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;button @mouseover=&quot;show = !show&quot; @mouseout=&quot;show = !show&quot;&gt;</div><div class="line">    Toggle</div><div class="line">  &lt;/button&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//全局定义</div><div class="line">Vue.directive(&apos;demo&apos;, function (el, binding) &#123;</div><div class="line">  console.log(el,binding)</div><div class="line">  let str = &apos;&lt;div id=&quot;pointer&quot; style=&quot;z-index:99999;width200px;margin-left:20px;margin-top:-20px;background-color:#00a4ff;width:200px;position: absolute;border-radius:5px;padding-top: 5px;&quot;&gt;&lt;marquee&gt;&lt;span style=&quot;font-weight: bolder;font-size: 10px;color: white;&quot;&gt;&apos;</div><div class="line">   + binding.value.text + </div><div class="line">   &apos;&lt;/span&gt;&lt;/marquee&gt;&lt;/div&gt;&apos;</div><div class="line">  $(el).mouseover (function() &#123;</div><div class="line">    $(el).prepend(str)</div><div class="line">  &#125;)</div><div class="line">  $(el).mouseout (function() &#123;</div><div class="line">    $(&apos;#pointer&apos;).remove()</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//使用</div><div class="line">&lt;div v-demo=&quot;&#123; color: &apos;white&apos;, text: &apos;hello!&apos; &#125;&quot;&gt;111111&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>通过指令传递的数据，通过binding.value读取</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用marquee标签实现文字悬浮滚动效果&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoohannah.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>文件结构</title>
    <link href="http://yoohannah.github.io/post/vue/basic/filestructor.html"/>
    <id>http://yoohannah.github.io/post/vue/basic/filestructor.html</id>
    <published>2018-12-22T03:40:37.000Z</published>
    <updated>2018-12-22T04:36:13.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>使用命令行构建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install --global vue-cli //全局安装vue命令</div><div class="line">vue init webpack my-project //使用vue命令构建名为my-project的项目</div><div class="line">cd my-project //进入项目所在文件夹</div><div class="line">npm run dev //运行项目</div></pre></td></tr></table></figure></p>
<h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><pre><code class="lang-bash">.
├── build/                      <span class="hljs-comment"># webpack config files</span>
│   └── ...
├── config/
│   ├── index.js                <span class="hljs-comment"># main project config</span>
│   └── ...
├── src/
│   ├── main.js                 <span class="hljs-comment"># app entry file</span>
│   ├── App.vue                 <span class="hljs-comment"># main app component</span>
│   ├── components/             <span class="hljs-comment"># ui components</span>
│   │   └── ...
│   └── assets/                 <span class="hljs-comment"># module assets (processed by webpack)</span>
│       └── ...
├── static/                     <span class="hljs-comment"># pure static assets (directly copied)</span>
├── <span class="hljs-built_in">test</span>/
│   └── unit/                   <span class="hljs-comment"># unit tests</span>
│   │   ├── specs/              <span class="hljs-comment"># test spec files</span>
│   │   ├── eslintrc            <span class="hljs-comment"># config file for eslint with extra settings only for unit tests</span>
│   │   ├── index.js            <span class="hljs-comment"># test build entry file</span>
│   │   ├── jest.conf.js        <span class="hljs-comment"># Config file when using Jest for unit tests</span>
│   │   └── karma.conf.js       <span class="hljs-comment"># test runner config file when using Karma for unit tests</span>
│   │   ├── setup.js            <span class="hljs-comment"># file that runs before Jest runs your unit tests</span>
│   └── e2e/                    <span class="hljs-comment"># e2e tests</span>
│   │   ├── specs/              <span class="hljs-comment"># test spec files</span>
│   │   ├── custom-assertions/  <span class="hljs-comment"># custom assertions for e2e tests</span>
│   │   ├── runner.js           <span class="hljs-comment"># test runner script</span>
│   │   └── nightwatch.conf.js  <span class="hljs-comment"># test runner config file</span>
├── .babelrc                    <span class="hljs-comment"># babel config</span>
├── .editorconfig               <span class="hljs-comment"># indentation, spaces/tabs and similar settings for your editor</span>
├── .eslintrc.js                <span class="hljs-comment"># eslint config</span>
├── .eslintignore               <span class="hljs-comment"># eslint ignore rules</span>
├── .gitignore                  <span class="hljs-comment"># sensible defaults for gitignore</span>
├── .postcssrc.js               <span class="hljs-comment"># postcss config</span>
├── index.html                  <span class="hljs-comment"># index.html template</span>
├── package.json                <span class="hljs-comment"># build scripts and dependencies</span>
└── README.md                   <span class="hljs-comment"># Default README file</span>
</code></pre>

]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构建&quot;&gt;&lt;a href=&quot;#构建&quot; class=&quot;headerlink&quot; title=&quot;构建&quot;&gt;&lt;/a&gt;构建&lt;/h1&gt;&lt;p&gt;使用命令行构建&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
    
      <category term="vue" scheme="http://yoohannah.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>触发render</title>
    <link href="http://yoohannah.github.io/post/react/renderfire.html"/>
    <id>http://yoohannah.github.io/post/react/renderfire.html</id>
    <published>2018-12-22T03:40:37.000Z</published>
    <updated>2018-12-22T03:42:29.036Z</updated>
    
    <content type="html"><![CDATA[<p>在react中，触发render的有4条路径。</p>
<p>以下假设shouldComponentUpdate都是按照默认返回true的方式。</p>
<p>首次渲染Initial Render</p>
<p>调用this.setState （并不是一次setState会触发一次render，React可能会合并操作，再一次性进行render）</p>
<p>父组件发生更新（一般就是props发生改变，但是就算props没有改变或者父子组件之间没有数据交换也会触发render）</p>
<p>调用this.forceUpdate</p>
<p><a href="https://www.cnblogs.com/AnnieBabygn/p/6560833.html" target="_blank" rel="external">https://www.cnblogs.com/AnnieBabygn/p/6560833.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在react中，触发render的有4条路径。&lt;/p&gt;
&lt;p&gt;以下假设shouldComponentUpdate都是按照默认返回true的方式。&lt;/p&gt;
&lt;p&gt;首次渲染Initial Render&lt;/p&gt;
&lt;p&gt;调用this.setState （并不是一次setState会
    
    </summary>
    
    
      <category term="react" scheme="http://yoohannah.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>vue对象属性</title>
    <link href="http://yoohannah.github.io/post/vue/basic/vueprops.html"/>
    <id>http://yoohannah.github.io/post/vue/basic/vueprops.html</id>
    <published>2018-12-22T03:40:37.000Z</published>
    <updated>2018-12-22T04:53:44.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="el"><a href="#el" class="headerlink" title="el"></a>el</h1><p>其值为vue模板挂载ID,用于标识vue的APP template挂载在index.html的什么位置</p>
<h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><h1 id="method"><a href="#method" class="headerlink" title="method"></a>method</h1><h1 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h1><p>通过&#123; &#123;&#125;&#125;}插值的时候,可以在大括号里面添加一个简单的计算表达式，从而将计算结果插入,但是对于复杂的计算,需要执行多个计算表达式时不能放在大括号里面的，为方便绑定，在computed属性中定义计算属性A，A是一个函数用到变量b，然后将该A属性插入，从而实现相关值b变化，插入值A随之响应的效果</p>
<p>相当于计算属性因为依赖项改变而执行计算，将计算结果插入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">例</div><div class="line"> &lt;p&gt;Original data: &quot;&#123;&#123; value &#125;&#125;&quot;&lt;/p&gt;</div><div class="line"> &lt;p&gt;Computed result: &quot;&#123;&#123; doubleValue &#125;&#125;&quot;&lt;/p&gt;</div><div class="line"> &lt;button @click=&apos;changeValue&apos;&gt;&lt;button&gt;</div><div class="line"> </div><div class="line">  export default &#123;</div><div class="line">    data() &#123;</div><div class="line">        value: 10</div><div class="line">    &#125;,</div><div class="line">    computed: &#123;</div><div class="line">        doubleValue: function() &#123;</div><div class="line">            return this.value * 2</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    method: &#123;</div><div class="line">        changeValue: function() &#123;</div><div class="line">            this.value++</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> //当value 变化时，doubleValue通过运算将结果插入</div></pre></td></tr></table></figure></p>
<p>与method区别</p>
<p>也可以在大括号里面调用method中定义的方法，达到计算响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;&#123;&#123;doubleVlue()&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;button @click=&apos;changeValue&apos;&gt;&lt;button&gt;</div><div class="line">export default &#123;</div><div class="line">    data() &#123;</div><div class="line">        value: 10</div><div class="line">    &#125;,</div><div class="line">    method: &#123;</div><div class="line">        doubleValue: function() &#123;</div><div class="line">            return this.value * 2</div><div class="line">        &#125;,</div><div class="line">        changeValue: function() &#123;</div><div class="line">            this.value++</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>当计算属性函数依赖的值不发生变化时，每次调用计算属性都会去取最后一次运算的结果，即读取缓存的结果</p>
<p>比如有一个计算属性A需要遍历一个庞大的数组然后得到一个结果，而这个结果则用于其他计算，这样我们就不需要每次去运算A属性函数得到结果，直接读取缓存结果即可</p>
<p>但如果属性A结果的得来是通过运行method方法，那么每次调用A就会进行计算一次，就会造成很大开销</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">//computed方式</div><div class="line">&lt;p&gt;Original data: &quot;&#123;&#123; value &#125;&#125;&quot;&lt;/p&gt;</div><div class="line">&lt;p&gt;Computed result: &#123;&#123; double &#125;&#125;&lt;/p&gt;</div><div class="line">&lt;button @click=&apos;changeValue&apos;&gt;&lt;button&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    data() &#123;</div><div class="line">        value: 10</div><div class="line">    &#125;,</div><div class="line">    computed: &#123;</div><div class="line">      double: function() &#123;</div><div class="line">        return  this.value + this.doubleValue</div><div class="line">      &#125;,</div><div class="line">      doubleValue: function() &#123;</div><div class="line">        console.log(&apos;double&apos;) //只打印一次</div><div class="line">        return  2</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    method: &#123;</div><div class="line">        changeValue: function() &#123;</div><div class="line">            this.value++</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">//method方式</div><div class="line"></div><div class="line">&lt;p&gt;Original data: &quot;&#123;&#123; value &#125;&#125;&quot;&lt;/p&gt;</div><div class="line">&lt;p&gt;Computed result: &#123;&#123; value + doubleValue() &#125;&#125;&lt;/p&gt;</div><div class="line">&lt;button @click=&apos;changeValue&apos;&gt;1234&lt;button&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    data() &#123;</div><div class="line">        value: 10</div><div class="line">    &#125;,</div><div class="line">    method: &#123;</div><div class="line">        doubleValue: function() &#123;</div><div class="line">            console.log(&apos;double&apos;) //value 改变一次，打印一次,即函数会被执行一次</div><div class="line">            return 2</div><div class="line">        &#125;,</div><div class="line">        changeValue: function() &#123;</div><div class="line">            this.value++</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>计算属性还可以设置getter和setter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  fullName: &#123;</div><div class="line">    // getter</div><div class="line">    get: function () &#123;</div><div class="line">      return this.firstName + &apos; &apos; + this.lastName</div><div class="line">    &#125;,</div><div class="line">    // setter</div><div class="line">    set: function (newValue) &#123;</div><div class="line">      var names = newValue.split(&apos; &apos;)</div><div class="line">      this.firstName = names[0]</div><div class="line">      this.lastName = names[names.length - 1]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//给fullName设置值的时候,比如fullName = &apos;John Doe&apos; 时，setter 会被调用，firstName 和 lastName 也会相应地被更新</div></pre></td></tr></table></figure></p>
<h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><p>定义某个变量发生变化时需要执行的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Original data: &quot;&#123;&#123; value &#125;&#125;&quot;&lt;/p&gt;</div><div class="line">&lt;p&gt;Computed result: &#123;&#123; result &#125;&#125;&lt;/p&gt;</div><div class="line">&lt;button @click=&apos;changeValue&apos;&gt;1234&lt;button&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    data() &#123;</div><div class="line">        value: 10</div><div class="line">        result: 0</div><div class="line">    &#125;,</div><div class="line">    watch: &#123;</div><div class="line">        value: function() &#123;</div><div class="line">            this.result +=10</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    method: &#123;</div><div class="line">        changeValue: function() &#123;</div><div class="line">            this.value++</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">//当value发生变化的时候，就会执行watch绑定的函数，从而可以让result发生响应</div></pre></td></tr></table></figure></p>
<p>对比computed属性,假设一个结果需要依赖多个变量，如果使用watch方法则需要定义多个响应函数，而且响应函数是重复的，而如果使用computed属性则只需要定义一次即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">例</div><div class="line">//computed方式</div><div class="line">&lt;p&gt;Original data: &quot;&#123;&#123; value &#125;&#125;&quot;&lt;/p&gt;</div><div class="line">&lt;p&gt;Computed result: &#123;&#123; result &#125;&#125;&lt;/p&gt;</div><div class="line">&lt;button @click=&apos;changeValue&apos;&gt;1234&lt;/button&gt;</div><div class="line">export default &#123;</div><div class="line">    data() &#123;</div><div class="line">        value: 10,</div><div class="line">        val:1</div><div class="line">    &#125;,</div><div class="line">   computed: &#123;</div><div class="line">      result: function() &#123;</div><div class="line">          return this.val + this.value</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    method: &#123;</div><div class="line">        changeValue: function() &#123;</div><div class="line">            this.value++</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">//watch方式</div><div class="line">&lt;p&gt;Original data: &quot;&#123;&#123; value &#125;&#125;&quot;&lt;/p&gt;</div><div class="line">&lt;p&gt;Computed result: &#123;&#123; result &#125;&#125;&lt;/p&gt;</div><div class="line">&lt;button @click=&apos;changeValue&apos;&gt;1234&lt;/button&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    data() &#123;</div><div class="line">        value: 10,</div><div class="line">        val:1</div><div class="line">    &#125;,</div><div class="line">    watch: &#123;</div><div class="line">      value: function() &#123;</div><div class="line">         this.result = this.val + this.value</div><div class="line">      &#125;,</div><div class="line">      val: function() &#123;</div><div class="line">          this.result = this.val + this.value</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    method: &#123;</div><div class="line">        changeValue: function() &#123;</div><div class="line">            this.value++</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h1 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h1><h1 id="components"><a href="#components" class="headerlink" title="components"></a>components</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;el&quot;&gt;&lt;a href=&quot;#el&quot; class=&quot;headerlink&quot; title=&quot;el&quot;&gt;&lt;/a&gt;el&lt;/h1&gt;&lt;p&gt;其值为vue模板挂载ID,用于标识vue的APP template挂载在index.html的什么位置&lt;/p&gt;
&lt;h1 id=&quot;data&quot;&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoohannah.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>指令</title>
    <link href="http://yoohannah.github.io/post/vue/basic/commanders.html"/>
    <id>http://yoohannah.github.io/post/vue/basic/commanders.html</id>
    <published>2018-12-22T03:40:37.000Z</published>
    <updated>2018-12-22T04:35:50.862Z</updated>
    
    <content type="html"><![CDATA[<p>指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p>
<h1 id="简单指令"><a href="#简单指令" class="headerlink" title="简单指令"></a>简单指令</h1><p>v-if 条件指令，绑定值为真时构建DOM,假时bu构建或者删除已存在DOM<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    name: &apos;vpc&apos;,</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        seen: true</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>v-for 循环指令，根据绑定值，循环输出DOM元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div v-for=&quot;(item, index) in modalFooter&quot;&gt;</div><div class="line">  &lt;button  @click=&quot;customFunc(item.Func)&quot; type=&quot;button&quot; class=&quot;btn btn-primary&quot; v-if=&apos;item.name&apos;&gt;&#123;&#123;item.name&#125;&#125;&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">//根据数据modalFooter数组循环出多个数组</div></pre></td></tr></table></figure></p>
<p>v-on 监听 DOM 事件的指令,触发事件的回调函数放在method中，可以简写成‘@事件名’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app-5&quot;&gt;</div><div class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;button v-on:click=&quot;reverseMessage&quot;&gt;逆转消息&lt;/button&gt;</div><div class="line"> //或者 &lt;button @click=&quot;reverseMessage&quot;&gt;逆转消息&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">var app5 = new Vue(&#123;</div><div class="line">  el: &apos;#app-5&apos;,</div><div class="line">  data: &#123;</div><div class="line">    message: &apos;Hello Vue.js!&apos;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    reverseMessage: function () &#123;</div><div class="line">      this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>v-model 双向绑定指令,绑定的值在页面更改后js可以及时更改，js改变该值后,页面能马上渲染响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app-6&quot;&gt;</div><div class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;input v-model=&quot;message&quot;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">var app6 = new Vue(&#123;</div><div class="line">  el: &apos;#app-6&apos;,</div><div class="line">  data: &#123;</div><div class="line">    message: &apos;Hello Vue!&apos;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>v-bind 绑定HTML标签属性,响应式地更新 HTML 特性 缩写形式”  :属性名=’响应函数名’  “<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;app-2&quot;&gt;</div><div class="line">  &lt;span v-bind:title=&quot;message&quot;&gt;</div><div class="line">  //或者&lt;span :title=&quot;message&quot;&gt;</div><div class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</div><div class="line">  &lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">var app2 = new Vue(&#123;</div><div class="line">  el: &apos;#app-2&apos;,</div><div class="line">  data: &#123;</div><div class="line">    message: &apos;页面加载于 &apos; + new Date().toLocaleString()</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">//在这里，该指令的意思是：“将这个元素节点的 title 特性和 Vue 实例的 message 属性保持一致”</div></pre></td></tr></table></figure></p>
<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM&lt;/p&gt;
&lt;h1 id=&quot;简单指令&quot;&gt;&lt;a href=&quot;#简单指令&quot; class=&quot;headerlink&quot; title=&quot;简单指令&quot;&gt;&lt;/a&gt;简单指令&lt;/h1&gt;&lt;p&gt;v-if 条件指令，绑定值为真时
    
    </summary>
    
    
      <category term="vue" scheme="http://yoohannah.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>定时器</title>
    <link href="http://yoohannah.github.io/post/knowledge/clock.html"/>
    <id>http://yoohannah.github.io/post/knowledge/clock.html</id>
    <published>2018-12-22T03:40:37.000Z</published>
    <updated>2018-12-22T05:00:44.717Z</updated>
    
    <content type="html"><![CDATA[<p>1.使用 setInterval<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this.timerID = setInterval(fn, time);</div><div class="line">clearInterval(this.timerID);</div></pre></td></tr></table></figure></p>
<p> 2.angular 中使用 $interval<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">this.timerID = $interval(fn, time);</div><div class="line">$interval.cancel(this.timerID)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.使用 setInterval&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;
    
    </summary>
    
    
      <category term="knowledge" scheme="http://yoohannah.github.io/tags/knowledge/"/>
    
  </entry>
  
  <entry>
    <title>flex-drection属性使用</title>
    <link href="http://yoohannah.github.io/post/knowledge/flex-direction.html"/>
    <id>http://yoohannah.github.io/post/knowledge/flex-direction.html</id>
    <published>2018-12-22T03:29:37.000Z</published>
    <updated>2018-12-22T03:29:54.580Z</updated>
    
    <content type="html"><![CDATA[<p>在display:flex基础上使用flex-direction,可用于多子模块布局</p>
<p>flex-direction可以为四个值</p>
<p>row:水平并行排列在左侧</p>
<p>row-reverse：水平并行排列在右侧，顺序与书写顺序相反,最前的在最右边</p>
<p>column:垂直排列在上方,相当于display:block状态下模块默认布局</p>
<p>column-reverse:垂直排列在下方,顺序与书写顺序相反，最前的在最下边</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        #main1 </div><div class="line">        &#123;</div><div class="line">            width:200px;</div><div class="line">            height: 300px;</div><div class="line">            border:1px solid black;</div><div class="line">            display: flex;</div><div class="line">            flex-direction:row;</div><div class="line">        &#125;</div><div class="line">        #main2 </div><div class="line">        &#123;</div><div class="line">            width:200px;</div><div class="line">            height: 300px;</div><div class="line">            border:1px solid black;</div><div class="line">            display: flex;</div><div class="line">            flex-direction:row-reverse;</div><div class="line">        &#125;</div><div class="line">        #main3 </div><div class="line">        &#123;</div><div class="line">            width:200px;</div><div class="line">            height: 300px;</div><div class="line">            border:1px solid black;</div><div class="line">            display: flex;</div><div class="line">            flex-direction:column;</div><div class="line">        &#125;</div><div class="line">        #main4 </div><div class="line">        &#123;</div><div class="line">            width:200px;</div><div class="line">            height: 300px;</div><div class="line">            border:1px solid black;</div><div class="line">            display: flex;</div><div class="line">            flex-direction:column-reverse;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h4&gt;This is an example for flex-direction:row(default)&lt;/h4&gt;</div><div class="line">&lt;div id=&quot;main1&quot;&gt;</div><div class="line">    &lt;div style=&quot;background-color:red;&quot;&gt;RED&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightblue;&quot;&gt;BLUE&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightgreen;&quot;&gt;GREEN&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;h4&gt;This is an example for flex-direction:row-reverse&lt;/h4&gt;</div><div class="line">&lt;div id=&quot;main2&quot;&gt;</div><div class="line">    &lt;div style=&quot;background-color:red;&quot;&gt;RED&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightblue;&quot;&gt;BLUE&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightgreen;&quot;&gt;GREEN&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;h4&gt;This is an example for flex-direction:column&lt;/h4&gt;</div><div class="line">&lt;div id=&quot;main3&quot;&gt;</div><div class="line">    &lt;div style=&quot;background-color:red;&quot;&gt;RED&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightblue;&quot;&gt;BLUE&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightgreen;&quot;&gt;GREEN&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;h4&gt;This is an example for flex-direction:column-reverse&lt;/h4&gt;</div><div class="line">&lt;div id=&quot;main4&quot;&gt;</div><div class="line">    &lt;div style=&quot;background-color:red;&quot;&gt;RED&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightblue;&quot;&gt;BLUE&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightgreen;&quot;&gt;GREEN&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在display:flex基础上使用flex-direction,可用于多子模块布局&lt;/p&gt;
&lt;p&gt;flex-direction可以为四个值&lt;/p&gt;
&lt;p&gt;row:水平并行排列在左侧&lt;/p&gt;
&lt;p&gt;row-reverse：水平并行排列在右侧，顺序与书写顺序相反,最前的在最右
    
    </summary>
    
    
      <category term="css" scheme="http://yoohannah.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>数组的map和reduce</title>
    <link href="http://yoohannah.github.io/post/js/map&amp;reduce.html"/>
    <id>http://yoohannah.github.io/post/js/map&amp;reduce.html</id>
    <published>2018-12-22T03:25:37.000Z</published>
    <updated>2018-12-22T05:09:12.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组的map方法"><a href="#数组的map方法" class="headerlink" title="数组的map方法"></a>数组的map方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let arr = [1,2,3,4,5];</div><div class="line">let arr1 = arr.map(function(val,index,arr)&#123;</div><div class="line">	console.log(val,index,arr)</div><div class="line">	return val+1</div><div class="line">&#125;)</div><div class="line">console.log(arr1)//[2, 3, 4, 5, 6]</div><div class="line">console.log(arr) //[1, 2, 3, 4, 5]</div></pre></td></tr></table></figure>
<p>在map中可以传递一个函数，数组的每一项作为参数调用这个函数，然后返回根据该数组项得到的结果，每一个数组项返会一个结果，从而组成新的数组</p>
<p>函数的参数有三个，第一项为数组按序传进的一个值，该值的index和数组本身</p>
<p>整个结果产生新数组，原来数组不变</p>
<h1 id="数组的reduce-方法"><a href="#数组的reduce-方法" class="headerlink" title="数组的reduce 方法"></a>数组的reduce 方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">例1.</div><div class="line">let arr = [1,2,3];</div><div class="line">let result = arr.reduce(function(preresult,item)&#123;</div><div class="line">	return preresult += item;</div><div class="line">&#125;,0)</div><div class="line">console.log(result)   //6</div><div class="line"></div><div class="line">例2.</div><div class="line">let result4 = arr.reduce(function(preresult,item)&#123;</div><div class="line">    preresult.name += item;</div><div class="line">	return preresult</div><div class="line">&#125;,&#123;name:0&#125;)</div><div class="line">console.log(result4); //&#123;name:6&#125;</div></pre></td></tr></table></figure>
<p>reduce 用于对数组每一项进行累计计算，每一项计算结果作为参数参加数组下一项的计算,最终返回计算结果</p>
<p>例1中单纯对数组每一项进行叠加处理，返回叠加结果<br>例2同样进行叠加只是叠加结果放在对象中返回</p>
<p>reduce(callback(),initval)</p>
<p>需要两个参数，一个是用于累计计算的callback函数，一个是初始值，见上两例</p>
<p>callback()函数有四个参数依次为：</p>
<p>preVal （上一次调用回调返回的值，或者是提供的初始值（initialValue））</p>
<p>currentValue （数组中当前被处理的元素）</p>
<p>index （当前元素在数组中的索引）</p>
<p>array （调用 reduce 的数组）</p>
<p>初始值会在第一次调用时当作回调函数callback的第一个参数使用</p>
<p>希望返回值是什么类型的数据，初始值就要设置为什么样的类型，callback返回值也是该类型；或者说是在这里设置返回值的类型</p>
<p>整个处理过程就是拿初始值initval和数组第一个值在callback里面进行处理，返回结果result,result当作callback的preval参数和数组第二个元素传入callback在处理，直到数组全部元素被处理完，返回一个最终处理结果</p>
<p>高级应用<br>对对象数组元素进行累计计算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var reducers = &#123;  </div><div class="line">  totalInEuros : function(state, item) &#123;</div><div class="line">    return state.euros += item.price * 0.897424392;</div><div class="line">  &#125;,</div><div class="line">  totalInYen : function(state, item) &#123;</div><div class="line">    return state.yens += item.price * 113.852;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var manageReducers = function(reducers) &#123;</div><div class="line">  return function(state, item) &#123;</div><div class="line">    return Object.keys(reducers).reduce(</div><div class="line">      function(nextState, key) &#123;</div><div class="line">        reducers[key](state, item);</div><div class="line">        return state;</div><div class="line">      &#125;,</div><div class="line">      &#123;&#125;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var bigTotalPriceReducer = manageReducers(reducers);</div><div class="line">var initialState = &#123;euros:0, yens: 0&#125;;</div><div class="line">var items = [&#123;price: 10&#125;, &#123;price: 120&#125;, &#123;price: 1000&#125;];</div><div class="line">var totals = items.reduce(bigTotalPriceReducer, initialState);</div><div class="line">console.log(totals);</div><div class="line">//&#123;euros: 1014.08956296, yens: 128652.76&#125;</div></pre></td></tr></table></figure></p>
<p>该例的目的是将对象数组items的元素属性price进行不同处理操作然后将结果分别保存到结果对象的属性中</p>
<p>处理的关键是manageReducers返回的作为items callback的函数bigTotalPriceReducer，</p>
<p>处理思路是items每用一个元素调用callback时,callback的处理过程是将这个元素作为参数调用reducers 对象里面设置的每一个处理函数,</p>
<p>调用reducers处理函数的过程同样使用一个reduce方法进行处理</p>
<p>Object.keys(obj)方法返回对象键值组成的数组</p>
<p>当items的元素参加完reducers所有处理函数后,返回的结果参加下一个元素的计算最终返回结果</p>
<p>扩展：</p>
<p>1.在reduces中设置对items不同属性的计算，从而得到不同属性的结算结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var reducers = &#123;  </div><div class="line">  totalInEuros : function(state, item) &#123;</div><div class="line">    return state.euros += item.p1;</div><div class="line">  &#125;,</div><div class="line">  totalInYen : function(state, item) &#123;</div><div class="line">    return state.yens += item.price * 113.852;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var bigTotalPriceReducer = manageReducers(reducers);</div><div class="line">var initialState = &#123;euros:0, yens: 0&#125;;</div><div class="line">var items = [&#123;price: 10,p1:1&#125;, &#123;price: 120,p1:1&#125;, &#123;price: 1000,p1:1&#125;];</div><div class="line">var totals = items.reduce(bigTotalPriceReducer, initialState);</div><div class="line">console.log(totals);</div><div class="line">//&#123;euros: 3, yens: 128652.76&#125;</div></pre></td></tr></table></figure>
<p>2.计算对象数组属性值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var manageReducers = function(state, item) &#123;</div><div class="line">    return Object.keys(item).reduce(</div><div class="line">      function(nextState, key) &#123;</div><div class="line">        state[key] +=item[key];</div><div class="line">        return state;</div><div class="line">      &#125;,</div><div class="line">      &#123;&#125;</div><div class="line">    );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var initialState = &#123;price:0, p1: 0&#125;;</div><div class="line">var items = [&#123;price: 10,p1:1&#125;, &#123;price: 120,p1:1&#125;, &#123;price: 1000,p1:1&#125;];</div><div class="line">var totals = items.reduce(manageReducers, initialState);</div><div class="line">console.log(totals);</div><div class="line">//&#123;price: 1130, p1: 3&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://segmentfault.com/a/1190000010731933" target="_blank" rel="external">参阅资料</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组的map方法&quot;&gt;&lt;a href=&quot;#数组的map方法&quot; class=&quot;headerlink&quot; title=&quot;数组的map方法&quot;&gt;&lt;/a&gt;数组的map方法&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js 知识点 一</title>
    <link href="http://yoohannah.github.io/post/designMode/js1.html"/>
    <id>http://yoohannah.github.io/post/designMode/js1.html</id>
    <published>2018-12-08T01:29:37.000Z</published>
    <updated>2018-12-16T02:59:06.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-lt-script-gt-标签几个属性"><a href="#1-lt-script-gt-标签几个属性" class="headerlink" title="1.&lt; script &gt; 标签几个属性"></a>1.&lt; script &gt; 标签几个属性</h1><p><b>async :</b>立即异步下载，因此不保证能够按指定的先后顺序执行，但会在load事件前，DOMContentLoad前后执行<br><b>defer :</b>延迟执行，也不保证按顺序执行，在DOMContentLoad前后执行<br><b>src :</b>外部文件链接<br><b>charset :</b>src指定代码的字符集，防止出现乱码<br><b>language :</b>已废弃，表示脚本语言，<br><b>type :</b>值为脚本语言内容类型（MIME），language替代属性，服务器传递过来类型为application/x-javascript需要注意，一个是可能导致脚本被忽略，另一个是可能触发浏览器XHTML标准模式；另外外链文件不是js文件时，一定要设置该值</p>
<h1 id="2-js-代码执行过程"><a href="#2-js-代码执行过程" class="headerlink" title="2.js 代码执行过程"></a>2.js 代码执行过程</h1><p>包括两个部分一个是编译，或者叫预处理过程，一个是执行<br>编译过程 首先会创建一个全局作用域，然后进行词法分析，<br>词法分析过程会涉及到变量提升和函数声明提前处理，<br>即词法分析到变量声明会先判断当前域到全局域有没有该变量声明，如果有，就会将该变量挂到该作用域的对象上，<br>如果到全局域都没有则以全局为背景，新建该变量，并为其分配内存，<br>对于基本类型，变量中会保存它的值，对于对象，变量中会保存值所在内存的内存地址，<br>在一定场景下，这里就相当于发生了变量提升，把变量从局部提升到了全局，或者将声明提前到了使用之前，<br><b>避免变量提升</b>可以使用es6的let 关键字或者使用立即执行实现变量声明使用，但要注意使用let重复声明会报错，var 会同名覆盖；<br>当遇到函数声明时，会直接按声明顺序，将声明提前到代码顶端，<br><b>重复声明</b> 的函数会被后者覆盖，<br>如果变量名与函数名相同，则无论原来词法位置如何，先将函数声明提前到顶端，不再进行变量声明，变量名在哪赋值，则原函数在哪被覆盖，<br>覆盖之前调用使用原函数<br>提前之后会为函数创建作用域，<br>这时创建的作用域就是函数的 【【scope】】属性，保存着指向父域到全局域的指针<br>（指针就是指向活动对象的一个地址，全局域浏览器环境就是windows,nodejs环境就是global）<br>将来执行时会根据此指针建立作用域链，作用域链就是指针列表，指向不同层级作用域的内存，在里面取值<br>以上就基本上是编译过程，除了一些特定的编译规则，编译过程还会会使用大量技巧进行优化提升编译速度<br>但在使用js时，需要注意try-catch,with和eval三个语法关键字的使用，因为在使用它们时，会创建块级作用域，<br>破坏掉编译器原有的创建管理作用域的规则，在编译时，编译器也就不会对其中的代码进行优化，最终导致性能变差</p>
<p>运行过程，基本就是在运行函数，函数在运行时会首先根据【【scope】】属性拿到父域到全局的指针，创建指针列表即作用域链，<br>然后创建函数执行的局部作用域，将函数中声明的变量挂到局部作用域活动对象上，然后将局部作用域指针推向作用域链前端，<br>在用到变量值时，会根据作用域链依次查找取值<br>函数执行结束后，局部活动对象被销毁，作用域链被销毁，进行垃圾回收<br>但是对于声明在一个函数内部的函数来说，这个声明的函数在声明时，就会包含其父域的活动对象，<br>因此在外部使用该函数时，可以访问到其父域的变量，实现了父域访问子域变量，延长了变量的使用范围，也就是常见的闭包现象，<br>缺点就是闭包的函数执行完毕后，因为本身【【scope】】会指向父域的活动对象，所以父域的活动对象始终不会被回收,除非闭包函数被销毁<br>从而有可能造成内存泄露，为什么说有可能，因为父活动对象占的内存其实是比较小的，造成内存泄露的真正原因是使用闭包易造成循环引用，<br>尤其是闭包作用域中保存dom结点时，如果是在IE中，dom和bom都是以C++的COM对象保存的，垃圾回收机制是技术策略，<br>因此循环引用的话，永远都不会被回收</p>
<p>补充，对于未以分号结尾的语句，会采用能合就合的原则，即，会尝试和下一行语句合并执行，如果能合并执行就合并执行，<br>不能合并执行就在中间加分号再执行，如果再执行不了就会报错<br>好处就是对于条件判断语句可进行一行一行判断<br>坏处就是如果下一行以大括号开头，上一行语句就会变成函数，导致出现意想不到的结果<br>两个例外，<br>对于return，break,continue语句不会做尝试合并；<br>对于++，–自增自减符后没有分号，上一行也没分号情况，自增自减会和下一行合并，上一行自行添加分号</p>
<p>以上即是我所了解的js运行机制</p>
<h1 id="3-关于对象继承"><a href="#3-关于对象继承" class="headerlink" title="3.关于对象继承"></a>3.关于对象继承</h1><p>3.0  new 操作符调用构造函数 执行过程<br>  1.创建或者构造一个全新的对象<br>  2.将构造函数的作用域赋给这个新的对象,<br>  3.执行构造函数 (为这个新对象添加属性) ，第二，三步相当于func.call(newobj)<br>  4.如果构造函数没有返回值或返回值非对象，则返回新对象，否则返回构造函数return的对象</p>
<p>3.1 继承的6种方式及优缺点<br>    <b>第一种原型链方式</b>，子类的原型对象指向父类的实例<br>    缺点<br>        给原型添加方法必须要在替换原型的语句之后；<br>        不能实现多继承（原型指向多个父对象）；<br>        所有属性共享<br>        无法传递参数到父类进行初始化<br>    <b>第二种借助构造函数</b>，在子类构造函数中使用call或者apply执行父类构造函数<br>    优点<br>        可以实现多继承<br>        可以传递参数<br>        方法属性不共享<br>    缺点<br>        只能继承构造函数中属性，不能继承原型上方法，不能复用方法<br>        实例仅为子类实例，不是父类实例<br>    <b>第三种组合继承</b>，以上两组结合在一起，两种方式都执行<br>    缺点<br>        要调用两次父类构造函数，影响性能<br>        实例属性和原型属性各占一份，同名覆盖机制，重复占内存，没必要<br>    <b>第四种原型式继承</b>，借助object()或者object.create()函数,缺点同原型链方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function object(o)&#123;</div><div class="line"> function F()&#123;&#125;</div><div class="line"> F.prototype = o;</div><div class="line"> return new F();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><b>第五种寄生式继承</b>，利用原型式继承和增强对象过程的封装函数创建子类，缺点同原型链方式<br><b>第六种寄生组合式继承</b>，保留借助构造函数部分，原型部分功能借助中间函数处理，<br>中间函数借助object拿到父类prototype，给到子类的prototype,从而完美解决组合继承的缺点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function inheritPrototype(subType,superType)&#123;</div><div class="line">  var prototype = object(superType.prototype)</div><div class="line">  prototype.constructor = subType</div><div class="line">  subType.prototype = prototype</div><div class="line">&#125;</div><div class="line">subType.prototype.__proto__ = superType</div></pre></td></tr></table></figure>
<p>3.2 es6 使用class extend实现继承<br>使用class声明构造函数时，本来挂在this上的属性，放在constructor（）函数里面执行初始化，<br>挂在prototype上的方法直接放在class里面声明</p>
<p>使用extend继承时，需要在constructor里面先执行super函数才能使用this关键字，<br>增强方法同样直接在class中和constructor并列声明，相当于挂在prototype上</p>
<p>注意super函数只能在consructor中运行；super用作对象在constructor中使用时，相当于this,<br>添加属性会添加在当前对象上，运行函数时会调用继承的父类的方法</p>
<p>还有就是class extend继承null和 什么也不继承是，相当于继承Function.prototype<br>继承Object时，子类就相当于object 的复制，子类实例就是object实例</p>
<h1 id="4-关于this-四种使用场景"><a href="#4-关于this-四种使用场景" class="headerlink" title="4.关于this 四种使用场景"></a>4.关于this 四种使用场景</h1><p>   普通函数执行，指向全局作用域<br>   对象属性方法调用，指向调用对象<br>   call,apply中强制绑定对象，this执行绑定的对象<br>   构造函数中this指向构造的新对象<br>   （箭头函数中this,指向词法作用域的父域）</p>
<h1 id="5-js文件位置"><a href="#5-js文件位置" class="headerlink" title="5.js文件位置"></a>5.js文件位置</h1><p>   放html底部原因：<br>   下载解析执行过程是阻断式的，会停止页面渲染，造成白屏，影响用户体验；<br>   另外JS中如果有对dom的操作，页面中还没有dom,获取不到，是不符合逻辑的，会报错</p>
<p>   哪些js功能文件可以放顶部：<br>   与css相关的js,比如rem单位的换算，需要根据根结点进行设置<br>   使用的框架需要在根结点将浏览器支持的样式罗列出来</p>
<h1 id="6-什么情况下用内部文件，内部文件比外部文件好处在哪？"><a href="#6-什么情况下用内部文件，内部文件比外部文件好处在哪？" class="headerlink" title="6.什么情况下用内部文件，内部文件比外部文件好处在哪？"></a>6.什么情况下用内部文件，内部文件比外部文件好处在哪？</h1><p>   内部文件相比外部文件最大好处就是性能提升，因为访问外部文件时，不管文件大小都会造成一次网络请求链接，请求服务器，下载文件，<br>   解析文件，除了文件本身代码外，还要处理文件头文件尾的请求，增加了链接数，从而造成性能影响<br>   对于功能短小精悍，不会被到处复用的js代码不适合采用外部文件，应该采用内部文件写法，尤其对手机端页面有性能提升</p>
<h1 id="7-开发过程避免缓存方法"><a href="#7-开发过程避免缓存方法" class="headerlink" title="7.开发过程避免缓存方法"></a>7.开发过程避免缓存方法</h1><p>   在浏览器开启禁用缓存的模式<br>   手动清缓存 ctrl+shfit+del<br>   引用的文件名添加随机数，浏览器根据文件名不同，就会重新获取资源更新缓存</p>
<h1 id="8-使用严格模式弊端及解决办法"><a href="#8-使用严格模式弊端及解决办法" class="headerlink" title="8.使用严格模式弊端及解决办法"></a>8.使用严格模式弊端及解决办法</h1><p>   在代码压缩时，’use strict’ 这一行可能不在位于第一行，<br>   或者后续代码不需要在严格模式下执行，被压缩在了严格模式范围内，导致了全部以严格模式执行</p>
<p>   解决办法就是，将需要严格模式执行的代码放在匿名函数中，形成代码块，在函数中使用严格模式</p>
<h1 id="9-立即执行函数好处"><a href="#9-立即执行函数好处" class="headerlink" title="9.立即执行函数好处"></a>9.立即执行函数好处</h1><p>   避免变量污染：有些变量仅在小功能内使用，将小功能封装起来，就可以避免这些变量暴露到全局，<br>   另外函数本身没有函数名，不会增加全局变量<br>   提升性能：功能所需变量全都在函数内时，查找变量快<br>   有利于压缩：一部分代码执行需要用到的变量变量名太长，将这段代码封装成立即执行函数，将长变量名以参数形式传进去<br>   避免全局命名冲突：一段代码需要用到两个代表不同功能但名称相同的变量，可以将该段代码封装成立即执行函数，<br>   将其中一个变量以参数形式传递进来，达到换名的目的<br>   保存闭包状态：循环执行异步代码时，将异步代码用立即执行函数包裹，函数内可保存本次循环的状态<br>   改变代码运行顺序：umd,通用模块规范，function（fn）{fn()}()</p>
<h1 id="10-变量类型"><a href="#10-变量类型" class="headerlink" title="10.变量类型"></a>10.变量类型</h1><p>   根据当前变量的值的类型确定<br>   如果想要进行标记，方法有三种<br>   初始化时指定相应类型值<br>   使用匈牙利标记法，用单字母表示类型，添加到变量命中，例sName 代表string类型<br>   使用注释，变量声明时，在旁边添加注释</p>
<h1 id="11-null-vs-undefined"><a href="#11-null-vs-undefined" class="headerlink" title="11.null vs undefined"></a>11.null vs undefined</h1><p>   转数字时，null –&gt;0;undefined–&gt;NaN<br>   undefined可以当做windows对象上的一个属性，null不行</p>
<h1 id="12-类型转换"><a href="#12-类型转换" class="headerlink" title="12. 类型转换"></a>12. 类型转换</h1><p>基本类型包括，undefined，null,boolean,string,number</p>
<p>基本类型 —&gt; boolean   Boolean(someval) 相当于 !!someval<br>undefined，null,NaN,’’,+0,-0 —&gt; false<br>其他 —&gt; true </p>
<p>基本类型 —&gt; string  String（someval）相当于 someval+’’<br>一般情况直接加引号<br>[] —&gt; ‘’<br>{} —&gt; ‘[object object]’</p>
<p>基本类型—&gt;number  + someval  相当于 Number（someval）<br>undefined,{} —&gt; NaN<br>false, null,’’,[],—&gt; 0<br>true —&gt; 1<br>‘123’ —&gt; 123<br>‘abc’ —&gt; NaN<br>[]—&gt; toString —&gt; ‘’ —&gt; 0<br>{} —&gt; valueOf —&gt; {} —&gt; toString —&gt; ‘[object object]’ —&gt; NaN</p>
<p>基本类型 —&gt;对象<br>undefined，null —&gt; {}<br>true/123 —&gt; {initval:true/123}<br>‘abc’ —&gt; {initval:’abc’,length:3,0:’a’,1:’b’,2:’c’}</p>
<p>对象 —&gt;基本类型</p>
<p>关于–对象分类：<br>内部对象（错误对象；常用对象：Boolean,Number,String,Object,Array,Function,Date,Exec;内置对象：Math,global,Json）<br>宿主对象：windows,document<br>自定义对象</p>
<p>关于–属性访问<br>obj.someprop—&gt;检查obj是不是null/undefined—&gt;是|不是—&gt;报错|是不是Object,不是的话转object—&gt;取值<br>obj[someval]—&gt;检查obj是不是null/undefined—&gt;是|不是—&gt;报错|是不是Object,不是的话转object—&gt;计算someval拿到string—&gt;取值</p>
<p>Boolean —&gt;true<br>Number —&gt;基本类型转的|{}/{a:1}|Date—&gt;相应值|NaN|时间戳<br>Array.toString:数组每一项转字符串<br>Function.toString:原代码字符串形式<br>Date.toString:日期和时间组合形式<br>Exec.toString:正则字符串形式</p>
<p>运算转换</p>
<p>Number()参数不能有非数字<br>parseInt()参数只能为字符串，非字符串会进行强制转化字符串，可含非数字，但不能以非数字开头<br>一元操作符对任何数据类型有效，得到数字</p>
<p>&#43;二元运算侧重转字符串，然后进行字符串拼接<br>其中一个为字符串或者两个都是对象时，转字符串拼接<br>undefined,null,Boolean,数字混合运算+时，会被转数字再计算<br>{}为第一个运算值时，会被当做函数结束，不参与计算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">null + null --&gt; 0</div><div class="line">undefined + null --&gt; NaN</div><div class="line">[] + [] --&gt; &apos;&apos;</div><div class="line">1 + [1,2] --&gt; &apos;11,2&apos;</div><div class="line">1 + &#123;a:1&#125; --&gt; &apos;1[object object]&apos;</div><div class="line">&#123;a:1&#125; + 1 --&gt; 1</div><div class="line">&#123;&#125; + &#123;&#125; --&gt; NaN</div><div class="line">(&#123;&#125;) + &#123;&#125; --&gt; &apos;[object object][object object]&apos;</div><div class="line">[] + &#123;&#125; --&gt; &apos;[object object]&apos;</div><div class="line">&#123;&#125; + [] --&gt; 0</div><div class="line">var a = &#123;&#125;</div><div class="line">a + a --&gt;&apos;[object object][object object]&apos;</div></pre></td></tr></table></figure></p>
<p>&#42;/- 转数字，进行相减,如果不能转数字，返回NaN</p>
<p>&gt;/&lt; 侧重转数字<br>string &lt; string 字典比较<br>非字符串&lt;非字符串/字符串 都转数字然后比较</p>
<p>string == number 字符串转数字<br>boolean == 其他类型 二者转数字然后比较<br>null == undefined —&gt;true undefined和null只与对方和自己==比较时为true，其他均为false<br>null === undefined —&gt;false<br>非对象 == 对象 与数字比较object转数字，与字符串比较二者转数字再比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&apos;0&apos; == null  //false</div><div class="line">&apos;0&apos; == undefined  //false</div><div class="line">&apos;0&apos; == false  //true</div><div class="line">&apos;0&apos; == NaN  //false</div><div class="line">&apos;0&apos; == 0  //true</div><div class="line">&apos;0&apos; == &apos;&apos;  //true</div><div class="line"></div><div class="line">false == null  //false</div><div class="line">false == undefined  //false</div><div class="line">false == NaN  //false</div><div class="line">false == 0  //true</div><div class="line">false == &apos;&apos;  //true</div><div class="line">false == []  //true</div><div class="line">false == &#123;&#125; //false</div><div class="line"></div><div class="line">&apos;&apos; == null  //false</div><div class="line">&apos;&apos; == undefined  //false</div><div class="line">&apos;&apos; == NaN  //false</div><div class="line">&apos;&apos; == 0  //true</div><div class="line">&apos;&apos; == []  //true</div><div class="line">&apos;&apos; == &#123;&#125; //false</div><div class="line"></div><div class="line">0 == null  //false</div><div class="line">0 == undefined  //false</div><div class="line">0 == NaN  //false</div><div class="line">0 == []  //true</div><div class="line">0 == &#123;&#125; //false</div><div class="line"></div><div class="line">[] == ![]</div></pre></td></tr></table></figure></p>
<p>&amp;&amp;和|| 计算结果根据短路原则判断到了哪里，返回最后一个进行判断的值</p>
<p>运算符优先级<br>属性访问.<br>一元操作符（+，-，++，–）<br>二元操作符（+-*/）<br>比较（&gt;,&lt;)<br>相等（==，===，！=）<br>与&amp;&amp;，或||<br>三目运算符<br>赋值</p>
<p>运算符结合性<br>除了一元操作符，三目运算符和赋值是右结合，其他都是左结合</p>
<p>减少小数计算误差<br>尽量不使用小数进行比较或运算<br>转整数计算，再转回相应位数小数<br>使用toFixed()四舍五入<br>两个情境需要重复计算时，保证前后书写顺序</p>
<h1 id="13-数组相关方法"><a href="#13-数组相关方法" class="headerlink" title="13. 数组相关方法"></a>13. 数组相关方法</h1><p><img src="/image/arrmethod.jpg" alt="arrmethod"></p>
<h1 id="14-字符串相关方法"><a href="#14-字符串相关方法" class="headerlink" title="14.字符串相关方法"></a>14.字符串相关方法</h1><p><img src="/image/strmethod.jpg" alt="strmethod"></p>
<h1 id="15-日期相关方法"><a href="#15-日期相关方法" class="headerlink" title="15.日期相关方法"></a>15.日期相关方法</h1><p>   一共 33个<br>   set/get（UTC）FullYear,Month,Date,Hours,Minutes,Seconds,Millseconds<br>   set/get Time<br>   get(UTC) Day<br>   getTimezoneOffset</p>
<h1 id="16-Math三个舍入方法"><a href="#16-Math三个舍入方法" class="headerlink" title="16. Math三个舍入方法"></a>16. Math三个舍入方法</h1><p>  Math.ceil:比值大的最小整数<br>  Math.round:四舍五入<br>  Math.floor:比值小的最大整数</p>
<h1 id="17-setInterval-注意问题"><a href="#17-setInterval-注意问题" class="headerlink" title="17. setInterval 注意问题"></a>17. setInterval 注意问题</h1><p>累积效应<br>代码执行时间大于间隔时间，后续调用会进行累积，累积会在短时间内连续触发</p>
<p>当用于动画时，因与显示器刷新频率不统一会造成视觉卡顿，解决办法如下：<br>一种是使用CSS3创建动画，根据显示器刷新执行动画<br>另一种是使用 requestAnimationframe(function(){})函数，也是在显示器刷新时执行<br>可以解决CSS3无法实现的，例如滚动控制等效果</p>
<h1 id="18-关于DOM"><a href="#18-关于DOM" class="headerlink" title="18. 关于DOM"></a>18. 关于DOM</h1><p>   document 三个属性<br>   url：地址栏中URL<br>   domain:域名，跨域域名 X；父域名到子域名 X；<br>   referer:上一页URL,可在跳转时，判断与当前页是否在同一域，是的话，就可以back,否则 location.href其他页面<br>   dom.getAttribute(‘style’),得到样式字符串<br>   dom.style 得到到样式对象<br>   dom.getAttribute(‘onclick’) ,得到代码字符串<br>   dom.onclick 得到函数对象</p>
<p>   动态合集<br>   使用时可能会造成死循环<br>   使用框架如Jquery获取的合集不具有动态性<br>   使用 queryselect(all)()获取到的也是静态合集</p>
<p>   动态合集生成原理：<br>   浏览器通过DOM树预先缓存起来，获取时，浏览器会通过缓存直接注册，创建一个变量返回</p>
<p>   静态合集生成原理：<br>   获取标识是一个CSS选择器，浏览器会先去解析字符串，判断是一个CSS选择器，<br>   分析选择器并创建一个选择器结构，浏览器根据DOM树创建一个静态文件，即DOM树的一个快照<br>   然后拿选择器和快照进行对比，符合选择器就放到合集中，知道整个快照对比完，再把合集的快照返回</p>
<h1 id="19-事件"><a href="#19-事件" class="headerlink" title="19. 事件"></a>19. 事件</h1><p>   绑定方式</p>
<p>   直接通过HTML属性绑定<br>   缺点<br>   有可能响应函数还未被解析就被触发<br>   事件名和回调1对1，修改繁琐<br>   响应执行时，作用域为全局，不同浏览器解析规则不同，造成某些对象无法访问</p>
<p>   使用dom属性绑定<br>   冒泡阶段执行<br>   缺点<br>   只能绑定一个响应，后续赋值会被覆盖</p>
<p>   IE attachEvent/detachEvent绑定/解绑<br>   冒泡阶段执行<br>   绑定多个时按按绑定顺序的逆序执行</p>
<p>   addEventListener()/removeEventListener()绑定/解绑<br>   第三个参数为对象时，passive属性为true时，会针对touchstart,touchend等特定事件通过开启两个线程，<br>   一个执行浏览器默认行为，一个执行JS进行优化</p>
<p>   事件优先级<br>   浏览器在绑定事件而不是JS在绑定事件</p>
<p>   1.html标签绑定事件会被dom属性事件覆盖<br>   2.html标签优先执行，即使被属性事件覆盖，则执行被覆盖的属性事件<br>   3.仅有监听事件和属性事件时，按绑定顺序执行，即事件对象的冒泡事件可能会在捕获事件之前执行</p>
<p>   event对象属性<br>   curentTarget:响应函数绑定的对象<br>   target:发生事件的对象</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-lt-script-gt-标签几个属性&quot;&gt;&lt;a href=&quot;#1-lt-script-gt-标签几个属性&quot; class=&quot;headerlink&quot; title=&quot;1.&amp;lt; script &amp;gt; 标签几个属性&quot;&gt;&lt;/a&gt;1.&amp;lt; script &amp;gt; 
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>js 知识点 一</title>
    <link href="http://yoohannah.github.io/post/js/js1.html"/>
    <id>http://yoohannah.github.io/post/js/js1.html</id>
    <published>2018-12-08T01:29:37.000Z</published>
    <updated>2018-12-22T05:09:03.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-lt-script-gt-标签几个属性"><a href="#1-lt-script-gt-标签几个属性" class="headerlink" title="1.&lt; script &gt; 标签几个属性"></a>1.&lt; script &gt; 标签几个属性</h1><p><b>async :</b>立即异步下载，因此不保证能够按指定的先后顺序执行，但会在load事件前，DOMContentLoad前后执行<br><b>defer :</b>延迟执行，也不保证按顺序执行，在DOMContentLoad前后执行<br><b>src :</b>外部文件链接<br><b>charset :</b>src指定代码的字符集，防止出现乱码<br><b>language :</b>已废弃，表示脚本语言，<br><b>type :</b>值为脚本语言内容类型（MIME），language替代属性，服务器传递过来类型为application/x-javascript需要注意，一个是可能导致脚本被忽略，另一个是可能触发浏览器XHTML标准模式；另外外链文件不是js文件时，一定要设置该值</p>
<h1 id="2-js-代码执行过程"><a href="#2-js-代码执行过程" class="headerlink" title="2.js 代码执行过程"></a>2.js 代码执行过程</h1><p>包括两个部分一个是编译，或者叫预处理过程，一个是执行<br>编译过程 首先会创建一个全局作用域，然后进行词法分析，<br>词法分析过程会涉及到变量提升和函数声明提前处理，<br>即词法分析到变量声明会先判断当前域到全局域有没有该变量声明，如果有，就会将该变量挂到该作用域的对象上，<br>如果到全局域都没有则以全局为背景，新建该变量，并为其分配内存，<br>对于基本类型，变量中会保存它的值，对于对象，变量中会保存值所在内存的内存地址，<br>在一定场景下，这里就相当于发生了变量提升，把变量从局部提升到了全局，或者将声明提前到了使用之前，<br><b>避免变量提升</b>可以使用es6的let 关键字或者使用立即执行实现变量声明使用，但要注意使用let重复声明会报错，var 会同名覆盖；<br>当遇到函数声明时，会直接按声明顺序，将声明提前到代码顶端，<br><b>重复声明</b> 的函数会被后者覆盖，<br>如果变量名与函数名相同，则无论原来词法位置如何，先将函数声明提前到顶端，不再进行变量声明，变量名在哪赋值，则原函数在哪被覆盖，<br>覆盖之前调用使用原函数<br>提前之后会为函数创建作用域，<br>这时创建的作用域就是函数的 【【scope】】属性，保存着指向父域到全局域的指针<br>（指针就是指向活动对象的一个地址，全局域浏览器环境就是windows,nodejs环境就是global）<br>将来执行时会根据此指针建立作用域链，作用域链就是指针列表，指向不同层级作用域的内存，在里面取值<br>以上就基本上是编译过程，除了一些特定的编译规则，编译过程还会会使用大量技巧进行优化提升编译速度<br>但在使用js时，需要注意try-catch,with和eval三个语法关键字的使用，因为在使用它们时，会创建块级作用域，<br>破坏掉编译器原有的创建管理作用域的规则，在编译时，编译器也就不会对其中的代码进行优化，最终导致性能变差</p>
<p>运行过程，基本就是在运行函数，函数在运行时会首先根据【【scope】】属性拿到父域到全局的指针，创建指针列表即作用域链，<br>然后创建函数执行的局部作用域，将函数中声明的变量挂到局部作用域活动对象上，然后将局部作用域指针推向作用域链前端，<br>在用到变量值时，会根据作用域链依次查找取值<br>函数执行结束后，局部活动对象被销毁，作用域链被销毁，进行垃圾回收<br>但是对于声明在一个函数内部的函数来说，这个声明的函数在声明时，就会包含其父域的活动对象，<br>因此在外部使用该函数时，可以访问到其父域的变量，实现了父域访问子域变量，延长了变量的使用范围，也就是常见的闭包现象，<br>缺点就是闭包的函数执行完毕后，因为本身【【scope】】会指向父域的活动对象，所以父域的活动对象始终不会被回收,除非闭包函数被销毁<br>从而有可能造成内存泄露，为什么说有可能，因为父活动对象占的内存其实是比较小的，造成内存泄露的真正原因是使用闭包易造成循环引用，<br>尤其是闭包作用域中保存dom结点时，如果是在IE中，dom和bom都是以C++的COM对象保存的，垃圾回收机制是技术策略，<br>因此循环引用的话，永远都不会被回收</p>
<p>补充，对于未以分号结尾的语句，会采用能合就合的原则，即，会尝试和下一行语句合并执行，如果能合并执行就合并执行，<br>不能合并执行就在中间加分号再执行，如果再执行不了就会报错<br>好处就是对于条件判断语句可进行一行一行判断<br>坏处就是如果下一行以大括号开头，上一行语句就会变成函数，导致出现意想不到的结果<br>两个例外，<br>对于return，break,continue语句不会做尝试合并；<br>对于++，–自增自减符后没有分号，上一行也没分号情况，自增自减会和下一行合并，上一行自行添加分号</p>
<p>以上即是我所了解的js运行机制</p>
<h1 id="3-关于对象继承"><a href="#3-关于对象继承" class="headerlink" title="3.关于对象继承"></a>3.关于对象继承</h1><p>3.0  new 操作符调用构造函数 执行过程<br>  1.创建或者构造一个全新的对象<br>  2.将构造函数的作用域赋给这个新的对象,<br>  3.执行构造函数 (为这个新对象添加属性) ，第二，三步相当于func.call(newobj)<br>  4.如果构造函数没有返回值或返回值非对象，则返回新对象，否则返回构造函数return的对象</p>
<p>3.1 继承的6种方式及优缺点<br>    <b>第一种原型链方式</b>，子类的原型对象指向父类的实例<br>    缺点<br>        给原型添加方法必须要在替换原型的语句之后；<br>        不能实现多继承（原型指向多个父对象）；<br>        所有属性共享<br>        无法传递参数到父类进行初始化<br>    <b>第二种借助构造函数</b>，在子类构造函数中使用call或者apply执行父类构造函数<br>    优点<br>        可以实现多继承<br>        可以传递参数<br>        方法属性不共享<br>    缺点<br>        只能继承构造函数中属性，不能继承原型上方法，不能复用方法<br>        实例仅为子类实例，不是父类实例<br>    <b>第三种组合继承</b>，以上两组结合在一起，两种方式都执行<br>    缺点<br>        要调用两次父类构造函数，影响性能<br>        实例属性和原型属性各占一份，同名覆盖机制，重复占内存，没必要<br>    <b>第四种原型式继承</b>，借助object()或者object.create()函数,缺点同原型链方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function object(o)&#123;</div><div class="line"> function F()&#123;&#125;</div><div class="line"> F.prototype = o;</div><div class="line"> return new F();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><b>第五种寄生式继承</b>，利用原型式继承和增强对象过程的封装函数创建子类，缺点同原型链方式<br><b>第六种寄生组合式继承</b>，保留借助构造函数部分，原型部分功能借助中间函数处理，<br>中间函数借助object拿到父类prototype，给到子类的prototype,从而完美解决组合继承的缺点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function inheritPrototype(subType,superType)&#123;</div><div class="line">  var prototype = object(superType.prototype)</div><div class="line">  prototype.constructor = subType</div><div class="line">  subType.prototype = prototype</div><div class="line">&#125;</div><div class="line">subType.prototype.__proto__ = superType</div></pre></td></tr></table></figure>
<p>3.2 es6 使用class extend实现继承<br>使用class声明构造函数时，本来挂在this上的属性，放在constructor（）函数里面执行初始化，<br>挂在prototype上的方法直接放在class里面声明</p>
<p>使用extend继承时，需要在constructor里面先执行super函数才能使用this关键字，<br>增强方法同样直接在class中和constructor并列声明，相当于挂在prototype上</p>
<p>注意super函数只能在consructor中运行；super用作对象在constructor中使用时，相当于this,<br>添加属性会添加在当前对象上，运行函数时会调用继承的父类的方法</p>
<p>还有就是class extend继承null和 什么也不继承是，相当于继承Function.prototype<br>继承Object时，子类就相当于object 的复制，子类实例就是object实例</p>
<h1 id="4-关于this-四种使用场景"><a href="#4-关于this-四种使用场景" class="headerlink" title="4.关于this 四种使用场景"></a>4.关于this 四种使用场景</h1><p>   普通函数执行，指向全局作用域<br>   对象属性方法调用，指向调用对象<br>   call,apply中强制绑定对象，this执行绑定的对象<br>   构造函数中this指向构造的新对象<br>   （箭头函数中this,指向词法作用域的父域）</p>
<h1 id="5-js文件位置"><a href="#5-js文件位置" class="headerlink" title="5.js文件位置"></a>5.js文件位置</h1><p>   放html底部原因：<br>   下载解析执行过程是阻断式的，会停止页面渲染，造成白屏，影响用户体验；<br>   另外JS中如果有对dom的操作，页面中还没有dom,获取不到，是不符合逻辑的，会报错</p>
<p>   哪些js功能文件可以放顶部：<br>   与css相关的js,比如rem单位的换算，需要根据根结点进行设置<br>   使用的框架需要在根结点将浏览器支持的样式罗列出来</p>
<h1 id="6-什么情况下用内部文件，内部文件比外部文件好处在哪？"><a href="#6-什么情况下用内部文件，内部文件比外部文件好处在哪？" class="headerlink" title="6.什么情况下用内部文件，内部文件比外部文件好处在哪？"></a>6.什么情况下用内部文件，内部文件比外部文件好处在哪？</h1><p>   内部文件相比外部文件最大好处就是性能提升，因为访问外部文件时，不管文件大小都会造成一次网络请求链接，请求服务器，下载文件，<br>   解析文件，除了文件本身代码外，还要处理文件头文件尾的请求，增加了链接数，从而造成性能影响<br>   对于功能短小精悍，不会被到处复用的js代码不适合采用外部文件，应该采用内部文件写法，尤其对手机端页面有性能提升</p>
<h1 id="7-开发过程避免缓存方法"><a href="#7-开发过程避免缓存方法" class="headerlink" title="7.开发过程避免缓存方法"></a>7.开发过程避免缓存方法</h1><p>   在浏览器开启禁用缓存的模式<br>   手动清缓存 ctrl+shfit+del<br>   引用的文件名添加随机数，浏览器根据文件名不同，就会重新获取资源更新缓存</p>
<h1 id="8-使用严格模式弊端及解决办法"><a href="#8-使用严格模式弊端及解决办法" class="headerlink" title="8.使用严格模式弊端及解决办法"></a>8.使用严格模式弊端及解决办法</h1><p>   在代码压缩时，’use strict’ 这一行可能不在位于第一行，<br>   或者后续代码不需要在严格模式下执行，被压缩在了严格模式范围内，导致了全部以严格模式执行</p>
<p>   解决办法就是，将需要严格模式执行的代码放在匿名函数中，形成代码块，在函数中使用严格模式</p>
<h1 id="9-立即执行函数好处"><a href="#9-立即执行函数好处" class="headerlink" title="9.立即执行函数好处"></a>9.立即执行函数好处</h1><p>   避免变量污染：有些变量仅在小功能内使用，将小功能封装起来，就可以避免这些变量暴露到全局，<br>   另外函数本身没有函数名，不会增加全局变量<br>   提升性能：功能所需变量全都在函数内时，查找变量快<br>   有利于压缩：一部分代码执行需要用到的变量变量名太长，将这段代码封装成立即执行函数，将长变量名以参数形式传进去<br>   避免全局命名冲突：一段代码需要用到两个代表不同功能但名称相同的变量，可以将该段代码封装成立即执行函数，<br>   将其中一个变量以参数形式传递进来，达到换名的目的<br>   保存闭包状态：循环执行异步代码时，将异步代码用立即执行函数包裹，函数内可保存本次循环的状态<br>   改变代码运行顺序：umd,通用模块规范，function（fn）{fn()}()</p>
<h1 id="10-变量类型"><a href="#10-变量类型" class="headerlink" title="10.变量类型"></a>10.变量类型</h1><p>   根据当前变量的值的类型确定<br>   如果想要进行标记，方法有三种<br>   初始化时指定相应类型值<br>   使用匈牙利标记法，用单字母表示类型，添加到变量命中，例sName 代表string类型<br>   使用注释，变量声明时，在旁边添加注释</p>
<h1 id="11-null-vs-undefined"><a href="#11-null-vs-undefined" class="headerlink" title="11.null vs undefined"></a>11.null vs undefined</h1><p>   转数字时，null –&gt;0;undefined–&gt;NaN<br>   undefined可以当做windows对象上的一个属性，null不行</p>
<h1 id="12-类型转换"><a href="#12-类型转换" class="headerlink" title="12. 类型转换"></a>12. 类型转换</h1><p>基本类型包括，undefined，null,boolean,string,number</p>
<p>基本类型 —&gt; boolean   Boolean(someval) 相当于 !!someval<br>undefined，null,NaN,’’,+0,-0 —&gt; false<br>其他 —&gt; true </p>
<p>基本类型 —&gt; string  String（someval）相当于 someval+’’<br>一般情况直接加引号<br>[] —&gt; ‘’<br>{} —&gt; ‘[object object]’</p>
<p>基本类型—&gt;number  + someval  相当于 Number（someval）<br>undefined,{} —&gt; NaN<br>false, null,’’,[],—&gt; 0<br>true —&gt; 1<br>‘123’ —&gt; 123<br>‘abc’ —&gt; NaN<br>[]—&gt; toString —&gt; ‘’ —&gt; 0<br>{} —&gt; valueOf —&gt; {} —&gt; toString —&gt; ‘[object object]’ —&gt; NaN</p>
<p>基本类型 —&gt;对象<br>undefined，null —&gt; {}<br>true/123 —&gt; {initval:true/123}<br>‘abc’ —&gt; {initval:’abc’,length:3,0:’a’,1:’b’,2:’c’}</p>
<p>对象 —&gt;基本类型</p>
<p>关于–对象分类：<br>内部对象（错误对象；常用对象：Boolean,Number,String,Object,Array,Function,Date,Exec;内置对象：Math,global,Json）<br>宿主对象：windows,document<br>自定义对象</p>
<p>关于–属性访问<br>obj.someprop—&gt;检查obj是不是null/undefined—&gt;是|不是—&gt;报错|是不是Object,不是的话转object—&gt;取值<br>obj[someval]—&gt;检查obj是不是null/undefined—&gt;是|不是—&gt;报错|是不是Object,不是的话转object—&gt;计算someval拿到string—&gt;取值</p>
<p>Boolean —&gt;true<br>Number —&gt;基本类型转的|{}/{a:1}|Date—&gt;相应值|NaN|时间戳<br>Array.toString:数组每一项转字符串<br>Function.toString:原代码字符串形式<br>Date.toString:日期和时间组合形式<br>Exec.toString:正则字符串形式</p>
<p>运算转换</p>
<p>Number()参数不能有非数字<br>parseInt()参数只能为字符串，非字符串会进行强制转化字符串，可含非数字，但不能以非数字开头<br>一元操作符对任何数据类型有效，得到数字</p>
<p>&#43;二元运算侧重转字符串，然后进行字符串拼接<br>其中一个为字符串或者两个都是对象时，转字符串拼接<br>undefined,null,Boolean,数字混合运算+时，会被转数字再计算<br>{}为第一个运算值时，会被当做函数结束，不参与计算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">null + null --&gt; 0</div><div class="line">undefined + null --&gt; NaN</div><div class="line">[] + [] --&gt; &apos;&apos;</div><div class="line">1 + [1,2] --&gt; &apos;11,2&apos;</div><div class="line">1 + &#123;a:1&#125; --&gt; &apos;1[object object]&apos;</div><div class="line">&#123;a:1&#125; + 1 --&gt; 1</div><div class="line">&#123;&#125; + &#123;&#125; --&gt; NaN</div><div class="line">(&#123;&#125;) + &#123;&#125; --&gt; &apos;[object object][object object]&apos;</div><div class="line">[] + &#123;&#125; --&gt; &apos;[object object]&apos;</div><div class="line">&#123;&#125; + [] --&gt; 0</div><div class="line">var a = &#123;&#125;</div><div class="line">a + a --&gt;&apos;[object object][object object]&apos;</div></pre></td></tr></table></figure></p>
<p>&#42;/- 转数字，进行相减,如果不能转数字，返回NaN</p>
<p>&gt;/&lt; 侧重转数字<br>string &lt; string 字典比较<br>非字符串&lt;非字符串/字符串 都转数字然后比较</p>
<p>string == number 字符串转数字<br>boolean == 其他类型 二者转数字然后比较<br>null == undefined —&gt;true undefined和null只与对方和自己==比较时为true，其他均为false<br>null === undefined —&gt;false<br>非对象 == 对象 与数字比较object转数字，与字符串比较二者转数字再比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&apos;0&apos; == null  //false</div><div class="line">&apos;0&apos; == undefined  //false</div><div class="line">&apos;0&apos; == false  //true</div><div class="line">&apos;0&apos; == NaN  //false</div><div class="line">&apos;0&apos; == 0  //true</div><div class="line">&apos;0&apos; == &apos;&apos;  //true</div><div class="line"></div><div class="line">false == null  //false</div><div class="line">false == undefined  //false</div><div class="line">false == NaN  //false</div><div class="line">false == 0  //true</div><div class="line">false == &apos;&apos;  //true</div><div class="line">false == []  //true</div><div class="line">false == &#123;&#125; //false</div><div class="line"></div><div class="line">&apos;&apos; == null  //false</div><div class="line">&apos;&apos; == undefined  //false</div><div class="line">&apos;&apos; == NaN  //false</div><div class="line">&apos;&apos; == 0  //true</div><div class="line">&apos;&apos; == []  //true</div><div class="line">&apos;&apos; == &#123;&#125; //false</div><div class="line"></div><div class="line">0 == null  //false</div><div class="line">0 == undefined  //false</div><div class="line">0 == NaN  //false</div><div class="line">0 == []  //true</div><div class="line">0 == &#123;&#125; //false</div><div class="line"></div><div class="line">[] == ![]</div></pre></td></tr></table></figure></p>
<p>&amp;&amp;和|| 计算结果根据短路原则判断到了哪里，返回最后一个进行判断的值</p>
<p>运算符优先级<br>属性访问.<br>一元操作符（+，-，++，–）<br>二元操作符（+-*/）<br>比较（&gt;,&lt;)<br>相等（==，===，！=）<br>与&amp;&amp;，或||<br>三目运算符<br>赋值</p>
<p>运算符结合性<br>除了一元操作符，三目运算符和赋值是右结合，其他都是左结合</p>
<p>减少小数计算误差<br>尽量不使用小数进行比较或运算<br>转整数计算，再转回相应位数小数<br>使用toFixed()四舍五入<br>两个情境需要重复计算时，保证前后书写顺序</p>
<h1 id="13-数组相关方法"><a href="#13-数组相关方法" class="headerlink" title="13. 数组相关方法"></a>13. 数组相关方法</h1><p><img src="/image/arrmethod.jpg" alt="arrmethod"></p>
<h1 id="14-字符串相关方法"><a href="#14-字符串相关方法" class="headerlink" title="14.字符串相关方法"></a>14.字符串相关方法</h1><p><img src="/image/strmethod.jpg" alt="strmethod"></p>
<h1 id="15-日期相关方法"><a href="#15-日期相关方法" class="headerlink" title="15.日期相关方法"></a>15.日期相关方法</h1><p>   一共 33个<br>   set/get（UTC）FullYear,Month,Date,Hours,Minutes,Seconds,Millseconds<br>   set/get Time<br>   get(UTC) Day<br>   getTimezoneOffset</p>
<h1 id="16-Math三个舍入方法"><a href="#16-Math三个舍入方法" class="headerlink" title="16. Math三个舍入方法"></a>16. Math三个舍入方法</h1><p>  Math.ceil:比值大的最小整数<br>  Math.round:四舍五入<br>  Math.floor:比值小的最大整数</p>
<h1 id="17-setInterval-注意问题"><a href="#17-setInterval-注意问题" class="headerlink" title="17. setInterval 注意问题"></a>17. setInterval 注意问题</h1><p>累积效应<br>代码执行时间大于间隔时间，后续调用会进行累积，累积会在短时间内连续触发</p>
<p>当用于动画时，因与显示器刷新频率不统一会造成视觉卡顿，解决办法如下：<br>一种是使用CSS3创建动画，根据显示器刷新执行动画<br>另一种是使用 requestAnimationframe(function(){})函数，也是在显示器刷新时执行<br>可以解决CSS3无法实现的，例如滚动控制等效果</p>
<h1 id="18-关于DOM"><a href="#18-关于DOM" class="headerlink" title="18. 关于DOM"></a>18. 关于DOM</h1><p>   document 三个属性<br>   url：地址栏中URL<br>   domain:域名，跨域域名 X；父域名到子域名 X；<br>   referer:上一页URL,可在跳转时，判断与当前页是否在同一域，是的话，就可以back,否则 location.href其他页面<br>   dom.getAttribute(‘style’),得到样式字符串<br>   dom.style 得到到样式对象<br>   dom.getAttribute(‘onclick’) ,得到代码字符串<br>   dom.onclick 得到函数对象</p>
<p>   动态合集<br>   使用时可能会造成死循环<br>   使用框架如Jquery获取的合集不具有动态性<br>   使用 queryselect(all)()获取到的也是静态合集</p>
<p>   动态合集生成原理：<br>   浏览器通过DOM树预先缓存起来，获取时，浏览器会通过缓存直接注册，创建一个变量返回</p>
<p>   静态合集生成原理：<br>   获取标识是一个CSS选择器，浏览器会先去解析字符串，判断是一个CSS选择器，<br>   分析选择器并创建一个选择器结构，浏览器根据DOM树创建一个静态文件，即DOM树的一个快照<br>   然后拿选择器和快照进行对比，符合选择器就放到合集中，知道整个快照对比完，再把合集的快照返回</p>
<h1 id="19-事件"><a href="#19-事件" class="headerlink" title="19. 事件"></a>19. 事件</h1><p>   绑定方式</p>
<p>   直接通过HTML属性绑定<br>   缺点<br>   有可能响应函数还未被解析就被触发<br>   事件名和回调1对1，修改繁琐<br>   响应执行时，作用域为全局，不同浏览器解析规则不同，造成某些对象无法访问</p>
<p>   使用dom属性绑定<br>   冒泡阶段执行<br>   缺点<br>   只能绑定一个响应，后续赋值会被覆盖</p>
<p>   IE attachEvent/detachEvent绑定/解绑<br>   冒泡阶段执行<br>   绑定多个时按按绑定顺序的逆序执行</p>
<p>   addEventListener()/removeEventListener()绑定/解绑<br>   第三个参数为对象时，passive属性为true时，会针对touchstart,touchend等特定事件通过开启两个线程，<br>   一个执行浏览器默认行为，一个执行JS进行优化</p>
<p>   事件优先级<br>   浏览器在绑定事件而不是JS在绑定事件</p>
<p>   1.html标签绑定事件会被dom属性事件覆盖<br>   2.html标签优先执行，即使被属性事件覆盖，则执行被覆盖的属性事件<br>   3.仅有监听事件和属性事件时，按绑定顺序执行，即事件对象的冒泡事件可能会在捕获事件之前执行</p>
<p>   event对象属性<br>   curentTarget:响应函数绑定的对象<br>   target:发生事件的对象</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-lt-script-gt-标签几个属性&quot;&gt;&lt;a href=&quot;#1-lt-script-gt-标签几个属性&quot; class=&quot;headerlink&quot; title=&quot;1.&amp;lt; script &amp;gt; 标签几个属性&quot;&gt;&lt;/a&gt;1.&amp;lt; script &amp;gt; 
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>拖拽</title>
    <link href="http://yoohannah.github.io/post/react/course/drag.html"/>
    <id>http://yoohannah.github.io/post/react/course/drag.html</id>
    <published>2018-12-04T13:19:37.000Z</published>
    <updated>2018-12-22T05:13:40.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-React-实现拖放的技术要点"><a href="#使用-React-实现拖放的技术要点" class="headerlink" title="使用 React 实现拖放的技术要点"></a>使用 React 实现拖放的技术要点</h1><p>1.如何使用 React 的鼠标事件系统<br>2.如何判断拖放开始和拖放结束<br>3.如何实现拖放元素的位置移动 (可分为两种，一种是直接拖着具体要被移动的dom移动；另外一种是具体dom留在原位，拖着具体dom的影子移动，确定位置后，再将具体的dom放过去)<br>4.拖放状态在组件中如何维护</p>
<p>鼠标移动可能会超出要移动的组件和他的父组件，除了在document上监听，还可以在一个全局透明遮罩层上监听MouseMove和MouseUp好处：拖放过程不会选中其他任何元素，防止点击到其他组件</p>
<p>其他情景思考：<br>每个条目高度不一致，如何确定移动位置？<br>条目所在的列表有折叠，存在滚动条，如何根据滚动条确定位置？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import React, &#123; Component &#125; from &quot;react&quot;;</div><div class="line"></div><div class="line">require(&quot;./DndSample.css&quot;);</div><div class="line"></div><div class="line">const list = [];</div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">  list.push(`Item $&#123;i + 1&#125;`);</div><div class="line">&#125;</div><div class="line"></div><div class="line">const move = (arr, startIndex, toIndex) =&gt; &#123;</div><div class="line">  arr = arr.slice();</div><div class="line">  arr.splice(toIndex, 0, arr.splice(startIndex, 1)[0]);</div><div class="line">  return arr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const lineHeight = 42;</div><div class="line">class DndSample extends Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state.list = list;</div><div class="line">  &#125;</div><div class="line">  state = &#123;</div><div class="line">    dragging: false,</div><div class="line">    draggingIndex: -1,</div><div class="line">    startPageY: 0,</div><div class="line">    offsetPageY: 0,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  handleMounseDown = (evt, index) =&gt; &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      dragging: true,</div><div class="line">      startPageY: evt.pageY,</div><div class="line">      currentPageY: evt.pageY,</div><div class="line">      draggingIndex: index,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  handleMouseUp = () =&gt; &#123;</div><div class="line">    this.setState(&#123; dragging: false, startPageY: 0, draggingIndex: -1 &#125;);</div><div class="line">  &#125;;</div><div class="line">  //如果往下滑，就一次把下一条数据交换位置，如果往上移动，就一次把上一条数据交换位置，</div><div class="line">  handleMouseMove = evt =&gt; &#123;</div><div class="line">    let offset = evt.pageY - this.state.startPageY;</div><div class="line">    const draggingIndex = this.state.draggingIndex;</div><div class="line">    if (offset &gt; lineHeight &amp;&amp; draggingIndex &lt; this.state.list.length - 1) &#123;</div><div class="line">      // move down</div><div class="line">      offset -= lineHeight;</div><div class="line">      this.setState(&#123;</div><div class="line">        list: move(this.state.list, draggingIndex, draggingIndex + 1),</div><div class="line">        draggingIndex: draggingIndex + 1,</div><div class="line">        startPageY: this.state.startPageY + lineHeight,</div><div class="line">      &#125;);</div><div class="line">    &#125; else if (offset &lt; -lineHeight &amp;&amp; draggingIndex &gt; 0) &#123;</div><div class="line">      // move up</div><div class="line">      offset += lineHeight;</div><div class="line">      this.setState(&#123;</div><div class="line">        list: move(this.state.list, draggingIndex, draggingIndex - 1),</div><div class="line">        draggingIndex: draggingIndex - 1,</div><div class="line">        startPageY: this.state.startPageY - lineHeight,</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    this.setState(&#123; offsetPageY: offset &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  getDraggingStyle(index) &#123;</div><div class="line">    if (index !== this.state.draggingIndex) return &#123;&#125;;</div><div class="line">    return &#123;</div><div class="line">      backgroundColor: &quot;#eee&quot;,</div><div class="line">      transform: `translate(10px, $&#123;this.state.offsetPageY&#125;px)`,</div><div class="line">      opacity: 0.5,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;dnd-sample&quot;&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">          &#123;this.state.list.map((text, i) =&gt; (</div><div class="line">            &lt;li</div><div class="line">              key=&#123;text&#125;</div><div class="line">              onMouseDown=&#123;evt =&gt; this.handleMounseDown(evt, i)&#125;</div><div class="line">              style=&#123;this.getDraggingStyle(i)&#125;</div><div class="line">            &gt;</div><div class="line">              &#123;text&#125;</div><div class="line">            &lt;/li&gt;</div><div class="line">          ))&#125;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &#123;this.state.dragging &amp;&amp; ( //在一个遮罩层上监听MouseMove和MouseUp</div><div class="line">          &lt;div</div><div class="line">            className=&quot;dnd-sample-mask&quot;</div><div class="line">            onMouseMove=&#123;this.handleMouseMove&#125;</div><div class="line">            onMouseUp=&#123;this.handleMouseUp&#125;</div><div class="line">          /&gt;</div><div class="line">        )&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default DndSample;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">.dnd-sample ul &#123;</div><div class="line">  display: inline-block;</div><div class="line">  margin: 0;</div><div class="line">  padding: 0;</div><div class="line">  background-color: #eee;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.dnd-sample li &#123;</div><div class="line">  cursor: default;</div><div class="line">  list-style: none;</div><div class="line">  border-bottom: 1px solid #ddd;</div><div class="line">  padding: 10px;</div><div class="line">  margin: 0;</div><div class="line">  width: 300px;</div><div class="line">  background-color: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.dnd-sample-mask &#123;</div><div class="line">  position: fixed;</div><div class="line">  left: 0;</div><div class="line">  right: 0;</div><div class="line">  top: 0;</div><div class="line">  bottom: 0;</div><div class="line">  background: rgba(0, 0, 0, 0.1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用-React-实现拖放的技术要点&quot;&gt;&lt;a href=&quot;#使用-React-实现拖放的技术要点&quot; class=&quot;headerlink&quot; title=&quot;使用 React 实现拖放的技术要点&quot;&gt;&lt;/a&gt;使用 React 实现拖放的技术要点&lt;/h1&gt;&lt;p&gt;1.如何使用
    
    </summary>
    
    
      <category term="react" scheme="http://yoohannah.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>对话框</title>
    <link href="http://yoohannah.github.io/post/react/course/dialog.html"/>
    <id>http://yoohannah.github.io/post/react/course/dialog.html</id>
    <published>2018-12-04T13:18:37.000Z</published>
    <updated>2018-12-22T05:13:36.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用React-Portals"><a href="#使用React-Portals" class="headerlink" title="使用React Portals"></a>使用React Portals</h1><p>React 16.3 新引入的 API<br>可以将虚拟 DOM 映射到任何真实 DOM 节点<br>解决了漂浮层的问题,比如Dialog,Tooltip 等</p>
<p>主要思路使用ReactDOM.createPortal将自定义dialog利用id挂到根标签上，dialog样式(包括悬浮)自己需要通过css定义,弹窗的显示和隐藏通过state操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">mport React from &quot;react&quot;;</div><div class="line">import ReactDOM from &quot;react-dom&quot;;</div><div class="line">import &#123; Button &#125; from &quot;antd&quot;;</div><div class="line">import &quot;./PortalSample.css&quot;;</div><div class="line"></div><div class="line">export default class PortalSample extends React.PureComponent &#123;</div><div class="line">  state = &#123; visible: false &#125;;</div><div class="line">  renderButton() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Button type=&quot;primary&quot; onClick=&#123;() =&gt; this.setState(&#123; visible: true &#125;)&#125;&gt;</div><div class="line">        打开对话框</div><div class="line">      &lt;/Button&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  renderDialog() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;portal-sample&quot;&gt;</div><div class="line">        &lt;div&gt;这是一个对话框！&lt;/div&gt;</div><div class="line">        &lt;br /&gt;</div><div class="line">        &lt;Button</div><div class="line">          type=&quot;primary&quot;</div><div class="line">          onClick=&#123;() =&gt; this.setState(&#123; visible: false &#125;)&#125;</div><div class="line">        &gt;</div><div class="line">          关闭对话框</div><div class="line">        &lt;/Button&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    if (!this.state.visible) return this.renderButton();</div><div class="line">    return ReactDOM.createPortal(</div><div class="line">      this.renderDialog(),</div><div class="line">      document.getElementById(&quot;dialog-container&quot;),//在APP组件中定义</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.portal-sample &#123;</div><div class="line">  position: absolute;</div><div class="line">  padding: 20px;</div><div class="line">  width: 500px;</div><div class="line">  height: 300px;</div><div class="line">  left: 50%;</div><div class="line">  top: 50%;</div><div class="line">  transform: translate(-50%, -50%);</div><div class="line">  background-color: #fff;</div><div class="line">  border-radius: 10px;</div><div class="line">  border: 1px solid #ddd;</div><div class="line">  box-shadow: 0px 0px 20px 2px #ddd;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="使用UI组件库"><a href="#使用UI组件库" class="headerlink" title="使用UI组件库"></a>使用UI组件库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import ReactDOM from &quot;react-dom&quot;;</div><div class="line">import &#123; Button, Modal &#125; from &quot;antd&quot;;</div><div class="line">import &quot;./PortalSample.css&quot;;</div><div class="line"></div><div class="line">export default class PortalSample extends React.PureComponent &#123;</div><div class="line">  state = &#123; visible: false &#125;;</div><div class="line">  renderButton() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Button type=&quot;primary&quot; onClick=&#123;() =&gt; this.setState(&#123; visible: true &#125;)&#125;&gt;</div><div class="line">        打开对话框</div><div class="line">      &lt;/Button&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  renderDialog() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Modal</div><div class="line">        visible=&#123;this.state.visible&#125;</div><div class="line">        onCancel=&#123;() =&gt; this.setState(&#123; visible: false &#125;)&#125;</div><div class="line">      &gt;</div><div class="line">        &lt;div&gt;这是一个对话框！&lt;/div&gt;</div><div class="line">      &lt;/Modal&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">        &#123;this.renderButton()&#125;</div><div class="line">        &#123;this.renderDialog()&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用React-Portals&quot;&gt;&lt;a href=&quot;#使用React-Portals&quot; class=&quot;headerlink&quot; title=&quot;使用React Portals&quot;&gt;&lt;/a&gt;使用React Portals&lt;/h1&gt;&lt;p&gt;React 16.3 新引入的 AP
    
    </summary>
    
    
      <category term="react" scheme="http://yoohannah.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>布局</title>
    <link href="http://yoohannah.github.io/post/react/course/layout.html"/>
    <id>http://yoohannah.github.io/post/react/course/layout.html</id>
    <published>2018-12-04T13:17:37.000Z</published>
    <updated>2018-12-22T05:13:48.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现布局的几种方式"><a href="#实现布局的几种方式" class="headerlink" title="实现布局的几种方式"></a>实现布局的几种方式</h1><p>1.从0开始用 CSS实现<br>2.使用 CSS Grid 系统 （通过class实现，无需关心布局如何实现,同时可以适应不同屏幕的尺寸）<br>3.使用组件库,例如 antd（通过组件标签实现）</p>
<p>布局常见场景:侧边栏宽度可调整<br>1.手动实现拖放逻辑<br>2.使用 local storage 存储宽度位置</p>
<h2 id="上中下结构-中间高度随父级高度自适应，头部和底部高度固定"><a href="#上中下结构-中间高度随父级高度自适应，头部和底部高度固定" class="headerlink" title="上中下结构,中间高度随父级高度自适应，头部和底部高度固定"></a>上中下结构,中间高度随父级高度自适应，头部和底部高度固定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div className=&quot;app-layout1&quot;&gt;</div><div class="line">    &lt;div className=&quot;header&quot;&gt;Header&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;content&quot;&gt;content&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;footer&quot;&gt;Footer&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.app-layout1 &#123;</div><div class="line">  width: 500px;</div><div class="line">  height: 400px;</div><div class="line">  position: relative;</div><div class="line">  background-color: #eee;</div><div class="line">  text-align: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.app-layout1 .header &#123;</div><div class="line">  line-height: 60px;</div><div class="line">  border-bottom: 2px solid #fff;</div><div class="line">&#125;</div><div class="line">.app-layout1 .content &#123;</div><div class="line">  position: absolute;</div><div class="line">  bottom: 60px;</div><div class="line">  top: 60px;</div><div class="line">  left: 0;</div><div class="line">  right: 0;</div><div class="line">&#125;</div><div class="line">.app-layout1 .footer &#123;</div><div class="line">  border-top: 2px solid #fff;</div><div class="line">  line-height: 60px;</div><div class="line">  bottom: 0;</div><div class="line">  left: 0;</div><div class="line">  right: 0;</div><div class="line">  position: absolute;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h2 id="导航布局，左边是导航栏，右边上中下结构"><a href="#导航布局，左边是导航栏，右边上中下结构" class="headerlink" title="导航布局，左边是导航栏，右边上中下结构"></a>导航布局，左边是导航栏，右边上中下结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div className=&quot;app-layout2&quot;&gt;</div><div class="line">    &lt;div className=&quot;header&quot;&gt;Header&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;sider&quot;&gt;Sider&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;content&quot;&gt;Content&lt;/div&gt;</div><div class="line">    &lt;div className=&quot;footer&quot;&gt;Footer&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">.app-layout2 &#123;</div><div class="line">  width: 500px;</div><div class="line">  height: 400px;</div><div class="line">  position: relative;</div><div class="line">  background-color: #eee;</div><div class="line">  text-align: center;</div><div class="line">  padding-left: 150px;</div><div class="line">  line-height: 60px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.app-layout2 .header &#123;</div><div class="line">  border-bottom: 2px solid #fff;</div><div class="line">&#125;</div><div class="line">.app-layout2 .content &#123;</div><div class="line">  position: absolute;</div><div class="line">  bottom: 60px;</div><div class="line">  top: 60px;</div><div class="line">  left: 150px;</div><div class="line">  right: 0;</div><div class="line">&#125;</div><div class="line">.app-layout2 .sider &#123;</div><div class="line">  width: 150px;</div><div class="line">  position: absolute;</div><div class="line">  border-right: 2px solid #fff;</div><div class="line">  top: 0;</div><div class="line">  left: 0;</div><div class="line">  bottom: 0;</div><div class="line">&#125;</div><div class="line">.app-layout2 .footer &#123;</div><div class="line">  border-top: 2px solid #fff;</div><div class="line">  bottom: 0;</div><div class="line">  left: 150px;</div><div class="line">  right: 0;</div><div class="line">  position: absolute;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="导航栏随鼠标滑动调整宽度"><a href="#导航栏随鼠标滑动调整宽度" class="headerlink" title="导航栏随鼠标滑动调整宽度"></a>导航栏随鼠标滑动调整宽度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; Button &#125; from &quot;antd&quot;;</div><div class="line">import &quot;./LayoutResize.css&quot;;</div><div class="line"></div><div class="line">export default class LayoutResize extends React.PureComponent &#123;</div><div class="line">  state = &#123;</div><div class="line">    dragging: false,</div><div class="line">    startPageX: 0,</div><div class="line">    siderWidth: 150,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  handleMouseDown = evt =&gt; &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      dragging: true,</div><div class="line">      startPageX: evt.pageX,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  handleMouseUp = () =&gt; &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      dragging: false,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  handleMouseMove = evt =&gt; &#123;</div><div class="line">    let siderWidth = this.state.siderWidth + evt.pageX - this.state.startPageX;</div><div class="line">    if (siderWidth &lt; 20 || siderWidth &gt; 300) return;</div><div class="line">    this.setState(&#123;</div><div class="line">      siderWidth,</div><div class="line">      startPageX: evt.pageX,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; dragging, siderWidth &#125; = this.state;</div><div class="line">    const pxWidth = `$&#123;siderWidth&#125;px`;</div><div class="line">    return (</div><div class="line">      &lt;div className=&quot;app-layout-resize&quot; style=&#123;&#123; paddingLeft: pxWidth &#125;&#125;&gt;</div><div class="line">        &lt;div className=&quot;header&quot;&gt;Header&lt;/div&gt;</div><div class="line">        &lt;div className=&quot;sider&quot; style=&#123;&#123; width: pxWidth &#125;&#125;&gt;</div><div class="line">          Sider</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div className=&quot;content&quot; style=&#123;&#123; left: pxWidth &#125;&#125;&gt;</div><div class="line">          Content</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div className=&quot;footer&quot; style=&#123;&#123; left: pxWidth &#125;&#125;&gt;</div><div class="line">          Footer</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div</div><div class="line">          className=&quot;sider-resizer&quot;</div><div class="line">          style=&#123;&#123; left: pxWidth &#125;&#125;</div><div class="line">          onMouseDown=&#123;this.handleMouseDown&#125;</div><div class="line">        /&gt;</div><div class="line">        &#123;dragging &amp;&amp; (</div><div class="line">          &lt;div</div><div class="line">            className=&quot;resize-mask&quot;</div><div class="line">            onMouseMove=&#123;this.handleMouseMove&#125;</div><div class="line">            onMouseUp=&#123;this.handleMouseUp&#125;</div><div class="line">          /&gt;</div><div class="line">        )&#125;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">.app-layout-resize &#123;</div><div class="line">  width: 500px;</div><div class="line">  height: 400px;</div><div class="line">  position: relative;</div><div class="line">  background-color: #eee;</div><div class="line">  text-align: center;</div><div class="line">  padding-left: 150px;</div><div class="line">  line-height: 60px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.app-layout-resize .header &#123;</div><div class="line">  border-bottom: 2px solid #fff;</div><div class="line">&#125;</div><div class="line">.app-layout-resize .content &#123;</div><div class="line">  position: absolute;</div><div class="line">  bottom: 60px;</div><div class="line">  top: 60px;</div><div class="line">  left: 0;</div><div class="line">  right: 0;</div><div class="line">&#125;</div><div class="line">.app-layout-resize .sider &#123;</div><div class="line">  width: 150px;</div><div class="line">  position: absolute;</div><div class="line">  border-right: 2px solid #fff;</div><div class="line">  top: 0;</div><div class="line">  left: 0;</div><div class="line">  bottom: 0;</div><div class="line">&#125;</div><div class="line">.app-layout-resize .footer &#123;</div><div class="line">  border-top: 2px solid #fff;</div><div class="line">  bottom: 0;</div><div class="line">  left: 150px;</div><div class="line">  right: 0;</div><div class="line">  position: absolute;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.app-layout-resize .sider-resizer &#123;</div><div class="line">  position: absolute;</div><div class="line">  left: 148px;</div><div class="line">  width: 6px;</div><div class="line">  top: 0;</div><div class="line">  bottom: 0;</div><div class="line">  cursor: col-resize;</div><div class="line">&#125;</div><div class="line">.app-layout-resize .resize-mask &#123;</div><div class="line">  background: rgba(0, 0, 0, 0);</div><div class="line">  position: fixed;</div><div class="line">  left: 0;</div><div class="line">  top: 0;</div><div class="line">  right: 0;</div><div class="line">  bottom: 0;</div><div class="line">  cursor: col-resize;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现布局的几种方式&quot;&gt;&lt;a href=&quot;#实现布局的几种方式&quot; class=&quot;headerlink&quot; title=&quot;实现布局的几种方式&quot;&gt;&lt;/a&gt;实现布局的几种方式&lt;/h1&gt;&lt;p&gt;1.从0开始用 CSS实现&lt;br&gt;2.使用 CSS Grid 系统 （通过class
    
    </summary>
    
    
      <category term="react" scheme="http://yoohannah.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Rekit</title>
    <link href="http://yoohannah.github.io/post/react/course/rekit.html"/>
    <id>http://yoohannah.github.io/post/react/course/rekit.html</id>
    <published>2018-12-04T13:12:37.000Z</published>
    <updated>2018-12-22T05:13:56.245Z</updated>
    
    <content type="html"><![CDATA[<p>背景<br> 一个独立功能通常需要多个文件组成 （组件，reducer,action,路由等文件）<br> 代码模板很复杂 （reducer,action需要代码模板，实际上填写的逻辑只是一小部分）<br> 重构极为困难<br> （需要改动的地方很多）<br> 项目复杂后很难理解和维护（无法直观的看到他们之间的关系）</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>Rekit：更好的代码导航</p>
<ol>
<li>语义化的组织源代码文件 </li>
<li>使用子 Tab来展示项目元素的各个部分 </li>
<li>直观的显示和导航某个功能的所有依赖</li>
</ol>
<p>Rekit： 一键生成项目元素（它是一个IDE）</p>
<ol>
<li>直观的 UI 用于生成组件，action,reducer 等 </li>
<li>模板代码遵循最佳实践（只需填入具体逻辑）</li>
<li>支持命令行方式创建项目元素</li>
</ol>
<p>Rekit： 重构非常容易</p>
<ol>
<li>右键菜单重命名或者删除某个项目元素 </li>
<li>所有相关代码都会一次性重构从而保证一致性 </li>
<li>详细的 log信息显示重构的完整修改</li>
</ol>
<p>Rekit： 可视化的项目架构</p>
<ol>
<li>项目总体架构的可视化图表 </li>
<li>项目依赖关系的图表</li>
</ol>
<p>Rekit 是如何工作的？</p>
<ol>
<li>定义了基于feature 的可扩展文件夹结构（文件夹结构有一定规则，可以进行解析）</li>
<li>基于最佳实践生成代码和管理项目元素 </li>
<li>提供工具和 IDE 确保代码和文件夹结构遵循最佳实践<br>（减少工作量）</li>
</ol>
<h1 id="遵循最佳实践"><a href="#遵循最佳实践" class="headerlink" title="遵循最佳实践"></a>遵循最佳实践</h1><p>1.以 feature 方式组织代码 （功能如果是必须的就放在已有模块底层实现，如果是原有功能增强的实现，则新拆分成功能模块）<br>2.拆分组件,action 和 reducer<br>3.拆分路由配置</p>
<p>通过代码自动生成保持一致性<br>1.文件夹结构一致性<br>2.文件名一致性<br>3.变量名一致性<br>4.代码逻辑的一致性</p>
<h1 id="使用-React-Router-管理路由授权"><a href="#使用-React-Router-管理路由授权" class="headerlink" title="使用 React Router 管理路由授权"></a>使用 React Router 管理路由授权</h1><p>1.实现基础:React Router 的动态路由机制 （<br> 不采用各个页面判断是否登录再redirect的方式跳转，路由配置（添加属性，那些可以在未登录下访问，或者哪些在未登录下不能访问）时就去动态监测当前用户是否登录，如果登录则全部路由生效；反之某些路由配置就不生效===&gt;不生效处理，在解析router JSON数据时根据store中登录状态和路由配置的属性判断,未登录则跳转403，其子路由清空<br>）<br>2.区分受保护路由和公开路由<br>3.访问未授权路由时重定向到登录页面 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景&lt;br&gt; 一个独立功能通常需要多个文件组成 （组件，reducer,action,路由等文件）&lt;br&gt; 代码模板很复杂 （reducer,action需要代码模板，实际上填写的逻辑只是一小部分）&lt;br&gt; 重构极为困难&lt;br&gt; （需要改动的地方很多）&lt;br&gt; 项目复杂后很
    
    </summary>
    
    
      <category term="react" scheme="http://yoohannah.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>表单 &amp; 列表</title>
    <link href="http://yoohannah.github.io/post/react/course/formList.html"/>
    <id>http://yoohannah.github.io/post/react/course/formList.html</id>
    <published>2018-12-04T13:12:37.000Z</published>
    <updated>2018-12-22T05:13:44.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表单功能点"><a href="#表单功能点" class="headerlink" title="表单功能点"></a>表单功能点</h1><ol>
<li>初始数据，提交和跳转</li>
</ol>
<p>表单各项配置的优化，可以通过对UI框架的API进行封装成高阶组件，然后在使用时，通过配置高阶组件的属性，将需要的配置项传递给UI框架API，减少代码冗余，配置清晰</p>
<p>提交后状态通过中间件返回promise判断接下来操作</p>
<p>2.<br>错误处理（可依靠UI框架进行判断）<br>动态表单元素（在传入高阶组件属性时采用函数返回值形式动态加载表单元素，在函数中处理要不要显示表单元素）<br>内容动态加载（在componentDidMount中进行数据请求，以及初始状态处理）</p>
<h1 id="列表页功能点"><a href="#列表页功能点" class="headerlink" title="列表页功能点"></a>列表页功能点</h1><h2 id="搜索，数据缓存和分页"><a href="#搜索，数据缓存和分页" class="headerlink" title="搜索，数据缓存和分页"></a>搜索，数据缓存和分页</h2><p>开发列表也要考虑的技术要点<br>1.如何翻页 (数据来自服务器还是客户端缓存)<br>2.如何进行内容搜索 （当前页面数据搜索还是服务器端数据搜索）<br>3.如何缓存数据<br>4.何时进行页面刷新</p>
<p>列表页数据通过store拿数据渲染，翻页，查找，刷新通过触发action然后从服务器拿到数据后，更新store,从而组件重新渲染</p>
<p>store 模型<br>listItems:当前页id集合数组[id1,id2]<br>byId:{id1:{id:id1,name:xxx},id2:{id:id2,name:xxx}}<br>keyword:关键字string<br>page:number 页数<br>fetchListPending:bool是否正在加载数据<br>FetchListError:OBJECT数据加载出错<br>listNeedReload:bool是否需要重新加载（做判断条件，例如编辑之后，设为true,在列表页拿到判断为true则重新获取列表数据）</p>
<p>URL设计<br>将页数和关键字当做路由参数传递在componentDidupdated中获取参数判断是否重新获取数据</p>
<h2 id="缓存更新，加载状态，错误处理"><a href="#缓存更新，加载状态，错误处理" class="headerlink" title="缓存更新，加载状态，错误处理"></a>缓存更新，加载状态，错误处理</h2><p>通过store模型中的相关数据进行判断展示</p>
<h1 id="页面数据需要来源多个请求的处理"><a href="#页面数据需要来源多个请求的处理" class="headerlink" title="页面数据需要来源多个请求的处理"></a>页面数据需要来源多个请求的处理</h1><p>页面数据来自多个请求<br>1.请求之间无依赖关系，可以并发进行<br>2.请求有依赖，需要依次进行 （promise）<br>3.请求完成之前，页面显示 Loading 状态<br>loading数据状态由当前数据推导确定</p>
<h1 id="内容页的加载和缓存"><a href="#内容页的加载和缓存" class="headerlink" title="内容页的加载和缓存"></a>内容页的加载和缓存</h1><p>内容页和列表页的数据关系<br>1.简单业务：列表页数据包含内容页的数据 （注意页面刷新情况数据的获取）<br>2.复杂业务：内容页数据需要额外获取 （每次进来都重新获取）<br>3.内容页数据的缓存（将数据放在store中，在store中拿数据）</p>
<h1 id="基于React-Router-实现分步操作"><a href="#基于React-Router-实现分步操作" class="headerlink" title="基于React Router 实现分步操作"></a>基于React Router 实现分步操作</h1><p>向导页面需要考虑的技术要点<br>1.使用 URL进行导航的好处 （可以直接刷新其中一个步骤）</p>
<ol>
<li>表单内容存放的位置 </li>
<li>页面状态如何切换</li>
</ol>
<p>将表单元素放在一个统一的form中，通过路由判断第几步，进而显示不同的表单元素，需要注意的是，切换下一步时，当前组件消失，配置的数据也会消失，需要将当前所填数据进行保存，以便在返回上一步时有数据</p>
<h1 id="集成第三方-JS-库的技术要点"><a href="#集成第三方-JS-库的技术要点" class="headerlink" title="集成第三方 JS 库的技术要点"></a>集成第三方 JS 库的技术要点</h1><p>1.使用 ref 获取原生 DOM 节点引用<br>2.手动将组件状态更新到 DOM 节点<br>(对于数据驱动UI展示的情况,第一次渲染和之后更新需要手动操作DOM的过程，将数据注入过程隔离出来，单独处理成一个函数，再当react 部分操作导致需要重新渲染时，再调用，将react状态映射到第三方DOM中)<br>3.组件销毁时移除原生节点 DOM 事件</p>
<h1 id="基于路由实现菜单导航"><a href="#基于路由实现菜单导航" class="headerlink" title="基于路由实现菜单导航"></a>基于路由实现菜单导航</h1><p>1.菜单导航只是改变 URL 状态<br>2.根据当前 URL 显示菜单的当前状态(使用navLink标签实现，注意react-router和redux一起使用时，url发生变化，组建要重新render时，必须要让组件绑定到router的store上，即让react-router也一起渲染)</p>
<h1 id="如何避免应用出现性能问题"><a href="#如何避免应用出现性能问题" class="headerlink" title="如何避免应用出现性能问题"></a>如何避免应用出现性能问题</h1><p>1.了解常见的性能问题场景 （键盘输入，鼠标移动是否卡顿）<br>2.时刻注意代码的潜在性能问题 （何时拆分组件，有优化空间；能否高效更新，组件拆分是否够细，足够细的话，组件越接近纯函数，就越可能减少参与到diff操作的可能性，从而提高渲染速度）<br>3.注重可重构的代码 （代码耦合性低，几乎不依赖外界，也不被外界依赖，对于有重构可能性的代码保留重构空间，当其他优先级较高的性能问题解决后，再进行代码重构）<br>4.了解如何使用工具定位性能问题</p>
<h1 id="网络性能优化：自动化按需加载"><a href="#网络性能优化：自动化按需加载" class="headerlink" title="网络性能优化：自动化按需加载"></a>网络性能优化：自动化按需加载</h1><p>1.什么是按需加载 (切换页面时才加载相应页面，而不是一开始就将所有页面加载进来)<br>2.使用 Webpack 的 import API<br>3.使用 react-loadable 库实现 React 异步加载<br>利用分包加载,在配置路由时实现,在总路由中删除，防止打包到总包中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import loadable from &apos;react-loadable&apos;</div><div class="line">const listPage = loadable(&#123;</div><div class="line">    loader:()=&gt;import (&apos;./listPage&apos;),</div><div class="line">    loading:()=&gt;&lt;div&gt;loading...&lt;/div&gt;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>listPage页面在加载该页时，会自动加载listPage的独立打包文件</p>
<p>使用 reselect 避免重复计算<br>reselect 可以创建自动缓存的数据处理流程，通过保存计算结果，避免重复计算</p>
<h1 id="异步渲染的两个部分"><a href="#异步渲染的两个部分" class="headerlink" title="异步渲染的两个部分"></a>异步渲染的两个部分</h1><p>时间分片<br>DOM操作的优先级低于浏览器原生行为，例如键盘和鼠标输入，从而保证操作的流畅。<br>（setstate导致的重新render等页面行为（滚动，输入）结束后再执行）<br>1.虚拟 DOM 的 diff 操作可以分片进行 （对操作进行序列化，然后进行合并或者优先级处理）<br>2.React 新 API: unstatble_deferredUpdates（低级别的setstate）<br>3.Chrome 新 API:requestIdleCallback(浏览器级别的api,告诉代码内存空闲（不再滚动或敲击键盘），可以进行一些之前优先级低的UI更新操作，时间分片基础)</p>
<p>渲染挂起<br>虚拟DOM节点可以等待某个异步操作的完成,并指定timeout后,才完成真正的渲染<br>（可以不再注意什么时候显示loading状态，取消loading状态，虚拟dom节点可以自己等待异步操作的完成，只要虚拟dom节点返回一个promise,渲染引擎就会等promise结束后再去render）</p>
<ol>
<li><p>新内置组件：Timeout </p>
</li>
<li><p>unstatble_deferUpdate</p>
</li>
</ol>
<h1 id="借助工具发现性能问题"><a href="#借助工具发现性能问题" class="headerlink" title="借助工具发现性能问题"></a>借助工具发现性能问题</h1><p>1.使用 React DevTool 找到多余渲染<br>chrome 插件，可查看react应用的状态，帮助找到不必要的render，从而进行调优—&gt; [highlight update]<br>2.使用 Chrome DevTool 定位性能瓶颈<br>什么样的组件花了多长时间做了什么样的渲染—&gt;performance</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;表单功能点&quot;&gt;&lt;a href=&quot;#表单功能点&quot; class=&quot;headerlink&quot; title=&quot;表单功能点&quot;&gt;&lt;/a&gt;表单功能点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;初始数据，提交和跳转&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;表单各项配置的优化，可以通过对UI框架的API进行封装
    
    </summary>
    
    
      <category term="react" scheme="http://yoohannah.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Redux</title>
    <link href="http://yoohannah.github.io/post/react/course/redux.html"/>
    <id>http://yoohannah.github.io/post/react/course/redux.html</id>
    <published>2018-12-04T13:10:37.000Z</published>
    <updated>2018-12-22T05:13:52.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要redux"><a href="#为什么需要redux" class="headerlink" title="为什么需要redux"></a>为什么需要redux</h1><p>原有组件间通信方式错综复杂，逐层传递，不明了，方便组件间通信<br>用store管理所有组件的状态</p>
<h1 id="redux-特性"><a href="#redux-特性" class="headerlink" title="redux 特性"></a>redux 特性</h1><p>single source of truth：状态来源唯一；</p>
<p>可预测性：state +action = new state</p>
<p>纯函数更新Store：输出取决于输入，内部不会依赖任何除参数以外外部元素产生副作用</p>
<p>store 三个函数</p>
<p>getState()</p>
<p>dispatch(action)</p>
<p>subscribe(listener)</p>
<p>action 描述行为的对象集合</p>
<p>reducer 更新state的具体行为</p>
<h1 id="几个工具函数"><a href="#几个工具函数" class="headerlink" title="几个工具函数"></a>几个工具函数</h1><p>combineReducers   把多个reducer 合成一个新的reducer，并定义每个reducer在store中的对应节点</p>
<p>bindActionCreators  封装actionCreator和store.dispatch调用过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function actionCreator()&#123;</div><div class="line">return &#123;</div><div class="line">type:&apos;addItem&apos;,</div><div class="line">text:&apos;......&apos;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">store.dispatch(actionCreator())</div><div class="line">===&gt;</div><div class="line">actionCreator = bindActionCreators(actionCreator,store.dispatch)</div><div class="line">actionCreator()</div></pre></td></tr></table></figure></p>
<p>connect  创建高阶组件，对store 特定属性进行监听和绑定，从而在这些属性变化时自动刷新组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; bindActionCreators, createStore &#125; from &quot;redux&quot;;</div><div class="line">import &#123; Provider, connect &#125; from &quot;react-redux&quot;;</div><div class="line"></div><div class="line">// Store initial state</div><div class="line">const initialState = &#123; count: 0 &#125;;</div><div class="line"></div><div class="line">// reducer</div><div class="line">const counter = (state = initialState, action) =&gt; &#123;</div><div class="line">    switch (action.type) &#123;</div><div class="line">        case &quot;PLUS_ONE&quot;:</div><div class="line">            return &#123; count: state.count + 1 &#125;;</div><div class="line">        case &quot;MINUS_ONE&quot;:</div><div class="line">            return &#123; count: state.count - 1 &#125;;</div><div class="line">        case &quot;CUSTOM_COUNT&quot;:</div><div class="line">            return &#123; count: state.count + action.payload.count &#125;;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    return state;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// Create store</div><div class="line">const store = createStore(counter);</div><div class="line"></div><div class="line">// Action creator</div><div class="line">function plusOne() &#123;</div><div class="line">// action</div><div class="line">return &#123; type: &quot;PLUS_ONE&quot; &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function minusOne() &#123;</div><div class="line">return &#123; type: &quot;MINUS_ONE&quot; &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export class Counter extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        const &#123; count, plusOne, minusOne &#125; = this.props;//这三者通过connect关联store后获得</div><div class="line">        return (</div><div class="line">            &lt;div className=&quot;counter&quot;&gt;</div><div class="line">            &lt;button onClick=&#123;minusOne&#125;&gt;-&lt;/button&gt;</div><div class="line">            &lt;span style=&#123;&#123; display: &quot;inline-block&quot;, margin: &quot;0 10px&quot; &#125;&#125;&gt;</div><div class="line">            &#123;count&#125;</div><div class="line">            &lt;/span&gt;</div><div class="line">            &lt;button onClick=&#123;plusOne&#125;&gt;+&lt;/button&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//组件需要数据,state是store.getState()获得的数据集合根节点</div><div class="line">//性能问题：如果将store中的整个state绑定到组件上，那state上任何一个属性发生变化都会引起组件更新，所以向组件传递数据时，将数据绑定到尽可能的最小范围，实现只有绑定的数据变化时才引起组件更新</div><div class="line">function mapStateToProps(state) &#123; </div><div class="line">    return &#123;</div><div class="line">        count: state.count</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">//组件中需要用到的触发函数</div><div class="line">function mapDispatchToProps(dispatch) &#123;</div><div class="line">    return bindActionCreators(&#123; plusOne, minusOne &#125;, dispatch);</div><div class="line">&#125;</div><div class="line">//使用connect将redux和react 组件结合起来,形成高阶组件</div><div class="line">const ConnectedCounter = connect(mapStateToProps, mapDispatchToProps)(Counter);</div><div class="line"></div><div class="line">export default class CounterSample extends React.Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;Provider store=&#123;store&#125;&gt; //根节点定义Provider，挂上store,其所有子节点均可以访问到</div><div class="line">                &lt;ConnectedCounter /&gt;</div><div class="line">            &lt;/Provider&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要流程</p>
<p>1.定义redux store中需要的东西：reducer,actionCreator<br>2.使用createStore 根据reducer创建store<br>3.定义组件，确定需要哪些数据和触发函数<br>4.根据组件需要,创建数据获取函数，封装触发函数相应actionCreator<br>5.使用connect结合redux和组件形成高阶组件在Provider 中使用</p>
<h1 id="异步Action"><a href="#异步Action" class="headerlink" title="异步Action"></a>异步Action</h1><p>异步 action不是特殊action而是多个同步 action的组合使用</p>
<p>一个AJAX的Action发出后，到达中间件，进行预处理，根据预处理的结果dispatch不同的action出去,给reducer,然后更新store</p>
<p>异步Action不是redux的一个概念而是action的一种设计模式</p>
<p>不同的action还是同步的action,只是异步action把这些同步的action放在了不同阶段去dispath</p>
<p> 中间件<br>1.截获某种特定类型的action,进行特殊处理<br>2.发出action</p>
<h1 id="如何组织action和reducer"><a href="#如何组织action和reducer" class="headerlink" title="如何组织action和reducer"></a>如何组织action和reducer</h1><p>‘标准’形式redux action的问题<br>1.所有Action放一个文件，会无限扩展<br>2.Action,Reducer分开,实现业务逻辑时需要来回切换<br>3.系统中有哪些Action不够直观<br>新的方式<br>单个action和reducer放在同一个文件，一个文件一个action<br>然后将所有action导入同一文件，所有reducer导入同一文件<br>1.易于开发：不用在action和reducer文件间来回切换<br>2.易于维护：每个action文件都很小，容易理解<br>3.易于测试：每个业务逻辑只需要对应一个测试文件<br>4.易于理解：文件名就是action名字，文件列表就是action列表<br><a href="https://github.com/supnate/rekit-todomvc" target="_blank" rel="external">a sample</a><br>问题：拆分这么细的话，文件会多很多，对包的大小也会有影响</p>
<p>答：webpack 确实会为每个文件生成一小段固定的元代码，同样的代码行数，文件越多 bundle 确实会越大。但这个并不会成为性能瓶颈，两个原因：1. 拆分后代码数量不会显著增多，增加的元代码部分相比整个包的大小基本可以忽略；2. 生产环境普遍会启用 gzip，对于重复的元代码信息会被有效压缩，对比拆分前，gzip 后的包大小基本没有差异</p>
<h1 id="不可变数据"><a href="#不可变数据" class="headerlink" title="不可变数据"></a>不可变数据</h1><p>redux在修改state时采用新对象替换老对象的思路，不在原来对象上做修改，在新对象中复制老对象,包含要修改的部分,通过对比新老对象的引用不同，引起节点更新—-redux运行基础</p>
<p>为何需要不可变数据<br>1.性能优化（通过对比新旧state不是同一个引用即可判断store发生了变化，从而不用进行深层遍历，比较具体的值，redux中的store都是不可变数据，每个节点都是不可变数据，当一个组件绑定在一个节点上，只需判断前后状态的引用是否相等，从而判断store是否发生变化，进而决定是否要更新组件）<br>2.易于调试和跟踪（store变化时可以看到前后状态，便于调试）<br>3.易于推测(任何时刻可以知道是什么引起store发生变化，根据action前后的状态判断，action是否被进行了正确处理)</p>
<p>如何操作不可变数据<br>1.原生写法{…},Object.assign() 性能最好<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const state = &#123;</div><div class="line">    filter:&apos;completed&apos;,</div><div class="line">    todos:[&apos;learn react&apos;]</div><div class="line">&#125;</div><div class="line">const newState1 = &#123;...state,todos:[...state.todos,&apos;learn redux&apos;]&#125;</div><div class="line">const newState = Object.assign(&#123;&#125;,state,&#123;todos:[...state.todos,&apos;learn redux&apos;]&#125;)</div></pre></td></tr></table></figure></p>
<p>2.immutability-helper 适合需要深层次节点处理，需要引入类库，熟悉相应语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import update from &apos;immutability-helper&apos;</div><div class="line">const state = &#123;</div><div class="line">    filter:&apos;completed&apos;,</div><div class="line">    todos:[&apos;learn react&apos;]</div><div class="line">&#125;</div><div class="line">const newState = update(state,&#123;todos:&#123;$push:[&apos;learn redux&apos;]&#125;)</div></pre></td></tr></table></figure></p>
<p>3.immer 可以像操作原对象一样生成新对象，性能最差(当节点层数多，结构复杂时，需要为每个属性建立代理)，适合应用程序小，场景简单的情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import produce from &apos;immer&apos;</div><div class="line">const state = &#123;</div><div class="line">    filter:&apos;completed&apos;,</div><div class="line">    todos:[&apos;learn react&apos;]</div><div class="line">&#125;</div><div class="line">const newState = produce(state,draftState =&gt;&#123;</div><div class="line">    draftState.todos.push(&apos;learn redux&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么需要redux&quot;&gt;&lt;a href=&quot;#为什么需要redux&quot; class=&quot;headerlink&quot; title=&quot;为什么需要redux&quot;&gt;&lt;/a&gt;为什么需要redux&lt;/h1&gt;&lt;p&gt;原有组件间通信方式错综复杂，逐层传递，不明了，方便组件间通信&lt;br&gt;用sto
    
    </summary>
    
    
      <category term="react" scheme="http://yoohannah.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>路由</title>
    <link href="http://yoohannah.github.io/post/react/course/router.html"/>
    <id>http://yoohannah.github.io/post/react/course/router.html</id>
    <published>2018-12-04T13:08:37.000Z</published>
    <updated>2018-12-22T05:14:00.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要路由"><a href="#为什么需要路由" class="headerlink" title="为什么需要路由"></a>为什么需要路由</h1><p>1.单页应用需要进行页面切换<br>2.通过URL可以定位到页面<br>3.更有语义的组织资源</p>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>在组件容器里根据URL决定显示什么样的组件</p>
<h1 id="REACT-router特性（和后端路由对比）"><a href="#REACT-router特性（和后端路由对比）" class="headerlink" title="REACT router特性（和后端路由对比）"></a>REACT router特性（和后端路由对比）</h1><p>1.声明式路由定义</p>
<p>通过react组件标签进行声明，可以放在任何地方，不需要具体的路由表进行声明</p>
<p>2.动态路由</p>
<p>传统路由一旦配置了它就是一个配置文件，成为一个静态文件<br>而react router的路由是页面在render的时候才会被解析的，有相应路由的标记标签就是有相应的配置，没有标签就没有相应的配置</p>
<h1 id="三种路由实现方式"><a href="#三种路由实现方式" class="headerlink" title="三种路由实现方式"></a>三种路由实现方式</h1><ol>
<li><p>url路径：通过改变URl更改视图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; BroswerRouter as Router, Route, Link &#125; from &quot;react-router-dom&quot;;</div><div class="line"></div><div class="line">const Home = () =&gt; &lt;h1&gt;Home&lt;/h1&gt;;</div><div class="line">const Hello = () =&gt; &lt;h1&gt;Hello&lt;/h1&gt;;</div><div class="line">const About = () =&gt; &lt;h1&gt;About Us&lt;/h1&gt;;</div><div class="line"></div><div class="line">export default class RouterSample extends React.PureComponent &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Router&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/home&quot;&gt;Home&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/hello&quot;&gt;Hello&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          &lt;/ul&gt;</div><div class="line"></div><div class="line">          &lt;div id=&quot;page-container&quot;&gt;</div><div class="line">            &lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/hello&quot; component=&#123;Hello&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>hash路由：使用Router 的HashRouter组件 进行路由容器包裹,切换路由时，<br>具体的路径会被放在URl的#后面，通过改变hash更变视图《兼容低版本浏览器》</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; HashRouter as Router, Route, Link &#125; from &quot;react-router-dom&quot;;</div><div class="line"></div><div class="line">const Home = () =&gt; &lt;h1&gt;Home&lt;/h1&gt;;</div><div class="line">const Hello = () =&gt; &lt;h1&gt;Hello&lt;/h1&gt;;</div><div class="line">const About = () =&gt; &lt;h1&gt;About Us&lt;/h1&gt;;</div><div class="line"></div><div class="line">export default class RouterSample extends React.PureComponent &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Router&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/home&quot;&gt;Home&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/hello&quot;&gt;Hello&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          &lt;/ul&gt;</div><div class="line"></div><div class="line">          &lt;div id=&quot;page-container&quot;&gt;</div><div class="line">            &lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/hello&quot; component=&#123;Hello&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>存路由：使用react-router 的MemoryRouter组件进行路由容器包裹，路由信息放在内存中管理，URL不变的情况下，即可进行视图切换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123; HashRouter as Router, Route, Link &#125; from &quot;react-router-dom&quot;;</div><div class="line">import &#123; MemoryRouter &#125; from &quot;react-router&quot;;</div><div class="line"></div><div class="line">const Home = () =&gt; &lt;h1&gt;Home&lt;/h1&gt;;</div><div class="line">const Hello = () =&gt; &lt;h1&gt;Hello&lt;/h1&gt;;</div><div class="line">const About = () =&gt; &lt;h1&gt;About Us&lt;/h1&gt;;</div><div class="line"></div><div class="line">export default class RouterSample extends React.PureComponent &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;MemoryRouter&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/home&quot;&gt;Home&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/hello&quot;&gt;Hello&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          &lt;/ul&gt;</div><div class="line"></div><div class="line">          &lt;div id=&quot;page-container&quot;&gt;</div><div class="line">            &lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/hello&quot; component=&#123;Hello&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/MemoryRouter&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>基于路由配置进行资源组织 好处</p>
<p>1.实现业务逻辑的松耦合<br>2.易于扩展，重构和维护<br>3.路由层面实现Lazy Load</p>
<h1 id="REACT-Router-API"><a href="#REACT-Router-API" class="headerlink" title="REACT Router API"></a>REACT Router API</h1><p>1.<link>:普通链接,会触发浏览器刷新<br>类似a标签，但是不会触发浏览器的刷新，点击时router会接管导航，对切换进行处理不会传递到浏览器，让其进行真正的页面切换<br>to属性代表链接到的URl的地址<br>2.<navlink>:类似 Link但是会添加当前选中状态<br>可以添加activeClassName属性，当当前链接符合to属性值时,显示相应的样式 还有其他属性，详情请看react-router文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;NavLink to=&quot;/faq&quot; activeClassName=&apos;selected&apos;&gt;FAQs&lt;/NavLink&gt;</div></pre></td></tr></table></figure></navlink></p>
<p>3.<prompt>:满足条件时提示用户是否离开当前页面<br>切换页面时，跟用户提供一个确认的操作</prompt></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import &#123; Prompt &#125; from &quot;react-router&quot;;</div><div class="line">&lt;Prompt</div><div class="line">    when=&#123;formIsHalfFilledOut&#125;</div><div class="line">    message=&apos;Are you sure you want to leave&apos;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>4.<redirect>重定向当前页面,例如登录判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import &#123; Redirect,Route &#125; from &quot;react-router&quot;;</div><div class="line">&lt;Route exact path=&apos;/&apos; render=&#123;()=&gt;(</div><div class="line">    loggedIn?(</div><div class="line">    &lt;Redirect to=&apos;/dashboard&apos; /&gt;</div><div class="line">    ) : (</div><div class="line">        &lt;PublicHomePage/&gt;</div><div class="line">    )</div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure></redirect></p>
<p>5.<route>:路由配置的核心标记,路径匹配时显示对应组件<br>path：路由<br>component:相应要显示的组件<br>exact：是否精准配置path<br>多个route path都符合当前路由时，那相应组件都会进行显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Route exact path=&quot;/&quot; component=&#123;Home&#125; /&gt;</div></pre></td></tr></table></figure></route></p>
<p>6.<switch>:只显示第一个匹配的路由<br>找到一个匹配的路径就只显示这个路径相应的组件，其他组件不显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123; Switch,Route &#125; from &quot;react-router&quot;;</div><div class="line">&lt;Switch&gt;</div><div class="line">&lt;Route path=&quot;/home&quot; component=&#123;Home&#125; /&gt;</div><div class="line">&lt;Route path=&quot;/hello&quot; component=&#123;Hello&#125; /&gt;</div><div class="line">&lt;Route path=&quot;/about&quot; component=&#123;About&#125; /&gt;</div><div class="line">&lt;Route component=&#123;Nomatch&#125; /&gt;</div><div class="line">&lt;/Switch&gt;</div></pre></td></tr></table></figure></switch></p>
<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><p>通过URL传递参数 :<route path="/topic/:id" ...=""><br>获取参数：this.props.match.params<br>页面状态尽量通过URl参数定义,方便页面间跳转时数据传递，否则需要将数据转化成组件内部state进行渲染，过程复杂</route></p>
<h1 id="套嵌路由"><a href="#套嵌路由" class="headerlink" title="套嵌路由"></a>套嵌路由</h1><p>1.每个React组件都可以时路由容器<br>2.React Router的声明式语法可以方便的定义嵌套路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import &#123;</div><div class="line">  BrowserRouter as Router,</div><div class="line">  Route,</div><div class="line">  Link</div><div class="line">&#125; from &quot;react-router-dom&quot;;</div><div class="line"></div><div class="line">const Category = (&#123; match &#125;) =&gt; (</div><div class="line">  &lt;h1&gt;Sub Category &#123;match.params.subId&#125;&lt;/h1&gt;</div><div class="line">);</div><div class="line"></div><div class="line">const SubCategory = (&#123; match &#125;) =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h1&gt;Category &#123;match.params.id&#125;&lt;/h1&gt;</div><div class="line"></div><div class="line">    &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;Link to=&#123;`/category/$&#123;match.params.id&#125;/sub/1`&#125;&gt;</div><div class="line">          Sub Category 1</div><div class="line">        &lt;/Link&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;Link to=&#123;`/category/$&#123;match.params.id&#125;/sub/2`&#125;&gt;</div><div class="line">          Sub Category 2</div><div class="line">        &lt;/Link&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">      &lt;li&gt;</div><div class="line">        &lt;Link to=&#123;`/category/$&#123;match.params.id&#125;/sub/3`&#125;&gt;</div><div class="line">          Sub Category 3</div><div class="line">        &lt;/Link&gt;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;div id=&quot;page-container-2&quot;&gt;</div><div class="line">      &lt;Route</div><div class="line">        path=&quot;/category/:id/sub/:subId&quot;</div><div class="line">        component=&#123;Category&#125;</div><div class="line">      /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">);</div><div class="line"></div><div class="line">export default class NestedRoute extends React.PureComponent &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Router&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;ul id=&quot;menu&quot;&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/category/1&quot;&gt;Category 1&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/category/2&quot;&gt;Category 2&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">              &lt;Link to=&quot;/category/3&quot;&gt;Category 3&lt;/Link&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          &lt;/ul&gt;</div><div class="line"></div><div class="line">          &lt;div id=&quot;page-container&quot;&gt;</div><div class="line">            &lt;Route</div><div class="line">              path=&quot;/category/:id&quot;</div><div class="line">              component=&#123;SubCategory&#125;</div><div class="line">            /&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么需要路由&quot;&gt;&lt;a href=&quot;#为什么需要路由&quot; class=&quot;headerlink&quot; title=&quot;为什么需要路由&quot;&gt;&lt;/a&gt;为什么需要路由&lt;/h1&gt;&lt;p&gt;1.单页应用需要进行页面切换&lt;br&gt;2.通过URL可以定位到页面&lt;br&gt;3.更有语义的组织资源&lt;/p
    
    </summary>
    
    
      <category term="react" scheme="http://yoohannah.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>构建</title>
    <link href="http://yoohannah.github.io/post/react/course/construct.html"/>
    <id>http://yoohannah.github.io/post/react/course/construct.html</id>
    <published>2018-12-04T13:05:37.000Z</published>
    <updated>2018-12-22T05:13:32.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UI库"><a href="#UI库" class="headerlink" title="UI库"></a>UI库</h1><p>ant design 适合企业级应用，复杂交付，密集数据展示<br>material UI：时尚，花哨，具有的美观性，更适合开发面向消费者的应用（google版原始react实现）<br>sematic UI:把UI当做一种language来描述（jquery版原始react实现）</p>
<p>选择UI库的考虑因素</p>
<ol>
<li>组件库是否齐全（齐全的话可以减少很多工作量，不用自己实现）</li>
<li>样式风格是否符合业务需求（企业级应用一般要求简洁明了，对于密集性数据展示比较合理；对于移动端面向消费者一般要求好看，button，字体比较大）</li>
<li>API 设计是否便捷和灵活（使用起来是否方便，从而会影响开发效率）</li>
<li>技术支持是否完善（技术文档是否齐全；github上提issue时，能不能得到快速解答）</li>
<li>开发是否活跃（是否有稳定团队在进行快速迭代和维护，在遇到BUG或者需要新功能时可以得到满足）</li>
</ol>
<h1 id="使用next-js-构建react-同构应用"><a href="#使用next-js-构建react-同构应用" class="headerlink" title="使用next.js 构建react 同构应用"></a>使用next.js 构建react 同构应用</h1><p>同构应用：浏览器第一次向服务器请求页面时，服务器返回解析好的页面，不需要浏览器执行js来进行渲染（这样可以加快页面首次打开的速度），之后页面的操作/切换，像单页面一样，不需要浏览器刷新，均由前端完成，包括UI渲染，页面路由切换等，不需要再向服务端请求页面</p>
<p>next.js的几个规则<br>1.页面就是pages目录下的一个组件<br>所有页面放在pages文件夹下，一个页面即一个组件，文件名和文件路径对应路由路径<br>2.static目录映射静态文件（图片）<br>3.page具有特殊静态方法 getInitialProps<br>next.js提供给react组件初始化props的方法</p>
<p>命令行装包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save react react-dom next</div></pre></td></tr></table></figure></p>
<p>在页面中使用其它 react 组件<br>1.页面也是标准的node模块,可使用其它 react组件<br>2.页面会针对性打包,仅包含其引入的组件<br>,不会加载其他额外的资源</p>
<p>所有组件放在components文件夹下，在pages文件夹下的页面js中使用时，直接用路径import进去</p>
<p>使用Link实现同构路由</p>
<p>1.使用 next/link 定义链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import Link from &apos;next/link&apos;</div><div class="line">export default ()=&gt;</div><div class="line">&lt;div&gt;</div><div class="line">&lt;Link href=&apos;/about&apos;&gt;&lt;a&gt;here&lt;/a&gt;&lt;/Link&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>2.点击链接时页面不会刷新<br>如果使用a标签会产生刷新</p>
<p>3.使用 prefatch预加载目标资源<br>如果不添加该属性，则链接对应的组件，在切换的时候再加载相应页面打包的内容，有该属性，则next.js 打包时就会获取所有链接对应的组件，会预加载所有的js内容，从而提高页面切换速度，但是并不会预加载需要从服务器端API请求的数据</p>
<p>4.使用 replace 属性替换 url<br>替换当前页在路由中的history,无法后退回当前页</p>
<p>动态加载页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import dynamic from &apos;next/dynamic&apos;</div><div class="line">const DynamicComponet=dynamic(import(&apos;../components/hello&apos;))</div><div class="line">export default ()=&gt;</div><div class="line">&lt;div&gt;</div><div class="line">&lt;DynamicComponet/&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>页面在加载时，除了加载整个页面的main.js,还会加载动态加载的组件的js包，当这个动态组件被render的时候才会被加载</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>react 让前端单元测试变得容易<br>1.react 应用很少需要访问浏览器 API<br>2.虚拟 Dom 可以在 NodeJs 环境运行和测试 （不需要浏览器环境，在内存中render虚拟DOM即可完成测试）<br>3.Redux隔离了状态管理,纯数据层单元测试</p>
<p>单元测试涉及的工具<br>1.Jest: Facebook 开源的 JS 单元测试框架 （零配置，可以直接开始测试）<br>2.JS dom浏览器环境的 NodeJS 模拟 （一个在nodejs中可以模拟浏览器的library）<br>3.Enzyme:React组件渲染和测试 (在nodejs中渲染虚拟DOM进行测试，通过进行不同程度的render(shallow Rendering,Full Rendering,Static Rendering,进行不同程度的测试，比如利用shallow Rendering浅渲染测试渲染结果是否符合预期的DOM结构)<br>4.Nock: 模拟 HTTP请求 （模拟得到请求返回数据）<br>5.Sinon: 函数模拟和调用跟踪 （例如测试组件UI时，跟踪响应函数有没有被调用，调用几次，而不是去测试响应函数是否符合预期，测试响应函数是否符合预期属于响应函数测试范畴。集成在JEST中）<br>6.istanbul:单元测试覆盖率（通过对已有代码的修改和埋点去判断相关代码有没有被执行到）</p>
<h1 id="开发调试工具"><a href="#开发调试工具" class="headerlink" title="开发调试工具"></a>开发调试工具</h1><p>eslint<br>1.使用 .eslintrc 进行规则的配置<br>2.使用 airbnb 的 JavaScript 代码风格</p>
<p>检查语法风格，拼写错误，会报错，保证代码的一致性</p>
<p>Prettier<br>vscode 的一款插件，根据一定规则做代码格式化 .eslintrc<br>1.代码格式化的神器<br>2.保证更容易写出风格一致的代码<br>不会报错,会直接根据规则将代码格式化</p>
<p>React DevTool chrome插件<br>定位组件，可以以组件树的形式查看DOM结构，<br>勾选highlight updates可看到需要更新的组件</p>
<p>Redux DevTool chrome插件<br>可查看action和action引起的变化<br>time machine 功能，可以回溯action,方便观察loading过程，进而对loading进行优化<br>可自动生成测试代码</p>
<h1 id="理想架构"><a href="#理想架构" class="headerlink" title="理想架构"></a>理想架构</h1><p>易于开发（但可能会不容易扩展和维护）<br>1.开发工具是否完善 （采用的技术栈是否有相应的开发工具来支持）<br>2.生态圈是否繁荣 （是否有类似项目遇到过相同问题可以借鉴）<br>3.社区是否活跃（提问有人回答）</p>
<p>易于扩展<br>1.增加新功能是否容易<br>2.新功能是否会显著增加系统复杂度（系统放大之后会难以扩展和维护，考虑引进新功能时，如何架构能保证减少系统复杂度的提高）</p>
<p>易于维护<br>1.代码是否容易理解 （基于一定的最佳实践规范去编写，保证多人开发有一定的规则）<br>2.文档是否健全（通过注释，架构图，具体文档描述项目中的一些关键点，方便后续工作人员查看，也方便日后回头开发能快速理解关键点，来维护已有项目）</p>
<p>易于测试<br>1.功能的分层是否清晰 （UI，数据层之间依赖少）<br>2.副作用少 （模块高内聚，对外部依赖少）<br>3.尽量使用纯函数（输入决定输出，确定）</p>
<p>易于构建<br>1.使用通用技术和架构 （保证现有项目不需要定制化，就可以打包部署）<br>2.构建工具的选择（webpack ,roolup,使用常用技术栈，减少额外配置）</p>
<p>大型前端应用需要拆分复杂度原因<br>当项目增加更多功能的时候，项目复杂度并不会指数级的上升，始终保持在一个可控的范围之内</p>
<p>拆分复杂度技术架构</p>
<p>从功能上进行区分，将业务逻辑拆成高内聚松耦合的模块，每个模块负责一个功能，拥有自己的componet,action和reducer,这样即使当一个功能需要删除时，只要删除相应的模块即可，也保证其他模块不受影响；路由不再由一个文件统一定义，每个feature自己定义一个路由，然后由route的loader把每个模块的路由文件加载进根结点的routing文件</p>
<p>技术上的component,路由，reducer是按照功能的方式组织在模块上</p>
<p>如何组织 component,action 和reducer<br>文件夹结构<br>• 按 feature 组织源文件<br>• 组件和样式文件同一级<br>• React 单独文件夹<br>• 单元测试保持同样目录结构放在 tests 文件夹</p>
<p>组件和样式组织<br>一个功能的组件js和样式文件放在一个模块中，再由一个index.js引入各个模块的组件js文件，一个style文件引入各个模块的样式文件，进行统一管理输出,打包时就只是打包index.js和style文件<br>注意：<br>如果组件中引入样式文件，那么当这个组件被重复使用时，样式文件会被多次引入，打包时就会多次进行打包，造成不必要的代码冗余<br>使用上述加载方式，样式文件独立加载，js文件只需要加载它所需要的资源，就不会发生多次加载</p>
<p>action 和 reducer组织<br>一个模块的，action 和 reducer 一一对应放在同一文件，再由一个actions.js引入所有action,一个reducers.js引入所有reducer，这两个文件只是充当loader的角色<br>好处：action 和 reducer 非常小，不会被无限的去扩展，更容易理解</p>
<p>CONSTANTS.js中命名的常量一功能名开头，避免与其他模块常量命名冲突</p>
<p>再由rootreducer加载所有模块下的reducer,进行combineReducers挂载，实现全局使用</p>
<p>优点：一个模块内部是高内聚的，各个模块之间是松耦合的</p>
<p>主要思想：使用 root loader 加载 feature的各个资源</p>
<p>路由配置<br>每个模块（页面级）路由通过export JSON格式数据 ，自己配，再loader到根路由，由根路由统一处理解析json格式为react Router的声明式形式</p>
<p>每个模块都有都有自己的专属路由配置<br>顶层路由使用JSON配置更易维护和理解</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UI库&quot;&gt;&lt;a href=&quot;#UI库&quot; class=&quot;headerlink&quot; title=&quot;UI库&quot;&gt;&lt;/a&gt;UI库&lt;/h1&gt;&lt;p&gt;ant design 适合企业级应用，复杂交付，密集数据展示&lt;br&gt;material UI：时尚，花哨，具有的美观性，更适合开发面向
    
    </summary>
    
    
      <category term="react" scheme="http://yoohannah.github.io/tags/react/"/>
    
  </entry>
  
</feed>
